{
  "generated_at": "2025-07-29T07:07:52.882910",
  "total_files": 171,
  "documentation": [
    {
      "module": "independent_core.production_security_auditor",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_auditor.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_security_auditor\n\nAPI endpoints for independent_core.production_security_auditor\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //audit/gdpr/compliance\n\n#### POST //audit/gdpr/compliance\n\nAudit GDPR compliance.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//audit/gdpr/compliance\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//audit/gdpr/compliance\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //check/system/hardening\n\n#### POST //check/system/hardening\n\nCheck system hardening configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//check/system/hardening\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//check/system/hardening\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //generate/audit/recommendations\n\n#### POST //generate/audit/recommendations\n\nGenerate audit recommendations.\n\n**Parameters:**\n\n- **findings** (query) *required*: string - Parameter: findings\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/audit/recommendations?findings=example_findings\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/audit/recommendations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"findings\": \"example_findings\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //load/configuration\n\n#### POST //load/configuration\n\nLoad auditor configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/configuration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/audit\n\n#### POST /create/audit\n\nCreate a new security audit.\n\n**Parameters:**\n\n- **audit** (query) *required*: SecurityAudit - Parameter: audit\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/audit?audit=example_audit\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/audit\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"audit\": \"example_audit\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/compliance/audit\n\n#### POST /create/compliance/audit\n\nCreate a compliance-specific audit.\n\n**Parameters:**\n\n- **standard** (query) *required*: ComplianceStandard - Parameter: standard\n- **scope** (query) *required*: string - Parameter: scope\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/compliance/audit?standard=example_standard&scope=example_scope\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/compliance/audit\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"standard\": \"example_standard\",\n    \"scope\": \"example_scope\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/configuration/audit\n\n#### POST /create/configuration/audit\n\nCreate a configuration audit.\n\n**Parameters:**\n\n- **target_systems** (query) *required*: string - Parameter: target_systems\n- **config_type** (query) *required*: str - Parameter: config_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/configuration/audit?target_systems=example_target_systems&config_type=example_config_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/configuration/audit\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"target_systems\": \"example_target_systems\",\n    \"config_type\": \"example_config_type\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/penetration/test\n\n#### POST /create/penetration/test\n\nCreate a penetration test.\n\n**Parameters:**\n\n- **target_systems** (query) *required*: string - Parameter: target_systems\n- **test_type** (query) *required*: str - Parameter: test_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/penetration/test?target_systems=example_target_systems&test_type=example_test_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/penetration/test\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"target_systems\": \"example_target_systems\",\n    \"test_type\": \"example_test_type\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/vulnerability/scan\n\n#### POST /create/vulnerability/scan\n\nCreate a vulnerability scan.\n\n**Parameters:**\n\n- **target_systems** (query) *required*: string - Parameter: target_systems\n- **scan_type** (query) *required*: str - Parameter: scan_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/vulnerability/scan?target_systems=example_target_systems&scan_type=example_scan_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/vulnerability/scan\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"target_systems\": \"example_target_systems\",\n    \"scan_type\": \"example_scan_type\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /execute/audit\n\n#### POST /execute/audit\n\nExecute a security audit.\n\n**Parameters:**\n\n- **audit_id** (query) *required*: str - Parameter: audit_id\n- **target_systems** (query) *required*: string - Parameter: target_systems\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/execute/audit?audit_id=example_audit_id&target_systems=example_target_systems\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/execute/audit\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"audit_id\": \"example_audit_id\",\n    \"target_systems\": \"example_target_systems\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/audit/status\n\n#### GET /get/audit/status\n\nGet current audit system status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/audit/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/audit/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_security_auditor\",\n    \"description\": \"API endpoints for independent_core.production_security_auditor\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//load/configuration\": {\n      \"post\": {\n        \"summary\": \"Load auditor configuration.\",\n        \"description\": \"Load auditor configuration.\",\n        \"operationId\": \"_load_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/audit\": {\n      \"post\": {\n        \"summary\": \"Create a new security audit.\",\n        \"description\": \"Create a new security audit.\",\n        \"operationId\": \"create_audit\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"audit\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: audit\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SecurityAudit\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/execute/audit\": {\n      \"post\": {\n        \"summary\": \"Execute a security audit.\",\n        \"description\": \"Execute a security audit.\",\n        \"operationId\": \"execute_audit\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"audit_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: audit_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"target_systems\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target_systems\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//check/system/hardening\": {\n      \"post\": {\n        \"summary\": \"Check system hardening configuration.\",\n        \"description\": \"Check system hardening configuration.\",\n        \"operationId\": \"_check_system_hardening\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//audit/gdpr/compliance\": {\n      \"post\": {\n        \"summary\": \"Audit GDPR compliance.\",\n        \"description\": \"Audit GDPR compliance.\",\n        \"operationId\": \"_audit_gdpr_compliance\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//generate/audit/recommendations\": {\n      \"post\": {\n        \"summary\": \"Generate audit recommendations.\",\n        \"description\": \"Generate audit recommendations.\",\n        \"operationId\": \"_generate_audit_recommendations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"findings\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: findings\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/audit/status\": {\n      \"get\": {\n        \"summary\": \"Get current audit system status.\",\n        \"description\": \"Get current audit system status.\",\n        \"operationId\": \"get_audit_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_audits\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"completed_audits\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_findings\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"critical_findings\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"high_findings\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"storage_path\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"running\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/create/compliance/audit\": {\n      \"post\": {\n        \"summary\": \"Create a compliance-specific audit.\",\n        \"description\": \"Create a compliance-specific audit.\",\n        \"operationId\": \"create_compliance_audit\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"standard\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: standard\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ComplianceStandard\"\n            }\n          },\n          {\n            \"name\": \"scope\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: scope\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/penetration/test\": {\n      \"post\": {\n        \"summary\": \"Create a penetration test.\",\n        \"description\": \"Create a penetration test.\",\n        \"operationId\": \"create_penetration_test\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"target_systems\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target_systems\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"test_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: test_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/vulnerability/scan\": {\n      \"post\": {\n        \"summary\": \"Create a vulnerability scan.\",\n        \"description\": \"Create a vulnerability scan.\",\n        \"operationId\": \"create_vulnerability_scan\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"target_systems\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target_systems\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"scan_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: scan_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/configuration/audit\": {\n      \"post\": {\n        \"summary\": \"Create a configuration audit.\",\n        \"description\": \"Create a configuration audit.\",\n        \"operationId\": \"create_configuration_audit\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"target_systems\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target_systems\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"config_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_security_auditor\n\n## Overview\n\nProduction Security Auditor - Production security auditing and assessment system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security auditing and assessment capabilities,\nincluding security assessments, compliance auditing, penetration testing, vulnerability\nscanning, configuration auditing, and continuous security monitoring.\n\nKey Features:\n- Multi-type security auditing (SECURITY, COMPLIANCE, PENETRATION, VULNERABILITY, CONFIGURATION)\n- Multi-scope auditing (SYSTEM, APPLICATION, NETWORK, DATABASE, INFRASTRUCTURE)\n- Comprehensive security assessment with automated testing\n- Compliance auditing against industry standards\n- Penetration testing with ethical hacking methodologies\n- Vulnerability scanning with automated security tools\n- Configuration auditing with policy validation\n- Security monitoring with real-time threat detection\n- Threat modeling with comprehensive risk assessment\n- Security metrics with performance tracking and KPIs\n- Audit reporting with detailed findings and recommendations\n- Remediation tracking with progress monitoring\n- Continuous monitoring with automated alerting\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security auditing operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_auditor.py`\n\n## Dependencies\n\n- pathlib\n- socket\n- statistics\n- threading\n- datetime\n- json\n- time\n- production_security_hardening\n- requests\n- enum\n- uuid\n- traceback\n- subprocess\n- re\n- typing\n- production_security_config\n- tempfile\n- hashlib\n- ssl\n- concurrent.futures\n- logging\n- production_monitoring_system\n- base64\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 1777\n- **Code Lines:** 1459\n- **Comment Lines:** 69\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "security_guide": "\n# independent_core.production_security_auditor\n\nProduction Security Auditor - Production security auditing and assessment system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security auditing and assessment capabilities,\nincluding security assessments, compliance auditing, penetration testing, vulnerability\nscanning, configuration auditing, and continuous security monitoring.\n\nKey Features:\n- Multi-type security auditing (SECURITY, COMPLIANCE, PENETRATION, VULNERABILITY, CONFIGURATION)\n- Multi-scope auditing (SYSTEM, APPLICATION, NETWORK, DATABASE, INFRASTRUCTURE)\n- Comprehensive security assessment with automated testing\n- Compliance auditing against industry standards\n- Penetration testing with ethical hacking methodologies\n- Vulnerability scanning with automated security tools\n- Configuration auditing with policy validation\n- Security monitoring with real-time threat detection\n- Threat modeling with comprehensive risk assessment\n- Security metrics with performance tracking and KPIs\n- Audit reporting with detailed findings and recommendations\n- Remediation tracking with progress monitoring\n- Continuous monitoring with automated alerting\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security auditing operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_auditor.py\n- **Total Classes:** 14\n- **Total Functions:** 3\n- **Dependencies:** pathlib, socket, statistics, threading, datetime, json, time, production_security_hardening, requests, enum, uuid, traceback, subprocess, re, typing, production_security_config, tempfile, hashlib, ssl, concurrent.futures, logging, production_monitoring_system, base64, dataclasses, collections, os\n\n## Contents\n**Classes (14):** AuditType, AuditScope, AuditStatus, RiskLevel, ThreatCategory, SecurityAudit, AuditFinding, AuditResult, ThreatModel, SecurityAuditor, ComplianceAuditor, PenetrationTester, VulnerabilityScanner, ConfigurationAuditor\n**Functions (3):** integrate_with_hardening_system, integrate_with_monitoring_system, collect_audit_metrics\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: _check_unnecessary_services\n\n## Examples\n{'port': 3389, 'service': 'rdp', 'risk': RiskLevel.HIGH}  # Example risky port\n",
        "deployment_guide": "\n# independent_core.production_security_auditor\n\nProduction Security Auditor - Production security auditing and assessment system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security auditing and assessment capabilities,\nincluding security assessments, compliance auditing, penetration testing, vulnerability\nscanning, configuration auditing, and continuous security monitoring.\n\nKey Features:\n- Multi-type security auditing (SECURITY, COMPLIANCE, PENETRATION, VULNERABILITY, CONFIGURATION)\n- Multi-scope auditing (SYSTEM, APPLICATION, NETWORK, DATABASE, INFRASTRUCTURE)\n- Comprehensive security assessment with automated testing\n- Compliance auditing against industry standards\n- Penetration testing with ethical hacking methodologies\n- Vulnerability scanning with automated security tools\n- Configuration auditing with policy validation\n- Security monitoring with real-time threat detection\n- Threat modeling with comprehensive risk assessment\n- Security metrics with performance tracking and KPIs\n- Audit reporting with detailed findings and recommendations\n- Remediation tracking with progress monitoring\n- Continuous monitoring with automated alerting\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security auditing operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_auditor.py\n- **Total Classes:** 14\n- **Total Functions:** 3\n- **Dependencies:** pathlib, socket, statistics, threading, datetime, json, time, production_security_hardening, requests, enum, uuid, traceback, subprocess, re, typing, production_security_config, tempfile, hashlib, ssl, concurrent.futures, logging, production_monitoring_system, base64, dataclasses, collections, os\n\n## Contents\n**Classes (14):** AuditType, AuditScope, AuditStatus, RiskLevel, ThreatCategory, SecurityAudit, AuditFinding, AuditResult, ThreatModel, SecurityAuditor, ComplianceAuditor, PenetrationTester, VulnerabilityScanner, ConfigurationAuditor\n**Functions (3):** integrate_with_hardening_system, integrate_with_monitoring_system, collect_audit_metrics\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: _check_unnecessary_services\n\n## Examples\n{'port': 3389, 'service': 'rdp', 'risk': RiskLevel.HIGH}  # Example risky port\n",
        "architecture": "# Architecture: independent_core.production_security_auditor\n\nProduction Security Auditor - Production security auditing and assessment system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security auditing and assessment capabilities,\nincluding security assessments, compliance auditing, penetration testing, vulnerability\nscanning, configuration auditing, and continuous security monitoring.\n\nKey Features:\n- Multi-type security auditing (SECURITY, COMPLIANCE, PENETRATION, VULNERABILITY, CONFIGURATION)\n- Multi-scope auditing (SYSTEM, APPLICATION, NETWORK, DATABASE, INFRASTRUCTURE)\n- Comprehensive security assessment with automated testing\n- Compliance auditing against industry standards\n- Penetration testing with ethical hacking methodologies\n- Vulnerability scanning with automated security tools\n- Configuration auditing with policy validation\n- Security monitoring with real-time threat detection\n- Threat modeling with comprehensive risk assessment\n- Security metrics with performance tracking and KPIs\n- Audit reporting with detailed findings and recommendations\n- Remediation tracking with progress monitoring\n- Continuous monitoring with automated alerting\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security auditing operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 14\n- **Functions:** 3\n- **Dependencies:** 26\n\n## Class Hierarchy\n\n- **AuditType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **AuditScope** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **AuditStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **RiskLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **ThreatCategory** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **SecurityAudit**\n  - Methods: 1\n  - Complexity: 21\n- **AuditFinding**\n  - Methods: 1\n  - Complexity: 27\n- **AuditResult**\n  - Methods: 1\n  - Complexity: 18\n- **ThreatModel**\n  - Methods: 1\n  - Complexity: 17\n- **SecurityAuditor**\n  - Methods: 31\n  - Complexity: 171\n- **ComplianceAuditor**\n  - Methods: 2\n  - Complexity: 7\n- **PenetrationTester**\n  - Methods: 2\n  - Complexity: 7\n- **VulnerabilityScanner**\n  - Methods: 2\n  - Complexity: 7\n- **ConfigurationAuditor**\n  - Methods: 2\n  - Complexity: 7\n## Integration Points\n\n- Function: _check_unnecessary_services\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "security_guide missing required section: Overview",
        "security_guide missing required section: Details",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.error_recovery_system",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/error_recovery_system.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.error_recovery_system\n\nAPI endpoints for independent_core.error_recovery_system\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //load/checkpoint/index\n\n#### POST //load/checkpoint/index\n\nLoad checkpoint index from disk.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/checkpoint/index\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/checkpoint/index\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/checkpoint/index\n\n#### POST //save/checkpoint/index\n\nSave checkpoint index to disk.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/checkpoint/index\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/checkpoint/index\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/checkpoint\n\n#### POST /create/checkpoint\n\nCreate a new recovery checkpoint.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n- **epoch** (query) *required*: int - Parameter: epoch\n- **batch** (query) *required*: int - Parameter: batch\n- **model_state** (query) *required*: Any - Parameter: model_state\n- **optimizer_state** (query) *required*: Any - Parameter: optimizer_state\n- **training_state** (query) *required*: string - Parameter: training_state\n- **metrics** (query) *required*: string - Parameter: metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/checkpoint?session_id=example_session_id&epoch=example_epoch&batch=example_batch&model_state=example_model_state&optimizer_state=example_optimizer_state&training_state=example_training_state&metrics=example_metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"epoch\": \"example_epoch\",\n    \"batch\": \"example_batch\",\n    \"model_state\": \"example_model_state\",\n    \"optimizer_state\": \"example_optimizer_state\",\n    \"training_state\": \"example_training_state\",\n    \"metrics\": \"example_metrics\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /delete/checkpoint\n\n#### DELETE /delete/checkpoint\n\nDelete a checkpoint.\n\n**Parameters:**\n\n- **checkpoint_id** (query) *required*: str - Parameter: checkpoint_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/delete/checkpoint?checkpoint_id=example_checkpoint_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/delete/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"checkpoint_id\": \"example_checkpoint_id\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /export/recovery/report\n\n#### POST /export/recovery/report\n\nExport comprehensive recovery report.\n\n**Parameters:**\n\n- **output_file** (query) *required*: str - Parameter: output_file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/recovery/report?output_file=example_output_file\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/recovery/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"output_file\": \"example_output_file\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/error/history\n\n#### GET /get/error/history\n\nGet error history.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n- **limit** (query) *required*: int - Parameter: limit\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/error/history?session_id=example_session_id&limit=example_limit\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/error/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"limit\": \"example_limit\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/history\n\n#### GET /get/history\n\nGet state history.\n\n**Parameters:**\n\n- **limit** (query) *required*: int - Parameter: limit\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/history?limit=example_limit\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"limit\": \"example_limit\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/recovery/stats\n\n#### GET /get/recovery/stats\n\nGet recovery statistics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/recovery/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/recovery/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/recovery/strategies\n\n#### GET /get/recovery/strategies\n\nGet appropriate recovery strategies for an error.\n\n**Parameters:**\n\n- **error_type** (query) *required*: ErrorType - Parameter: error_type\n- **severity** (query) *required*: ErrorSeverity - Parameter: severity\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/recovery/strategies?error_type=example_error_type&severity=example_severity&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/recovery/strategies\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error_type\": \"example_error_type\",\n    \"severity\": \"example_severity\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /handle/error\n\n#### POST /handle/error\n\nHandle an error with automatic recovery attempt.\n\n**Parameters:**\n\n- **error** (query) *required*: Exception - Parameter: error\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/error?error=example_error&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.error_recovery_system\",\n    \"description\": \"API endpoints for independent_core.error_recovery_system\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/recovery/strategies\": {\n      \"get\": {\n        \"summary\": \"Get appropriate recovery strategies for an error.\",\n        \"description\": \"Get appropriate recovery strategies for an error.\",\n        \"operationId\": \"get_recovery_strategies\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ErrorType\"\n            }\n          },\n          {\n            \"name\": \"severity\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: severity\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ErrorSeverity\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/checkpoint\": {\n      \"post\": {\n        \"summary\": \"Create a new recovery checkpoint.\",\n        \"description\": \"Create a new recovery checkpoint.\",\n        \"operationId\": \"create_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"epoch\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: epoch\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"batch\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: batch\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"model_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"optimizer_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: optimizer_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"training_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: training_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"metrics\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/delete/checkpoint\": {\n      \"delete\": {\n        \"summary\": \"Delete a checkpoint.\",\n        \"description\": \"Delete a checkpoint.\",\n        \"operationId\": \"delete_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"checkpoint_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: checkpoint_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/checkpoint/index\": {\n      \"post\": {\n        \"summary\": \"Load checkpoint index from disk.\",\n        \"description\": \"Load checkpoint index from disk.\",\n        \"operationId\": \"_load_checkpoint_index\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/checkpoint/index\": {\n      \"post\": {\n        \"summary\": \"Save checkpoint index to disk.\",\n        \"description\": \"Save checkpoint index to disk.\",\n        \"operationId\": \"_save_checkpoint_index\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/history\": {\n      \"get\": {\n        \"summary\": \"Get state history.\",\n        \"description\": \"Get state history.\",\n        \"operationId\": \"get_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: limit\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/handle/error\": {\n      \"post\": {\n        \"summary\": \"Handle an error with automatic recovery attempt.\",\n        \"description\": \"Handle an error with automatic recovery attempt.\",\n        \"operationId\": \"handle_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/recovery/stats\": {\n      \"get\": {\n        \"summary\": \"Get recovery statistics.\",\n        \"description\": \"Get recovery statistics.\",\n        \"operationId\": \"get_recovery_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/error/history\": {\n      \"get\": {\n        \"summary\": \"Get error history.\",\n        \"description\": \"Get error history.\",\n        \"operationId\": \"get_error_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: limit\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/export/recovery/report\": {\n      \"post\": {\n        \"summary\": \"Export comprehensive recovery report.\",\n        \"description\": \"Export comprehensive recovery report.\",\n        \"operationId\": \"export_recovery_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"output_file\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: output_file\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.error_recovery_system\n\n## Overview\n\nComprehensive Error Recovery and Rollback System for Training Infrastructure.\n\nThis module provides sophisticated error detection, classification, and recovery\ncapabilities that integrate seamlessly with the existing progress tracking system.\nIt includes checkpoint management, state rollback, and intelligent recovery strategies.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/error_recovery_system.py`\n\n## Dependencies\n\n- pathlib\n- os\n- sys\n- logging\n- enum\n- typing\n- pickle\n- traceback\n- gc\n- dataclasses\n- hashlib\n- datetime\n- threading\n- shutil\n- json\n- time\n\n## Code Structure\n\n- **Total Lines:** 870\n- **Code Lines:** 689\n- **Comment Lines:** 41\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.error_recovery_system\n\nComprehensive Error Recovery and Rollback System for Training Infrastructure.\n\nThis module provides sophisticated error detection, classification, and recovery\ncapabilities that integrate seamlessly with the existing progress tracking system.\nIt includes checkpoint management, state rollback, and intelligent recovery strategies.\n\n## Components Overview\n\n- **Classes:** 9\n- **Functions:** 3\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **ErrorType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 11\n- **ErrorSeverity** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **RecoveryStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 11\n- **ErrorRecord**\n  - Methods: 0\n  - Complexity: 13\n- **RecoveryCheckpoint**\n  - Methods: 0\n  - Complexity: 12\n- **ErrorClassifier**\n  - Methods: 3\n  - Complexity: 29\n- **CheckpointRecovery**\n  - Methods: 9\n  - Complexity: 50\n- **StateRollback**\n  - Methods: 5\n  - Complexity: 22\n- **ErrorRecoveryManager**\n  - Methods: 8\n  - Complexity: 52\n## Integration Points\n\n- Class: ErrorRecoveryManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.training_performance_optimizer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/training_performance_optimizer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.training_performance_optimizer\n\nAPI endpoints for independent_core.training_performance_optimizer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/optimization/analytics\n\n#### GET /get/optimization/analytics\n\nGet comprehensive optimization analytics.\n\nArgs:\n    session_id: Optional specific session ID for detailed analytics\n    \nReturns:\n    Optimization analytics results\n    \nRaises:\n    ValueError: If session ID is invalid\n    RuntimeError: If analytics retrieval fails\n\n**Parameters:**\n\n- **session_id** (query) *required*: integer - Optional specific session ID for detailed analytics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimization/analytics?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimization/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/optimizer/status\n\n#### GET /get/optimizer/status\n\nGet current optimizer status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimizer/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimizer/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.training_performance_optimizer\",\n    \"description\": \"API endpoints for independent_core.training_performance_optimizer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/optimization/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive optimization analytics.\\n\\nArgs:\\n    session_id: Optional specific session ID for detailed analytics\\n    \\nReturns:\\n    Optimization analytics results\\n    \\nRaises:\\n    ValueError: If session ID is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"description\": \"Get comprehensive optimization analytics.\\n\\nArgs:\\n    session_id: Optional specific session ID for detailed analytics\\n    \\nReturns:\\n    Optimization analytics results\\n    \\nRaises:\\n    ValueError: If session ID is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"operationId\": \"get_optimization_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific session ID for detailed analytics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"global_analytics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_history\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance_baselines\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"session_baselines\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_optimizations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"detected_regressions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"profiling_sessions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_performance\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_trends\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recommendations\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/optimizer/status\": {\n      \"get\": {\n        \"summary\": \"Get current optimizer status\",\n        \"description\": \"Get current optimizer status\",\n        \"operationId\": \"get_optimizer_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"optimization_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"regression_detection_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"profiling_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_optimizations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"profiling_sessions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"detected_regressions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_strategy\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_level\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.training_performance_optimizer\n\n## Overview\n\nTraining Performance Optimizer - Performance optimization for training with hybrid system\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/training_performance_optimizer.py`\n\n## Dependencies\n\n- numpy\n- json\n- logging\n- enum\n- typing\n- training_manager\n- torch\n- compression_systems.padic.hybrid_padic_compressor\n- hashlib\n- psutil\n- threading\n- dataclasses\n- datetime\n- pynvml\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1675\n- **Code Lines:** 1228\n- **Comment Lines:** 124\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.training_performance_optimizer\n\nTraining Performance Optimizer - Performance optimization for training with hybrid system\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/training_performance_optimizer.py\n- **Total Classes:** 8\n- **Total Functions:** 0\n- **Dependencies:** numpy, json, logging, enum, typing, training_manager, torch, compression_systems.padic.hybrid_padic_compressor, hashlib, psutil, threading, dataclasses, datetime, pynvml, collections, time\n\n## Contents\n**Classes (8):** OptimizationStrategy, OptimizationLevel, PerformanceRegression, TrainingPerformanceOptimizerConfig, TrainingPerformanceMetrics, OptimizationResult, TrainingAnalytics, TrainingPerformanceOptimizer\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nmemory_usage_gb: float = 0.0\n\ngpu_memory_usage_gb: float = 0.0\n\nmemory_usage_gb=final_metrics.get('memory_usage_gb', 0.0),\n\ngpu_memory_usage_gb=final_metrics.get('gpu_memory_usage_gb', 0.0),\n\nOptimize GPU memory usage for training.\n\n\ninitial_gpu_memory = self._get_gpu_memory_usage()\n\n\nfinal_gpu_memory = self._get_gpu_memory_usage()\n\n'memory_usage_gb': 4.0,\n\nmetrics['memory_usage_gb'] = memory_info.used / (1024**3)\n\nmetrics['gpu_memory_usage_gb'] = gpu_memory.used / (1024**3)\n\nmetrics['gpu_memory_usage_gb'] = 0.0\n\ndef _get_gpu_memory_usage(self) -> float:\n\n\"\"\"Get current GPU memory usage in GB\"\"\"\n\ncurrent_gpu_memory = self._get_gpu_memory_usage()\n\n\nif current_gpu_memory > 8.0:  # High memory usage\n# Reduce batch size\n\nelif current_gpu_memory < 4.0:  # Low memory usage\n# Increase batch size\n\n# Set memory fraction if high usage detected\n\ncurrent_memory = self._get_gpu_memory_usage()\n\nif current_memory > 10.0:  # High usage\n\nrecommendations.append(\"GPU memory usage still high - consider reducing model complexity or batch size\")\n\n\navg_memory_usage = np.mean([m.memory_usage_gb for m in recent_metrics])\n\n\nif avg_iteration_time > 200.0 and avg_memory_usage < 6.0:\n# Slow iterations but low memory - increase batch size\n\nelif avg_memory_usage > 8.0:\n\n# High memory usage - decrease batch size\n\nfor metric in ['iteration_time_ms', 'memory_usage_gb']:\n\n'memory_usage_gb': np.mean([m.memory_usage_gb for m in metrics]),\n\nfor metric in ['iteration_time_ms', 'memory_usage_gb', 'compression_time_ms']:\n\nif 'memory_usage_gb' in regression_result['regressions']:\n\nmemory_usages = [m.memory_usage_gb for m in session_metrics]\n\nif len(memory_usages) >= 3:\n\nmemory_trend = np.polyfit(range(len(memory_usages)), memory_usages, 1)[0]\n\ntrends['memory_usage'] = 'improving' if memory_trend < -0.1 else 'degrading' if memory_trend > 0.1 else 'stable'\n\n# Analyze GPU trend\n\ngpu_usages = [m.gpu_utilization_percent for m in session_metrics]\n\nif len(gpu_usages) >= 3:\n\ngpu_trend = np.polyfit(range(len(gpu_usages)), gpu_usages, 1)[0]\n\nmemory_usage = metrics.get('memory_usage_gb', 0.0)\n\nif memory_usage > self.config.memory_optimization_threshold_gb:\n\nalerts.append(f\"High memory usage: {memory_usage:.1f}GB > {self.config.memory_optimization_threshold_gb}GB\")\n\n\nif trends.get('memory_usage') == 'degrading':\n\nrecommendations.append(\"Memory usage increasing - consider memory optimization\")\n\n\nif metrics.get('memory_usage_gb', 0) > self.config.memory_optimization_threshold_gb * 0.8:\n\nrecommendations.append(\"Memory usage approaching threshold - enable memory optimization\")\n\n\nfor metric in ['memory_usage_gb', 'gpu_utilization_percent', 'cpu_utilization_percent']:\n\nmemory_score = 1.0 - min(1.0, avg_performance.get('memory_usage_gb', 0) / 16.0)  # Assume 16GB max\n",
        "architecture": "# Architecture: independent_core.training_performance_optimizer\n\nTraining Performance Optimizer - Performance optimization for training with hybrid system\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **OptimizationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **OptimizationLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **PerformanceRegression** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **TrainingPerformanceOptimizerConfig**\n  - Methods: 1\n  - Complexity: 33\n- **TrainingPerformanceMetrics**\n  - Methods: 1\n  - Complexity: 26\n- **OptimizationResult**\n  - Methods: 1\n  - Complexity: 21\n- **TrainingAnalytics**\n  - Methods: 0\n  - Complexity: 16\n- **TrainingPerformanceOptimizer**\n  - Methods: 58\n  - Complexity: 299\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.brain_gac_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/brain_gac_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.brain_gac_integration\n\nAPI endpoints for independent_core.brain_gac_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/integration/analytics\n\n#### GET /get/integration/analytics\n\nGet comprehensive integration analytics.\n\nReturns:\n    Integration analytics data\n    \nRaises:\n    RuntimeError: If analytics generation fails\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/analytics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/integration/status\n\n#### GET /get/integration/status\n\nGet current integration status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /handle/integration/errors\n\n#### POST /handle/integration/errors\n\nHandle integration errors with recovery strategies.\n\nArgs:\n    error: Error that occurred\n    context: Optional error context\n    \nReturns:\n    Error handling results\n    \nRaises:\n    RuntimeError: If error handling fails\n\n**Parameters:**\n\n- **error** (query) *required*: Exception - Error that occurred\n- **context** (query) *required*: string - Optional error context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/integration/errors?error=example_error&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/integration/errors\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.brain_gac_integration\",\n    \"description\": \"API endpoints for independent_core.brain_gac_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/handle/integration/errors\": {\n      \"post\": {\n        \"summary\": \"Handle integration errors with recovery strategies.\\n\\nArgs:\\n    error: Error that occurred\\n    context: Optional error context\\n    \\nReturns:\\n    Error handling results\\n    \\nRaises:\\n    RuntimeError: If error handling fails\",\n        \"description\": \"Handle integration errors with recovery strategies.\\n\\nArgs:\\n    error: Error that occurred\\n    context: Optional error context\\n    \\nReturns:\\n    Error handling results\\n    \\nRaises:\\n    RuntimeError: If error handling fails\",\n        \"operationId\": \"handle_integration_errors\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Error that occurred\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Optional error context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/integration/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive integration analytics.\\n\\nReturns:\\n    Integration analytics data\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"description\": \"Get comprehensive integration analytics.\\n\\nReturns:\\n    Integration analytics data\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"operationId\": \"get_integration_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/integration/status\": {\n      \"get\": {\n        \"summary\": \"Get current integration status\",\n        \"description\": \"Get current integration status\",\n        \"operationId\": \"get_integration_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"integration_state\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"gradient_flow_strategy\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_operations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"successful_operations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"failed_operations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"success_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"gradient_buffer_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_health_score\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_optimization\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.brain_gac_integration\n\n## Overview\n\nBrain-GAC Integration - Main orchestrator for Brain-GAC integration\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/brain_gac_integration.py`\n\n## Dependencies\n\n- threading\n- datetime\n- time\n- numpy\n- math\n- gac_system.direction_state\n- enum\n- torch\n- compression_systems.padic.hybrid_padic_compressor\n- compression_systems.padic.dynamic_switching_manager\n- gac_system.gac_components\n- typing\n- psutil\n- gac_system.gac_types\n- brain\n- compression_systems.padic.direction_manager\n- logging\n- compression_systems.padic.hybrid_bounding_engine\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1377\n- **Code Lines:** 1004\n- **Comment Lines:** 112\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.brain_gac_integration\n\nBrain-GAC Integration - Main orchestrator for Brain-GAC integration\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/brain_gac_integration.py\n- **Total Classes:** 7\n- **Total Functions:** 0\n- **Dependencies:** threading, datetime, time, numpy, math, gac_system.direction_state, enum, torch, compression_systems.padic.hybrid_padic_compressor, compression_systems.padic.dynamic_switching_manager, gac_system.gac_components, typing, psutil, gac_system.gac_types, brain, compression_systems.padic.direction_manager, logging, compression_systems.padic.hybrid_bounding_engine, dataclasses, collections\n\n## Contents\n**Classes (7):** IntegrationMode, GradientFlowStrategy, IntegrationState, IntegrationPerformanceMetrics, IntegrationAnalytics, BrainGACConfig, BrainGACIntegration\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nmemory_usage_mb: float\n\naverage_memory_usage_mb: float\n\nmax_memory_usage_mb: float = 2048.0\n\navg_memory_usage = sum(m.memory_usage_mb for m in self.performance_metrics) / len(self.performance_metrics)\n\navg_memory_usage = 0.0\n\naverage_memory_usage_mb=avg_memory_usage,\n\n'memory_usage_mb': self.config.max_memory_usage_mb,\n\nmemory_usage_mb=self._get_current_memory_usage(),\n\n'average_memory_usage_mb': sum(m.memory_usage_mb for m in recent_metrics) / len(recent_metrics),\n\nmemories = [m.memory_usage_mb for m in recent_metrics]\n\n# Check memory usage alerts\n\navg_memory = sum(m.memory_usage_mb for m in recent_metrics) / len(recent_metrics)\n\nif avg_memory > self.config.max_memory_usage_mb:\n\n'type': 'high_memory_usage',\n\n'message': f'Average memory usage {avg_memory:.2f}MB exceeds limit {self.config.max_memory_usage_mb}MB'\n\navg_memory = sum(m.memory_usage_mb for m in recent_metrics) / len(recent_metrics)\n\nif avg_memory > self.config.max_memory_usage_mb * 0.8:\n\ntrends['memory_usage'] = [m.memory_usage_mb for m in recent_metrics]\n\navg_memory = sum(m.memory_usage_mb for m in recent_metrics) / len(recent_metrics)\n\n\nif avg_memory > self.config.max_memory_usage_mb * 0.8:\n\navg_memory = sum(m.memory_usage_mb for m in recent_metrics) / len(recent_metrics)\n\nmemory_load = min(1.0, avg_memory / self.config.max_memory_usage_mb)\n\n'average_memory_mb': sum(m.memory_usage_mb for m in recent_metrics) / len(recent_metrics),\n\ndef _get_current_memory_usage(self) -> float:\n\n\"\"\"Get current memory usage in MB\"\"\"\n",
        "architecture": "# Architecture: independent_core.brain_gac_integration\n\nBrain-GAC Integration - Main orchestrator for Brain-GAC integration\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 20\n\n## Class Hierarchy\n\n- **IntegrationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **GradientFlowStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **IntegrationState** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **IntegrationPerformanceMetrics**\n  - Methods: 1\n  - Complexity: 20\n- **IntegrationAnalytics**\n  - Methods: 0\n  - Complexity: 16\n- **BrainGACConfig**\n  - Methods: 1\n  - Complexity: 33\n- **BrainGACIntegration**\n  - Methods: 57\n  - Complexity: 300\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.domain_registry",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/domain_registry.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.domain_registry\n\nAPI endpoints for independent_core.domain_registry\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //generate/data/loader/template\n\n#### POST //generate/data/loader/template\n\nGenerate data loader template content.\n\n**Parameters:**\n\n- **ieee_features** (query) *required*: bool - Parameter: ieee_features\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/data/loader/template?ieee_features=example_ieee_features\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/data/loader/template\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"ieee_features\": \"example_ieee_features\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //load/registry\n\n#### POST //load/registry\n\nLoad registry state from disk.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/registry\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/registry\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //log/access/violation\n\n#### POST //log/access/violation\n\nLog access violation for security audit.\n\nArgs:\n    domain_name: Name of the domain being accessed\n    requesting_domain: Name of domain making unauthorized request\n    operation: Type of operation attempted\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain being accessed\n- **requesting_domain** (query) *required*: str - Name of domain making unauthorized request\n- **operation** (query) *required*: str - Type of operation attempted\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//log/access/violation?domain_name=example_domain_name&requesting_domain=example_requesting_domain&operation=example_operation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//log/access/violation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"requesting_domain\": \"example_requesting_domain\",\n    \"operation\": \"example_operation\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //persist/registry\n\n#### POST //persist/registry\n\nPersist registry state to disk.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//persist/registry\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//persist/registry\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /clear/domain/isolation\n\n#### POST /clear/domain/isolation\n\nClear domain isolation data (but keep domain registered).\n\nArgs:\n    domain_name: Name of the domain\n    requesting_domain: Name of domain making the request\n    \nReturns:\n    True if isolation was cleared, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **requesting_domain** (query) *required*: string - Name of domain making the request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/clear/domain/isolation?domain_name=example_domain_name&requesting_domain=example_requesting_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/clear/domain/isolation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"requesting_domain\": \"example_requesting_domain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/domain/isolation\n\n#### POST /create/domain/isolation\n\nCreate isolated domain space to prevent catastrophic forgetting.\n\nArgs:\n    domain_name: Name of the domain to isolate\n    \nReturns:\n    True if isolation created successfully, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain to isolate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/domain/isolation?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/domain/isolation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /export/registry\n\n#### POST /export/registry\n\nExport registry data in specified format.\n\nArgs:\n    format: Export format ('json', 'yaml')\n    \nReturns:\n    Exported data as string or None on failure\n\n**Parameters:**\n\n- **format** (query) *required*: str - Export format ('json', 'yaml')\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/registry?format=example_format\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/registry\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"format\": \"example_format\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/domain/dependencies\n\n#### GET /get/domain/dependencies\n\nGet dependencies for a domain.\n\nArgs:\n    domain_name: Name of the domain\n    recursive: If True, get all transitive dependencies\n    \nReturns:\n    List of dependency domain names\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **recursive** (query) *required*: bool - If True, get all transitive dependencies\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/dependencies?domain_name=example_domain_name&recursive=example_recursive\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/dependencies\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"recursive\": \"example_recursive\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/domain/info\n\n#### GET /get/domain/info\n\nGet domain metadata and information.\n\nArgs:\n    domain_name: Name of the domain\n    \nReturns:\n    Dictionary with domain information or None if not found\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/info?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/domain/knowledge\n\n#### GET /get/domain/knowledge\n\nRetrieve domain-specific knowledge with access control.\n\nArgs:\n    domain_name: Name of the domain\n    knowledge_type: Specific type to retrieve or None for all\n    requesting_domain: Name of domain making the request\n    \nReturns:\n    Dictionary with knowledge data or None if access denied\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **knowledge_type** (query) *required*: string - Specific type to retrieve or None for all\n- **requesting_domain** (query) *required*: string - Name of domain making the request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/knowledge?domain_name=example_domain_name&knowledge_type=example_knowledge_type&requesting_domain=example_requesting_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/knowledge\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"knowledge_type\": \"example_knowledge_type\",\n    \"requesting_domain\": \"example_requesting_domain\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/domain/state\n\n#### GET /get/domain/state\n\nGet isolated domain state with access control.\n\nArgs:\n    domain_name: Name of the domain to get state from\n    requesting_domain: Name of domain making the request (for access control)\n    \nReturns:\n    Dictionary with domain state or None if access denied\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain to get state from\n- **requesting_domain** (query) *required*: string - Name of domain making the request (for access control)\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/state?domain_name=example_domain_name&requesting_domain=example_requesting_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"requesting_domain\": \"example_requesting_domain\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/isolation/statistics\n\n#### GET /get/isolation/statistics\n\nGet comprehensive statistics about domain isolation.\n\nReturns:\n    Dictionary with isolation statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/isolation/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/isolation/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/registry/statistics\n\n#### GET /get/registry/statistics\n\nGet comprehensive statistics about the registry.\n\nReturns:\n    Dictionary with registry statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/registry/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/registry/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /isolate/domain/knowledge\n\n#### POST /isolate/domain/knowledge\n\nStore domain-specific knowledge in isolated container.\n\nArgs:\n    domain_name: Name of the domain\n    knowledge: Knowledge data to store\n    knowledge_type: Type of knowledge ('facts', 'rules', 'patterns', 'embeddings')\n    requesting_domain: Name of domain making the request\n    \nReturns:\n    True if knowledge was stored successfully, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **knowledge** (query) *required*: string - Knowledge data to store\n- **knowledge_type** (query) *required*: str - Type of knowledge ('facts', 'rules', 'patterns', 'embeddings')\n- **requesting_domain** (query) *required*: string - Name of domain making the request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/isolate/domain/knowledge?domain_name=example_domain_name&knowledge=example_knowledge&knowledge_type=example_knowledge_type&requesting_domain=example_requesting_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/isolate/domain/knowledge\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"knowledge\": \"example_knowledge\",\n    \"knowledge_type\": \"example_knowledge_type\",\n    \"requesting_domain\": \"example_requesting_domain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /remove/domain\n\n#### DELETE /remove/domain\n\nUnregister a domain from the registry.\n\nArgs:\n    domain_name: Name of the domain to remove\n    force: If True, remove even if other domains depend on it\n    \nReturns:\n    True if removal successful, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain to remove\n- **force** (query) *required*: bool - If True, remove even if other domains depend on it\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/domain?domain_name=example_domain_name&force=example_force\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/domain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"force\": \"example_force\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /set/domain/state\n\n#### POST /set/domain/state\n\nSet isolated domain state with validation and access control.\n\nArgs:\n    domain_name: Name of the domain to set state for\n    state: New state dictionary\n    requesting_domain: Name of domain making the request (for access control)\n    \nReturns:\n    True if state was set successfully, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain to set state for\n- **state** (query) *required*: string - New state dictionary\n- **requesting_domain** (query) *required*: string - Name of domain making the request (for access control)\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/set/domain/state?domain_name=example_domain_name&state=example_state&requesting_domain=example_requesting_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/set/domain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"state\": \"example_state\",\n    \"requesting_domain\": \"example_requesting_domain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /setup/fraud/detection/domain\n\n#### POST /setup/fraud/detection/domain\n\nAutomatically setup a comprehensive fraud detection domain with all infrastructure.\nIntegrates the fraud domain setup automation script functionality.\n\nArgs:\n    domain_name: Name for the fraud detection domain\n    domain_path: Path where domain files should be created\n    auto_create_structure: Whether to create directory structure automatically\n    ieee_features: Whether to enable IEEE fraud detection features\n    \nReturns:\n    Dictionary with setup results and domain information\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name for the fraud detection domain\n- **domain_path** (query) *required*: string - Path where domain files should be created\n- **auto_create_structure** (query) *required*: bool - Whether to create directory structure automatically\n- **ieee_features** (query) *required*: bool - Whether to enable IEEE fraud detection features\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/setup/fraud/detection/domain?domain_name=example_domain_name&domain_path=example_domain_path&auto_create_structure=example_auto_create_structure&ieee_features=example_ieee_features\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/setup/fraud/detection/domain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"domain_path\": \"example_domain_path\",\n    \"auto_create_structure\": \"example_auto_create_structure\",\n    \"ieee_features\": \"example_ieee_features\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/domain/metrics\n\n#### PUT /update/domain/metrics\n\nUpdate performance metrics for a domain.\n\nArgs:\n    domain_name: Name of the domain\n    metrics: Dictionary of metrics to update\n    \nReturns:\n    True if update successful, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **metrics** (query) *required*: string - Dictionary of metrics to update\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/domain/metrics?domain_name=example_domain_name&metrics=example_metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/domain/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"metrics\": \"example_metrics\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/domain/status\n\n#### PUT /update/domain/status\n\nUpdate the status of a registered domain.\n\nArgs:\n    domain_name: Name of the domain\n    status: New status for the domain\n    error_message: Optional error message if status is ERROR\n    \nReturns:\n    True if update successful, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **status** (query) *required*: DomainStatus - New status for the domain\n- **error_message** (query) *required*: string - Optional error message if status is ERROR\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/domain/status?domain_name=example_domain_name&status=example_status&error_message=example_error_message\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/domain/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"status\": \"example_status\",\n    \"error_message\": \"example_error_message\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.domain_registry\",\n    \"description\": \"API endpoints for independent_core.domain_registry\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/domain/info\": {\n      \"get\": {\n        \"summary\": \"Get domain metadata and information.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    \\nReturns:\\n    Dictionary with domain information or None if not found\",\n        \"description\": \"Get domain metadata and information.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    \\nReturns:\\n    Dictionary with domain information or None if not found\",\n        \"operationId\": \"get_domain_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/remove/domain\": {\n      \"delete\": {\n        \"summary\": \"Unregister a domain from the registry.\\n\\nArgs:\\n    domain_name: Name of the domain to remove\\n    force: If True, remove even if other domains depend on it\\n    \\nReturns:\\n    True if removal successful, False otherwise\",\n        \"description\": \"Unregister a domain from the registry.\\n\\nArgs:\\n    domain_name: Name of the domain to remove\\n    force: If True, remove even if other domains depend on it\\n    \\nReturns:\\n    True if removal successful, False otherwise\",\n        \"operationId\": \"remove_domain\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain to remove\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"force\",\n            \"in\": \"query\",\n            \"description\": \"If True, remove even if other domains depend on it\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/domain/status\": {\n      \"put\": {\n        \"summary\": \"Update the status of a registered domain.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    status: New status for the domain\\n    error_message: Optional error message if status is ERROR\\n    \\nReturns:\\n    True if update successful, False otherwise\",\n        \"description\": \"Update the status of a registered domain.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    status: New status for the domain\\n    error_message: Optional error message if status is ERROR\\n    \\nReturns:\\n    True if update successful, False otherwise\",\n        \"operationId\": \"update_domain_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"status\",\n            \"in\": \"query\",\n            \"description\": \"New status for the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DomainStatus\"\n            }\n          },\n          {\n            \"name\": \"error_message\",\n            \"in\": \"query\",\n            \"description\": \"Optional error message if status is ERROR\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/domain/metrics\": {\n      \"put\": {\n        \"summary\": \"Update performance metrics for a domain.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    metrics: Dictionary of metrics to update\\n    \\nReturns:\\n    True if update successful, False otherwise\",\n        \"description\": \"Update performance metrics for a domain.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    metrics: Dictionary of metrics to update\\n    \\nReturns:\\n    True if update successful, False otherwise\",\n        \"operationId\": \"update_domain_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"metrics\",\n            \"in\": \"query\",\n            \"description\": \"Dictionary of metrics to update\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/domain/dependencies\": {\n      \"get\": {\n        \"summary\": \"Get dependencies for a domain.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    recursive: If True, get all transitive dependencies\\n    \\nReturns:\\n    List of dependency domain names\",\n        \"description\": \"Get dependencies for a domain.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    recursive: If True, get all transitive dependencies\\n    \\nReturns:\\n    List of dependency domain names\",\n        \"operationId\": \"get_domain_dependencies\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"recursive\",\n            \"in\": \"query\",\n            \"description\": \"If True, get all transitive dependencies\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/registry/statistics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive statistics about the registry.\\n\\nReturns:\\n    Dictionary with registry statistics\",\n        \"description\": \"Get comprehensive statistics about the registry.\\n\\nReturns:\\n    Dictionary with registry statistics\",\n        \"operationId\": \"get_registry_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"registry_created\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_domains\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_registrations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_removals\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status_distribution\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"type_distribution\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_memory_allocated_mb\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_cpu_allocated_percent\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_errors\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domains_with_errors\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domains_with_dependencies\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"most_activated\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"highest_confidence\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//persist/registry\": {\n      \"post\": {\n        \"summary\": \"Persist registry state to disk.\",\n        \"description\": \"Persist registry state to disk.\",\n        \"operationId\": \"_persist_registry\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/registry\": {\n      \"post\": {\n        \"summary\": \"Load registry state from disk.\",\n        \"description\": \"Load registry state from disk.\",\n        \"operationId\": \"_load_registry\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/export/registry\": {\n      \"post\": {\n        \"summary\": \"Export registry data in specified format.\\n\\nArgs:\\n    format: Export format ('json', 'yaml')\\n    \\nReturns:\\n    Exported data as string or None on failure\",\n        \"description\": \"Export registry data in specified format.\\n\\nArgs:\\n    format: Export format ('json', 'yaml')\\n    \\nReturns:\\n    Exported data as string or None on failure\",\n        \"operationId\": \"export_registry\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"format\",\n            \"in\": \"query\",\n            \"description\": \"Export format ('json', 'yaml')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/domain/isolation\": {\n      \"post\": {\n        \"summary\": \"Create isolated domain space to prevent catastrophic forgetting.\\n\\nArgs:\\n    domain_name: Name of the domain to isolate\\n    \\nReturns:\\n    True if isolation created successfully, False otherwise\",\n        \"description\": \"Create isolated domain space to prevent catastrophic forgetting.\\n\\nArgs:\\n    domain_name: Name of the domain to isolate\\n    \\nReturns:\\n    True if isolation created successfully, False otherwise\",\n        \"operationId\": \"create_domain_isolation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain to isolate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/domain/state\": {\n      \"get\": {\n        \"summary\": \"Get isolated domain state with access control.\\n\\nArgs:\\n    domain_name: Name of the domain to get state from\\n    requesting_domain: Name of domain making the request (for access control)\\n    \\nReturns:\\n    Dictionary with domain state or None if access denied\",\n        \"description\": \"Get isolated domain state with access control.\\n\\nArgs:\\n    domain_name: Name of the domain to get state from\\n    requesting_domain: Name of domain making the request (for access control)\\n    \\nReturns:\\n    Dictionary with domain state or None if access denied\",\n        \"operationId\": \"get_domain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain to get state from\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"requesting_domain\",\n            \"in\": \"query\",\n            \"description\": \"Name of domain making the request (for access control)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/set/domain/state\": {\n      \"post\": {\n        \"summary\": \"Set isolated domain state with validation and access control.\\n\\nArgs:\\n    domain_name: Name of the domain to set state for\\n    state: New state dictionary\\n    requesting_domain: Name of domain making the request (for access control)\\n    \\nReturns:\\n    True if state was set successfully, False otherwise\",\n        \"description\": \"Set isolated domain state with validation and access control.\\n\\nArgs:\\n    domain_name: Name of the domain to set state for\\n    state: New state dictionary\\n    requesting_domain: Name of domain making the request (for access control)\\n    \\nReturns:\\n    True if state was set successfully, False otherwise\",\n        \"operationId\": \"set_domain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain to set state for\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"state\",\n            \"in\": \"query\",\n            \"description\": \"New state dictionary\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"requesting_domain\",\n            \"in\": \"query\",\n            \"description\": \"Name of domain making the request (for access control)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/isolate/domain/knowledge\": {\n      \"post\": {\n        \"summary\": \"Store domain-specific knowledge in isolated container.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    knowledge: Knowledge data to store\\n    knowledge_type: Type of knowledge ('facts', 'rules', 'patterns', 'embeddings')\\n    requesting_domain: Name of domain making the request\\n    \\nReturns:\\n    True if knowledge was stored successfully, False otherwise\",\n        \"description\": \"Store domain-specific knowledge in isolated container.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    knowledge: Knowledge data to store\\n    knowledge_type: Type of knowledge ('facts', 'rules', 'patterns', 'embeddings')\\n    requesting_domain: Name of domain making the request\\n    \\nReturns:\\n    True if knowledge was stored successfully, False otherwise\",\n        \"operationId\": \"isolate_domain_knowledge\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"knowledge\",\n            \"in\": \"query\",\n            \"description\": \"Knowledge data to store\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"knowledge_type\",\n            \"in\": \"query\",\n            \"description\": \"Type of knowledge ('facts', 'rules', 'patterns', 'embeddings')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"requesting_domain\",\n            \"in\": \"query\",\n            \"description\": \"Name of domain making the request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/domain/knowledge\": {\n      \"get\": {\n        \"summary\": \"Retrieve domain-specific knowledge with access control.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    knowledge_type: Specific type to retrieve or None for all\\n    requesting_domain: Name of domain making the request\\n    \\nReturns:\\n    Dictionary with knowledge data or None if access denied\",\n        \"description\": \"Retrieve domain-specific knowledge with access control.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    knowledge_type: Specific type to retrieve or None for all\\n    requesting_domain: Name of domain making the request\\n    \\nReturns:\\n    Dictionary with knowledge data or None if access denied\",\n        \"operationId\": \"get_domain_knowledge\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"knowledge_type\",\n            \"in\": \"query\",\n            \"description\": \"Specific type to retrieve or None for all\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"requesting_domain\",\n            \"in\": \"query\",\n            \"description\": \"Name of domain making the request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//log/access/violation\": {\n      \"post\": {\n        \"summary\": \"Log access violation for security audit.\\n\\nArgs:\\n    domain_name: Name of the domain being accessed\\n    requesting_domain: Name of domain making unauthorized request\\n    operation: Type of operation attempted\",\n        \"description\": \"Log access violation for security audit.\\n\\nArgs:\\n    domain_name: Name of the domain being accessed\\n    requesting_domain: Name of domain making unauthorized request\\n    operation: Type of operation attempted\",\n        \"operationId\": \"_log_access_violation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain being accessed\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"requesting_domain\",\n            \"in\": \"query\",\n            \"description\": \"Name of domain making unauthorized request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"operation\",\n            \"in\": \"query\",\n            \"description\": \"Type of operation attempted\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/isolation/statistics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive statistics about domain isolation.\\n\\nReturns:\\n    Dictionary with isolation statistics\",\n        \"description\": \"Get comprehensive statistics about domain isolation.\\n\\nReturns:\\n    Dictionary with isolation statistics\",\n        \"operationId\": \"get_isolation_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/clear/domain/isolation\": {\n      \"post\": {\n        \"summary\": \"Clear domain isolation data (but keep domain registered).\\n\\nArgs:\\n    domain_name: Name of the domain\\n    requesting_domain: Name of domain making the request\\n    \\nReturns:\\n    True if isolation was cleared, False otherwise\",\n        \"description\": \"Clear domain isolation data (but keep domain registered).\\n\\nArgs:\\n    domain_name: Name of the domain\\n    requesting_domain: Name of domain making the request\\n    \\nReturns:\\n    True if isolation was cleared, False otherwise\",\n        \"operationId\": \"clear_domain_isolation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"requesting_domain\",\n            \"in\": \"query\",\n            \"description\": \"Name of domain making the request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/setup/fraud/detection/domain\": {\n      \"post\": {\n        \"summary\": \"Automatically setup a comprehensive fraud detection domain with all infrastructure.\\nIntegrates the fraud domain setup automation script functionality.\\n\\nArgs:\\n    domain_name: Name for the fraud detection domain\\n    domain_path: Path where domain files should be created\\n    auto_create_structure: Whether to create directory structure automatically\\n    ieee_features: Whether to enable IEEE fraud detection features\\n    \\nReturns:\\n    Dictionary with setup results and domain information\",\n        \"description\": \"Automatically setup a comprehensive fraud detection domain with all infrastructure.\\nIntegrates the fraud domain setup automation script functionality.\\n\\nArgs:\\n    domain_name: Name for the fraud detection domain\\n    domain_path: Path where domain files should be created\\n    auto_create_structure: Whether to create directory structure automatically\\n    ieee_features: Whether to enable IEEE fraud detection features\\n    \\nReturns:\\n    Dictionary with setup results and domain information\",\n        \"operationId\": \"setup_fraud_detection_domain\",\n        \"tags\": [\n          \"finance\",\n          \"fraud\",\n          \"security\",\n          \"ml\",\n          \"risk\",\n          \"ieee\",\n          \"automated\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name for the fraud detection domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"domain_path\",\n            \"in\": \"query\",\n            \"description\": \"Path where domain files should be created\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"auto_create_structure\",\n            \"in\": \"query\",\n            \"description\": \"Whether to create directory structure automatically\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"ieee_features\",\n            \"in\": \"query\",\n            \"description\": \"Whether to enable IEEE fraud detection features\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_name\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//generate/data/loader/template\": {\n      \"post\": {\n        \"summary\": \"Generate data loader template content.\",\n        \"description\": \"Generate data loader template content.\",\n        \"operationId\": \"_generate_data_loader_template\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"ieee_features\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: ieee_features\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.domain_registry\n\n## Overview\n\nDomain Registry for Universal AI Core Brain.\nManages domain registration, metadata tracking, and domain lifecycle.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/domain_registry.py`\n\n## Dependencies\n\n- pathlib\n- yaml\n- sys\n- logging\n- enum\n- typing\n- copy\n- datetime\n- threading\n- dataclasses\n- json\n- re\n\n## Code Structure\n\n- **Total Lines:** 2063\n- **Code Lines:** 1540\n- **Comment Lines:** 144\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.domain_registry\n\nDomain Registry for Universal AI Core Brain.\nManages domain registration, metadata tracking, and domain lifecycle.\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **TensorJSONEncoder**\n  - Methods: 1\n  - Complexity: 7\n- **DomainStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **DomainType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **DomainConfig**\n  - Methods: 3\n  - Complexity: 45\n- **DomainMetadata**\n  - Methods: 2\n  - Complexity: 25\n- **DomainRegistry**\n  - Methods: 38\n  - Complexity: 250\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_brain_system",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_brain_system.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.test_brain_system\n\nAPI endpoints for independent_core.test_brain_system\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /test/complete/workflow\n\n#### POST /test/complete/workflow\n\nTest complete AI workflow from registration to deployment.\n\n**Parameters:**\n\n- **integration_brain** (query) *required*: string - Parameter: integration_brain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/complete/workflow?integration_brain=example_integration_brain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/complete/workflow\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"integration_brain\": \"example_integration_brain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /test/disk/space/handling\n\n#### POST /test/disk/space/handling\n\nTest handling of disk space limitations.\n\n**Parameters:**\n\n- **error_test_brain** (query) *required*: string - Parameter: error_test_brain\n- **temp_dir** (query) *required*: string - Parameter: temp_dir\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/disk/space/handling?error_test_brain=example_error_test_brain&temp_dir=example_temp_dir\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/disk/space/handling\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error_test_brain\": \"example_error_test_brain\",\n    \"temp_dir\": \"example_temp_dir\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /test/load/brain/state\n\n#### POST /test/load/brain/state\n\nTest loading complete Brain state.\n\n**Parameters:**\n\n- **brain_with_state** (query) *required*: string - Parameter: brain_with_state\n- **temp_dir** (query) *required*: string - Parameter: temp_dir\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/load/brain/state?brain_with_state=example_brain_with_state&temp_dir=example_temp_dir\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/load/brain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain_with_state\": \"example_brain_with_state\",\n    \"temp_dir\": \"example_temp_dir\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /test/performance/metrics\n\n#### POST /test/performance/metrics\n\nTest performance metrics collection.\n\n**Parameters:**\n\n- **monitored_brain** (query) *required*: string - Parameter: monitored_brain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/performance/metrics?monitored_brain=example_monitored_brain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"monitored_brain\": \"example_monitored_brain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /test/save/brain/state\n\n#### POST /test/save/brain/state\n\nTest saving complete Brain state.\n\n**Parameters:**\n\n- **brain_with_state** (query) *required*: string - Parameter: brain_with_state\n- **temp_dir** (query) *required*: string - Parameter: temp_dir\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/save/brain/state?brain_with_state=example_brain_with_state&temp_dir=example_temp_dir\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/save/brain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain_with_state\": \"example_brain_with_state\",\n    \"temp_dir\": \"example_temp_dir\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /test/state/versioning\n\n#### POST /test/state/versioning\n\nTest state versioning functionality.\n\n**Parameters:**\n\n- **brain_with_state** (query) *required*: string - Parameter: brain_with_state\n- **temp_dir** (query) *required*: string - Parameter: temp_dir\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/state/versioning?brain_with_state=example_brain_with_state&temp_dir=example_temp_dir\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/state/versioning\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain_with_state\": \"example_brain_with_state\",\n    \"temp_dir\": \"example_temp_dir\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.test_brain_system\",\n    \"description\": \"API endpoints for independent_core.test_brain_system\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/test/save/brain/state\": {\n      \"post\": {\n        \"summary\": \"Test saving complete Brain state.\",\n        \"description\": \"Test saving complete Brain state.\",\n        \"operationId\": \"test_save_brain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain_with_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: brain_with_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"temp_dir\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: temp_dir\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/load/brain/state\": {\n      \"post\": {\n        \"summary\": \"Test loading complete Brain state.\",\n        \"description\": \"Test loading complete Brain state.\",\n        \"operationId\": \"test_load_brain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain_with_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: brain_with_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"temp_dir\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: temp_dir\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/state/versioning\": {\n      \"post\": {\n        \"summary\": \"Test state versioning functionality.\",\n        \"description\": \"Test state versioning functionality.\",\n        \"operationId\": \"test_state_versioning\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain_with_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: brain_with_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"temp_dir\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: temp_dir\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/performance/metrics\": {\n      \"post\": {\n        \"summary\": \"Test performance metrics collection.\",\n        \"description\": \"Test performance metrics collection.\",\n        \"operationId\": \"test_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"monitored_brain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: monitored_brain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/disk/space/handling\": {\n      \"post\": {\n        \"summary\": \"Test handling of disk space limitations.\",\n        \"description\": \"Test handling of disk space limitations.\",\n        \"operationId\": \"test_disk_space_handling\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error_test_brain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error_test_brain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"temp_dir\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: temp_dir\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/complete/workflow\": {\n      \"post\": {\n        \"summary\": \"Test complete AI workflow from registration to deployment.\",\n        \"description\": \"Test complete AI workflow from registration to deployment.\",\n        \"operationId\": \"test_complete_workflow\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"integration_brain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: integration_brain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.test_brain_system\n\n## Overview\n\nComprehensive Test Suite for Universal AI Core Brain System.\nTests all components including isolation, anti-catastrophic forgetting, and system integration.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_brain_system.py`\n\n## Dependencies\n\n- pathlib\n- brain_core\n- domain_registry\n- domain_state\n- numpy\n- pytest\n- brain\n- typing\n- training_manager\n- tempfile\n- domain_router\n- datetime\n- threading\n- shutil\n- json\n- unittest.mock\n- time\n\n## Code Structure\n\n- **Total Lines:** 1263\n- **Code Lines:** 875\n- **Comment Lines:** 108\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.test_brain_system\n\nComprehensive Test Suite for Universal AI Core Brain System.\nTests all components including isolation, anti-catastrophic forgetting, and system integration.\n\n## Components Overview\n\n- **Classes:** 11\n- **Functions:** 3\n- **Dependencies:** 17\n\n## Class Hierarchy\n\n- **TestBrainInitialization**\n  - Methods: 6\n  - Complexity: 19\n- **TestDomainManagement**\n  - Methods: 7\n  - Complexity: 22\n- **TestPredictionFunctionality**\n  - Methods: 6\n  - Complexity: 27\n- **TestTrainingWithoutForgetting**\n  - Methods: 5\n  - Complexity: 16\n- **TestStatePersistence**\n  - Methods: 5\n  - Complexity: 16\n- **TestSystemMonitoring**\n  - Methods: 6\n  - Complexity: 23\n- **TestAdvancedFeatures**\n  - Methods: 6\n  - Complexity: 23\n- **TestErrorHandlingAndEdgeCases**\n  - Methods: 6\n  - Complexity: 24\n- **TestAntiForgettingMechanisms**\n  - Methods: 5\n  - Complexity: 16\n- **TestPerformanceAndScaling**\n  - Methods: 6\n  - Complexity: 31\n- **TestIntegrationScenarios**\n  - Methods: 4\n  - Complexity: 23\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.training_session_manager",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/training_session_manager.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.training_session_manager\n\nAPI endpoints for independent_core.training_session_manager\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /cleanup/session\n\n#### POST /cleanup/session\n\nClean up session resources.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n- **keep_checkpoints** (query) *required*: bool - Parameter: keep_checkpoints\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/cleanup/session?session_id=example_session_id&keep_checkpoints=example_keep_checkpoints\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/cleanup/session\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"keep_checkpoints\": \"example_keep_checkpoints\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/checkpoint\n\n#### POST /create/checkpoint\n\nCreate a training checkpoint.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n- **model_state** (query) *required*: string - Parameter: model_state\n- **optimizer_state** (query) *required*: string - Parameter: optimizer_state\n- **is_best** (query) *required*: bool - Parameter: is_best\n- **is_auto** (query) *required*: bool - Parameter: is_auto\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/checkpoint?session_id=example_session_id&model_state=example_model_state&optimizer_state=example_optimizer_state&is_best=example_is_best&is_auto=example_is_auto\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"model_state\": \"example_model_state\",\n    \"optimizer_state\": \"example_optimizer_state\",\n    \"is_best\": \"example_is_best\",\n    \"is_auto\": \"example_is_auto\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/session\n\n#### POST /create/session\n\nCreate a new training session.\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n- **model_type** (query) *required*: str - Parameter: model_type\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/session?domain_name=example_domain_name&model_type=example_model_type&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/session\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"model_type\": \"example_model_type\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/session/manager\n\n#### POST /create/session/manager\n\nCreate and configure a training session manager.\n\n**Parameters:**\n\n- **storage_path** (query) *required*: str - Parameter: storage_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/session/manager?storage_path=example_storage_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/session/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"storage_path\": \"example_storage_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/active/sessions\n\n#### GET /get/active/sessions\n\nGet all active sessions.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/active/sessions\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/active/sessions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/session\n\n#### GET /get/session\n\nGet session information.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/session?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/session\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /handle/error\n\n#### POST /handle/error\n\nHandle training error with recovery.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n- **error** (query) *required*: Exception - Parameter: error\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/error?session_id=example_session_id&error=example_error&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"error\": \"example_error\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/accuracy\n\n#### PUT /update/accuracy\n\nUpdate accuracy metrics.\n\n**Parameters:**\n\n- **accuracy** (query) *required*: float - Parameter: accuracy\n- **is_validation** (query) *required*: bool - Parameter: is_validation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/accuracy?accuracy=example_accuracy&is_validation=example_is_validation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/accuracy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"accuracy\": \"example_accuracy\",\n    \"is_validation\": \"example_is_validation\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/loss\n\n#### PUT /update/loss\n\nUpdate loss metrics.\n\n**Parameters:**\n\n- **loss** (query) *required*: float - Parameter: loss\n- **is_validation** (query) *required*: bool - Parameter: is_validation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/loss?loss=example_loss&is_validation=example_is_validation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/loss\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"loss\": \"example_loss\",\n    \"is_validation\": \"example_is_validation\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/metrics\n\n#### PUT /update/metrics\n\nUpdate session metrics.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n- **metrics_update** (query) *required*: string - Parameter: metrics_update\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/metrics?session_id=example_session_id&metrics_update=example_metrics_update\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"metrics_update\": \"example_metrics_update\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.training_session_manager\",\n    \"description\": \"API endpoints for independent_core.training_session_manager\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/session/manager\": {\n      \"post\": {\n        \"summary\": \"Create and configure a training session manager.\",\n        \"description\": \"Create and configure a training session manager.\",\n        \"operationId\": \"create_session_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"storage_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: storage_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/loss\": {\n      \"put\": {\n        \"summary\": \"Update loss metrics.\",\n        \"description\": \"Update loss metrics.\",\n        \"operationId\": \"update_loss\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"loss\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: loss\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"is_validation\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: is_validation\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/accuracy\": {\n      \"put\": {\n        \"summary\": \"Update accuracy metrics.\",\n        \"description\": \"Update accuracy metrics.\",\n        \"operationId\": \"update_accuracy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"accuracy\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: accuracy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"is_validation\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: is_validation\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/session\": {\n      \"post\": {\n        \"summary\": \"Create a new training session.\",\n        \"description\": \"Create a new training session.\",\n        \"operationId\": \"create_session\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"model_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/metrics\": {\n      \"put\": {\n        \"summary\": \"Update session metrics.\",\n        \"description\": \"Update session metrics.\",\n        \"operationId\": \"update_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"metrics_update\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metrics_update\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/handle/error\": {\n      \"post\": {\n        \"summary\": \"Handle training error with recovery.\",\n        \"description\": \"Handle training error with recovery.\",\n        \"operationId\": \"handle_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/checkpoint\": {\n      \"post\": {\n        \"summary\": \"Create a training checkpoint.\",\n        \"description\": \"Create a training checkpoint.\",\n        \"operationId\": \"create_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"model_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"optimizer_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: optimizer_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"is_best\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: is_best\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"is_auto\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: is_auto\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/session\": {\n      \"get\": {\n        \"summary\": \"Get session information.\",\n        \"description\": \"Get session information.\",\n        \"operationId\": \"get_session\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/active/sessions\": {\n      \"get\": {\n        \"summary\": \"Get all active sessions.\",\n        \"description\": \"Get all active sessions.\",\n        \"operationId\": \"get_active_sessions\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/cleanup/session\": {\n      \"post\": {\n        \"summary\": \"Clean up session resources.\",\n        \"description\": \"Clean up session resources.\",\n        \"operationId\": \"cleanup_session\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"keep_checkpoints\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: keep_checkpoints\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.training_session_manager\n\n## Overview\n\nTraining Session Manager for Brain System\nComprehensive session management and monitoring for training execution.\nPart of the training execution and monitoring fixes.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/training_session_manager.py`\n\n## Dependencies\n\n- pathlib\n- threading\n- datetime\n- json\n- contextlib\n- time\n- numpy\n- enum\n- traceback\n- torch\n- pynvml\n- typing\n- warnings\n- pickle\n- psutil\n- concurrent.futures\n- logging\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 885\n- **Code Lines:** 653\n- **Comment Lines:** 71\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.training_session_manager\n\nTraining Session Manager for Brain System\nComprehensive session management and monitoring for training execution.\nPart of the training execution and monitoring fixes.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/training_session_manager.py\n- **Total Classes:** 9\n- **Total Functions:** 2\n- **Dependencies:** pathlib, threading, datetime, json, contextlib, time, numpy, enum, traceback, torch, pynvml, typing, warnings, pickle, psutil, concurrent.futures, logging, dataclasses, collections\n\n## Contents\n**Classes (9):** SessionStatus, ErrorType, RecoveryStrategy, SessionMetrics, ResourceMetrics, TrainingError, TrainingCheckpoint, TrainingSession, TrainingSessionManager\n**Functions (2):** create_session_manager, log_progress_callback\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: TrainingSessionManager\nFunction: create_session_manager\n\n## Examples\nsamples_per_second: List[float] = field(default_factory=list)\n\n# Overfitting detection\n\n\"\"\"System resource usage metrics.\"\"\"\n\ncpu_usage: List[float] = field(default_factory=list)\n\nmemory_usage: List[float] = field(default_factory=list)\n\ngpu_usage: List[float] = field(default_factory=list)\n\nself.cpu_usage.append(cpu)\n\nself.memory_usage.append(memory)\n\nself.gpu_usage.append(gpu)\n\nif len(self.cpu_usage) > 1000:\n\nself.cpu_usage = self.cpu_usage[-1000:]\n\nself.memory_usage = self.memory_usage[-1000:]\n\nself.gpu_usage = self.gpu_usage[-1000:]\n\ncpu_usage = psutil.cpu_percent(interval=1)\n\nmemory_usage = psutil.virtual_memory().percent\n\n\ngpu_usage = 0.0\n\ngpu_usage = self._get_gpu_utilization()\n\ngpu_memory = self._get_gpu_memory_usage()\n\ncpu_usage, memory_usage, gpu_usage, gpu_memory\n\nself._check_resource_alerts(session, cpu_usage, memory_usage, gpu_usage)\n\n\ndef _get_gpu_memory_usage(self) -> float:\n\n\"\"\"Get GPU memory usage percentage.\"\"\"\n\ncpu_usage: float,\n\nmemory_usage: float,\n\ngpu_usage: float\n\n\"\"\"Check for resource usage alerts.\"\"\"\n\nif cpu_usage > self.resource_alert_thresholds['cpu']:\n\nself.logger.warning(f\"High CPU usage in session {session.session_id}: {cpu_usage:.1f}%\")\n\n\nif memory_usage > self.resource_alert_thresholds['memory']:\n\nself.logger.warning(f\"High memory usage in session {session.session_id}: {memory_usage:.1f}%\")\n\n\nif gpu_usage > self.resource_alert_thresholds['gpu']:\n\nself.logger.warning(f\"High GPU usage in session {session.session_id}: {gpu_usage:.1f}%\")\n\n# ======================== CONVENIENCE FUNCTIONS ========================\n\n\n# Progress callback example\n\n\"\"\"Example progress logging callback.\"\"\"\n\n# Example usage\n",
        "architecture": "# Architecture: independent_core.training_session_manager\n\nTraining Session Manager for Brain System\nComprehensive session management and monitoring for training execution.\nPart of the training execution and monitoring fixes.\n\n## Components Overview\n\n- **Classes:** 9\n- **Functions:** 2\n- **Dependencies:** 19\n\n## Class Hierarchy\n\n- **SessionStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **ErrorType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **RecoveryStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **SessionMetrics**\n  - Methods: 3\n  - Complexity: 37\n- **ResourceMetrics**\n  - Methods: 1\n  - Complexity: 13\n- **TrainingError**\n  - Methods: 0\n  - Complexity: 10\n- **TrainingCheckpoint**\n  - Methods: 0\n  - Complexity: 11\n- **TrainingSession**\n  - Methods: 2\n  - Complexity: 24\n- **TrainingSessionManager**\n  - Methods: 27\n  - Complexity: 143\n## Integration Points\n\n- Class: TrainingSessionManager\n- Function: create_session_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.domain_router",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/domain_router.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.domain_router\n\nAPI endpoints for independent_core.domain_router\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /detect/domain\n\n#### POST /detect/domain\n\nAuto-detect domain from input data.\n\n**Parameters:**\n\n- **input_data** (query) *required*: Any - Parameter: input_data\n- **input_type** (query) *required*: str - Parameter: input_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/detect/domain?input_data=example_input_data&input_type=example_input_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/detect/domain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n    \"input_type\": \"example_input_type\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /export/patterns\n\n#### POST /export/patterns\n\nExport domain patterns to file.\n\n**Parameters:**\n\n- **filepath** (query) *required*: Path - Parameter: filepath\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/patterns?filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/patterns\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/available/domains\n\n#### GET /get/available/domains\n\nGet list of all available domains for routing.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/available/domains\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/available/domains\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/routing/confidence\n\n#### GET /get/routing/confidence\n\nGet confidence score for routing input to specific domain.\n\n**Parameters:**\n\n- **input_data** (query) *required*: Any - Parameter: input_data\n- **domain_name** (query) *required*: str - Parameter: domain_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/routing/confidence?input_data=example_input_data&domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/routing/confidence\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/routing/history\n\n#### GET /get/routing/history\n\nGet recent routing history.\n\n**Parameters:**\n\n- **limit** (query) *required*: int - Parameter: limit\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/routing/history?limit=example_limit\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/routing/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"limit\": \"example_limit\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/routing/metrics\n\n#### GET /get/routing/metrics\n\nGet comprehensive routing metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/routing/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/routing/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /import/patterns\n\n#### POST /import/patterns\n\nImport domain patterns from file.\n\n**Parameters:**\n\n- **filepath** (query) *required*: Path - Parameter: filepath\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/import/patterns?filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/import/patterns\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /remove/domain/pattern\n\n#### DELETE /remove/domain/pattern\n\nRemove domain pattern.\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/domain/pattern?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/domain/pattern\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /route/request\n\n#### POST /route/request\n\nRoute request to appropriate domain with comprehensive analysis.\n\nArgs:\n    input_data: Input data to be routed\n    domain_hint: Optional hint for target domain\n    strategy: Optional routing strategy to use\n    input_type: Type of input data\n    \nReturns:\n    RoutingResult with routing decision and metadata\n\n**Parameters:**\n\n- **input_data** (query) *required*: Any - Input data to be routed\n- **domain_hint** (query) *required*: string - Optional hint for target domain\n- **strategy** (query) *required*: string - Optional routing strategy to use\n- **input_type** (query) *required*: str - Type of input data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/route/request?input_data=example_input_data&domain_hint=example_domain_hint&strategy=example_strategy&input_type=example_input_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/route/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n    \"domain_hint\": \"example_domain_hint\",\n    \"strategy\": \"example_strategy\",\n    \"input_type\": \"example_input_type\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/routing\n\n#### POST /validate/routing\n\nValidate that input should be routed to specified domain.\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n- **input_data** (query) *required*: Any - Parameter: input_data\n- **expected_confidence** (query) *required*: float - Parameter: expected_confidence\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/routing?domain_name=example_domain_name&input_data=example_input_data&expected_confidence=example_expected_confidence\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/routing\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"input_data\": \"example_input_data\",\n    \"expected_confidence\": \"example_expected_confidence\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.domain_router\",\n    \"description\": \"API endpoints for independent_core.domain_router\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/remove/domain/pattern\": {\n      \"delete\": {\n        \"summary\": \"Remove domain pattern.\",\n        \"description\": \"Remove domain pattern.\",\n        \"operationId\": \"remove_domain_pattern\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/route/request\": {\n      \"post\": {\n        \"summary\": \"Route request to appropriate domain with comprehensive analysis.\\n\\nArgs:\\n    input_data: Input data to be routed\\n    domain_hint: Optional hint for target domain\\n    strategy: Optional routing strategy to use\\n    input_type: Type of input data\\n    \\nReturns:\\n    RoutingResult with routing decision and metadata\",\n        \"description\": \"Route request to appropriate domain with comprehensive analysis.\\n\\nArgs:\\n    input_data: Input data to be routed\\n    domain_hint: Optional hint for target domain\\n    strategy: Optional routing strategy to use\\n    input_type: Type of input data\\n    \\nReturns:\\n    RoutingResult with routing decision and metadata\",\n        \"operationId\": \"route_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Input data to be routed\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"domain_hint\",\n            \"in\": \"query\",\n            \"description\": \"Optional hint for target domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"strategy\",\n            \"in\": \"query\",\n            \"description\": \"Optional routing strategy to use\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"input_type\",\n            \"in\": \"query\",\n            \"description\": \"Type of input data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/detect/domain\": {\n      \"post\": {\n        \"summary\": \"Auto-detect domain from input data.\",\n        \"description\": \"Auto-detect domain from input data.\",\n        \"operationId\": \"detect_domain\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"input_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/routing\": {\n      \"post\": {\n        \"summary\": \"Validate that input should be routed to specified domain.\",\n        \"description\": \"Validate that input should be routed to specified domain.\",\n        \"operationId\": \"validate_routing\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"expected_confidence\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: expected_confidence\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/routing/confidence\": {\n      \"get\": {\n        \"summary\": \"Get confidence score for routing input to specific domain.\",\n        \"description\": \"Get confidence score for routing input to specific domain.\",\n        \"operationId\": \"get_routing_confidence\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/available/domains\": {\n      \"get\": {\n        \"summary\": \"Get list of all available domains for routing.\",\n        \"description\": \"Get list of all available domains for routing.\",\n        \"operationId\": \"get_available_domains\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/routing/metrics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive routing metrics.\",\n        \"description\": \"Get comprehensive routing metrics.\",\n        \"operationId\": \"get_routing_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_routes\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"successful_routes\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"failed_routes\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"success_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"average_routing_time_ms\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_usage_counts\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"confidence_distribution\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"strategy_usage\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"history_size\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/routing/history\": {\n      \"get\": {\n        \"summary\": \"Get recent routing history.\",\n        \"description\": \"Get recent routing history.\",\n        \"operationId\": \"get_routing_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: limit\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/export/patterns\": {\n      \"post\": {\n        \"summary\": \"Export domain patterns to file.\",\n        \"description\": \"Export domain patterns to file.\",\n        \"operationId\": \"export_patterns\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: filepath\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/import/patterns\": {\n      \"post\": {\n        \"summary\": \"Import domain patterns from file.\",\n        \"description\": \"Import domain patterns from file.\",\n        \"operationId\": \"import_patterns\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: filepath\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.domain_router\n\n## Overview\n\nDomain Router for Universal AI Core Brain.\nIntelligent routing system that routes requests to appropriate domains based on input characteristics.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/domain_router.py`\n\n## Dependencies\n\n- pathlib\n- numpy\n- logging\n- enum\n- typing\n- datetime\n- threading\n- dataclasses\n- json\n- re\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 720\n- **Code Lines:** 553\n- **Comment Lines:** 52\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.domain_router\n\nDomain Router for Universal AI Core Brain.\nIntelligent routing system that routes requests to appropriate domains based on input characteristics.\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **RoutingStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **RoutingConfidence** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **RoutingResult**\n  - Methods: 1\n  - Complexity: 12\n- **DomainPattern**\n  - Methods: 1\n  - Complexity: 26\n- **RoutingMetrics**\n  - Methods: 1\n  - Complexity: 17\n- **DomainRouter**\n  - Methods: 22\n  - Complexity: 111\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.demo_complete_functionality",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/demo_complete_functionality.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.demo_complete_functionality",
        "developer_guide": "# Developer Guide: independent_core.demo_complete_functionality\n\n## Overview\n\nDemonstration script showing the COMPLETE implementation working.\nAUTOMATIC session management integration - no manual initialization required!\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/demo_complete_functionality.py`\n\n## Dependencies\n\n- pathlib\n- brain_training_integration\n- numpy\n- os\n- sys\n- brain\n- traceback\n- threading\n- time\n\n## Code Structure\n\n- **Total Lines:** 311\n- **Code Lines:** 214\n- **Comment Lines:** 33\n\n## Complexity Indicators\n\n- Concurrency\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.domain_performance_optimizer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/domain_performance_optimizer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.domain_performance_optimizer\n\nAPI endpoints for independent_core.domain_performance_optimizer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //calculate/improvement/metrics\n\n#### POST //calculate/improvement/metrics\n\nCalculate performance improvement metrics.\n\n**Parameters:**\n\n- **before** (query) *required*: string - Parameter: before\n- **after** (query) *required*: string - Parameter: after\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//calculate/improvement/metrics?before=example_before&after=example_after\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//calculate/improvement/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"before\": \"example_before\",\n    \"after\": \"example_after\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/domain/performance/optimizer\n\n#### POST /create/domain/performance/optimizer\n\nFactory function to create a DomainPerformanceOptimizer instance.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/domain/performance/optimizer\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/domain/performance/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/current/metrics\n\n#### GET /get/current/metrics\n\nGet current performance metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/current/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/current/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/domain/performance/analytics\n\n#### GET /get/domain/performance/analytics\n\nGet comprehensive performance analytics for a domain.\n\n**Parameters:**\n\n- **domain_id** (query) *required*: str - Parameter: domain_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/performance/analytics?domain_id=example_domain_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/performance/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_id\": \"example_domain_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/global/optimization/status\n\n#### GET /get/global/optimization/status\n\nGet global optimization status across all domains.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/global/optimization/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/global/optimization/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/hit/rate\n\n#### GET /get/hit/rate\n\nGet cache hit rate.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hit/rate\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hit/rate\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/metric/trend\n\n#### GET /get/metric/trend\n\nGet metric trend over duration.\n\n**Parameters:**\n\n- **metric** (query) *required*: DomainPerformanceMetric - Parameter: metric\n- **duration** (query) *required*: float - Parameter: duration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metric/trend?metric=example_metric&duration=example_duration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metric/trend\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"metric\": \"example_metric\",\n    \"duration\": \"example_duration\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/optimization/recommendations\n\n#### GET /get/optimization/recommendations\n\nGet optimization recommendations for a domain.\n\n**Parameters:**\n\n- **domain_id** (query) *required*: str - Parameter: domain_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimization/recommendations?domain_id=example_domain_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimization/recommendations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_id\": \"example_domain_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.domain_performance_optimizer\",\n    \"description\": \"API endpoints for independent_core.domain_performance_optimizer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/domain/performance/optimizer\": {\n      \"post\": {\n        \"summary\": \"Factory function to create a DomainPerformanceOptimizer instance.\",\n        \"description\": \"Factory function to create a DomainPerformanceOptimizer instance.\",\n        \"operationId\": \"create_domain_performance_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/hit/rate\": {\n      \"get\": {\n        \"summary\": \"Get cache hit rate.\",\n        \"description\": \"Get cache hit rate.\",\n        \"operationId\": \"get_hit_rate\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/current/metrics\": {\n      \"get\": {\n        \"summary\": \"Get current performance metrics.\",\n        \"description\": \"Get current performance metrics.\",\n        \"operationId\": \"get_current_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/metric/trend\": {\n      \"get\": {\n        \"summary\": \"Get metric trend over duration.\",\n        \"description\": \"Get metric trend over duration.\",\n        \"operationId\": \"get_metric_trend\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"metric\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metric\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DomainPerformanceMetric\"\n            }\n          },\n          {\n            \"name\": \"duration\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: duration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//calculate/improvement/metrics\": {\n      \"post\": {\n        \"summary\": \"Calculate performance improvement metrics.\",\n        \"description\": \"Calculate performance improvement metrics.\",\n        \"operationId\": \"_calculate_improvement_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"before\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: before\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"after\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: after\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/domain/performance/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive performance analytics for a domain.\",\n        \"description\": \"Get comprehensive performance analytics for a domain.\",\n        \"operationId\": \"get_domain_performance_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/optimization/recommendations\": {\n      \"get\": {\n        \"summary\": \"Get optimization recommendations for a domain.\",\n        \"description\": \"Get optimization recommendations for a domain.\",\n        \"operationId\": \"get_optimization_recommendations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/global/optimization/status\": {\n      \"get\": {\n        \"summary\": \"Get global optimization status across all domains.\",\n        \"description\": \"Get global optimization status across all domains.\",\n        \"operationId\": \"get_global_optimization_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"uptime\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_domains\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_optimizations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_optimizations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"successful_optimizations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"failed_optimizations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"success_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"average_optimization_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_integrations\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"domain_registry\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"domain_router\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"domain_hybrid_integration\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"domain_compression_coordinator\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_compression_orchestrator\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.domain_performance_optimizer\n\n## Overview\n\nDomain Performance Optimizer - Domain-specific performance optimization with hybrid system integration.\n\nThis module provides comprehensive domain performance optimization capabilities,\nworking in coordination with the domain hybrid integration and compression systems\nto maximize performance across different domain types and workloads.\n\nKey Features:\n- Domain-specific performance optimization strategies\n- Hybrid system performance coordination\n- Real-time performance monitoring and adaptive optimization\n- Domain resource allocation optimization\n- Performance bottleneck detection and resolution\n- Cross-domain performance coordination\n- Domain-specific caching and memory optimization\n- Performance analytics and trend analysis\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/domain_performance_optimizer.py`\n\n## Dependencies\n\n- statistics\n- gc\n- threading\n- json\n- contextlib\n- domain_hybrid_integration\n- time\n- numpy\n- hybrid_compression_orchestrator\n- enum\n- uuid\n- traceback\n- typing\n- psutil\n- domain_registry\n- logging\n- asyncio\n- domain_router\n- domain_compression_coordinator\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1024\n- **Code Lines:** 827\n- **Comment Lines:** 0\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.domain_performance_optimizer\n\nDomain Performance Optimizer - Domain-specific performance optimization with hybrid system integration.\n\nThis module provides comprehensive domain performance optimization capabilities,\nworking in coordination with the domain hybrid integration and compression systems\nto maximize performance across different domain types and workloads.\n\nKey Features:\n- Domain-specific performance optimization strategies\n- Hybrid system performance coordination\n- Real-time performance monitoring and adaptive optimization\n- Domain resource allocation optimization\n- Performance bottleneck detection and resolution\n- Cross-domain performance coordination\n- Domain-specific caching and memory optimization\n- Performance analytics and trend analysis\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/domain_performance_optimizer.py\n- **Total Classes:** 10\n- **Total Functions:** 1\n- **Dependencies:** statistics, gc, threading, json, contextlib, domain_hybrid_integration, time, numpy, hybrid_compression_orchestrator, enum, uuid, traceback, typing, psutil, domain_registry, logging, asyncio, domain_router, domain_compression_coordinator, dataclasses, collections\n\n## Contents\n**Classes (10):** DomainOptimizationStrategy, DomainPerformanceMetric, DomainOptimizationLevel, DomainPerformanceTarget, DomainPerformanceResult, DomainResourceAllocation, DomainPerformanceAnalytics, DomainPerformanceCache, DomainPerformanceMonitor, DomainPerformanceOptimizer\n**Functions (1):** create_domain_performance_optimizer\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nMEMORY_USAGE = \"memory_usage\"\n\nCPU_USAGE = \"cpu_usage\"\n\nGPU_USAGE = \"gpu_usage\"\n\ntarget_memory_usage: float\n\ntarget_cpu_usage: float\n\nself.record_metric(DomainPerformanceMetric.CPU_USAGE, process.cpu_percent())\n\nself.record_metric(DomainPerformanceMetric.MEMORY_USAGE, process.memory_percent())\n\n\nif 'cpu_usage' in metric and strategy != DomainOptimizationStrategy.MEMORY_OPTIMIZED:\n\nactions.append(f\"Reduced CPU allocation due to high usage in {metric}\")\n\n\nif 'memory_usage' in metric and strategy != DomainOptimizationStrategy.PERFORMANCE_FIRST:\n\nif metric in ['response_time', 'memory_usage', 'cpu_usage', 'error_rate']:\n\ncpu_usage = current_performance.get('cpu_usage', 0)\n\nmemory_usage = current_performance.get('memory_usage', 0)\n\n\nif cpu_usage > target_utilization * 100:\n\nelif cpu_usage < target_utilization * 50:\n\nif memory_usage > target_utilization * 100:\n\nelif memory_usage < target_utilization * 50:\n\ncpu_efficiency = current_performance.get('cpu_usage', 0) / (allocation.cpu_allocation * 100)\n\nmemory_efficiency = current_performance.get('memory_usage', 0) / (allocation.memory_allocation * 100)\n\n\ntarget_memory_usage=0.5,\n\ntarget_cpu_usage=0.6,\n",
        "architecture": "# Architecture: independent_core.domain_performance_optimizer\n\nDomain Performance Optimizer - Domain-specific performance optimization with hybrid system integration.\n\nThis module provides comprehensive domain performance optimization capabilities,\nworking in coordination with the domain hybrid integration and compression systems\nto maximize performance across different domain types and workloads.\n\nKey Features:\n- Domain-specific performance optimization strategies\n- Hybrid system performance coordination\n- Real-time performance monitoring and adaptive optimization\n- Domain resource allocation optimization\n- Performance bottleneck detection and resolution\n- Cross-domain performance coordination\n- Domain-specific caching and memory optimization\n- Performance analytics and trend analysis\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 10\n- **Functions:** 1\n- **Dependencies:** 21\n\n## Class Hierarchy\n\n- **DomainOptimizationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **DomainPerformanceMetric** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 11\n- **DomainOptimizationLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **DomainPerformanceTarget**\n  - Methods: 0\n  - Complexity: 11\n- **DomainPerformanceResult**\n  - Methods: 0\n  - Complexity: 12\n- **DomainResourceAllocation**\n  - Methods: 0\n  - Complexity: 11\n- **DomainPerformanceAnalytics**\n  - Methods: 0\n  - Complexity: 12\n- **DomainPerformanceCache**\n  - Methods: 6\n  - Complexity: 22\n- **DomainPerformanceMonitor**\n  - Methods: 8\n  - Complexity: 39\n- **DomainPerformanceOptimizer**\n  - Methods: 16\n  - Complexity: 145\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_progress_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_progress_integration.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.test_progress_integration",
        "developer_guide": "# Developer Guide: independent_core.test_progress_integration\n\n## Overview\n\nTest script to verify progress tracking integration with existing session management.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_progress_integration.py`\n\n## Dependencies\n\n- pathlib\n- numpy\n- os\n- sys\n- brain\n- progress_tracker\n- traceback\n- training_manager\n- time\n\n## Code Structure\n\n- **Total Lines:** 320\n- **Code Lines:** 213\n- **Comment Lines:** 39\n\n",
        "integration_guide": "\n# independent_core.test_progress_integration\n\nTest script to verify progress tracking integration with existing session management.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/test_progress_integration.py\n- **Total Classes:** 0\n- **Total Functions:** 3\n- **Dependencies:** pathlib, numpy, os, sys, brain, progress_tracker, traceback, training_manager, time\n\n## Contents\n**Functions (3):** test_progress_integration, test_session_management_compatibility, test_callback\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nsamples_per_batch=32\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.accuracy_tracking_diagnostics",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/accuracy_tracking_diagnostics.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.accuracy_tracking_diagnostics\n\nAPI endpoints for independent_core.accuracy_tracking_diagnostics\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //backup/configuration\n\n#### POST //backup/configuration\n\nBackup configuration files\n\n**Parameters:**\n\n- **backup_dir** (query) *required*: Path - Parameter: backup_dir\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//backup/configuration?backup_dir=example_backup_dir\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//backup/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"backup_dir\": \"example_backup_dir\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //diagnose/configuration\n\n#### POST //diagnose/configuration\n\nDiagnose configuration health and optimization\n\n**Parameters:**\n\n- **level** (query) *required*: DiagnosticLevel - Parameter: level\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//diagnose/configuration?level=example_level\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//diagnose/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"level\": \"example_level\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //diagnose/security\n\n#### POST //diagnose/security\n\nDiagnose security configuration and vulnerabilities\n\n**Parameters:**\n\n- **level** (query) *required*: DiagnosticLevel - Parameter: level\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//diagnose/security?level=example_level\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//diagnose/security\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"level\": \"example_level\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/diagnostics/system\n\n#### POST /create/diagnostics/system\n\nCreate diagnostics and maintenance system\n\nArgs:\n    orchestrator: Optional orchestrator instance\n    config: Optional configuration override\n    \nReturns:\n    Configured AccuracyTrackingDiagnostics instance\n\n**Parameters:**\n\n- **orchestrator** (query) *required*: string - Optional orchestrator instance\n- **config** (query) *required*: string - Optional configuration override\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/diagnostics/system?orchestrator=example_orchestrator&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/diagnostics/system\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"orchestrator\": \"example_orchestrator\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/error/context\n\n#### POST /create/error/context\n\nAPI endpoint: create_error_context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/error/context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/error/context\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/dependency/status\n\n#### GET /get/dependency/status\n\nAPI endpoint: get_dependency_status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/dependency/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/dependency/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/diagnostic/history\n\n#### GET /get/diagnostic/history\n\nGet diagnostic history\n\n**Parameters:**\n\n- **category** (query) *required*: string - Parameter: category\n- **hours** (query) *required*: int - Parameter: hours\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/diagnostic/history?category=example_category&hours=example_hours\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/diagnostic/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"category\": \"example_category\",\n    \"hours\": \"example_hours\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/maintenance/history\n\n#### GET /get/maintenance/history\n\nGet maintenance task history\n\n**Parameters:**\n\n- **task_type** (query) *required*: string - Parameter: task_type\n- **hours** (query) *required*: int - Parameter: hours\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/maintenance/history?task_type=example_task_type&hours=example_hours\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/maintenance/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"task_type\": \"example_task_type\",\n    \"hours\": \"example_hours\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/maintenance/status\n\n#### GET /get/maintenance/status\n\nGet current maintenance status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/maintenance/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/maintenance/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/resolution/steps\n\n#### GET /get/resolution/steps\n\nGet resolution steps for a session\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/resolution/steps?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/resolution/steps\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/system/health/report\n\n#### GET /get/system/health/report\n\nGet comprehensive system health report.\n\nReturns:\n    System health report\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/system/health/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/system/health/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.accuracy_tracking_diagnostics\",\n    \"description\": \"API endpoints for independent_core.accuracy_tracking_diagnostics\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/diagnostics/system\": {\n      \"post\": {\n        \"summary\": \"Create diagnostics and maintenance system\\n\\nArgs:\\n    orchestrator: Optional orchestrator instance\\n    config: Optional configuration override\\n    \\nReturns:\\n    Configured AccuracyTrackingDiagnostics instance\",\n        \"description\": \"Create diagnostics and maintenance system\\n\\nArgs:\\n    orchestrator: Optional orchestrator instance\\n    config: Optional configuration override\\n    \\nReturns:\\n    Configured AccuracyTrackingDiagnostics instance\",\n        \"operationId\": \"create_diagnostics_system\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"orchestrator\",\n            \"in\": \"query\",\n            \"description\": \"Optional orchestrator instance\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Optional configuration override\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//diagnose/configuration\": {\n      \"post\": {\n        \"summary\": \"Diagnose configuration health and optimization\",\n        \"description\": \"Diagnose configuration health and optimization\",\n        \"operationId\": \"_diagnose_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"level\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: level\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DiagnosticLevel\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//diagnose/security\": {\n      \"post\": {\n        \"summary\": \"Diagnose security configuration and vulnerabilities\",\n        \"description\": \"Diagnose security configuration and vulnerabilities\",\n        \"operationId\": \"_diagnose_security\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"level\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: level\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DiagnosticLevel\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/diagnostic/history\": {\n      \"get\": {\n        \"summary\": \"Get diagnostic history\",\n        \"description\": \"Get diagnostic history\",\n        \"operationId\": \"get_diagnostic_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"category\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: category\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"hours\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: hours\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//backup/configuration\": {\n      \"post\": {\n        \"summary\": \"Backup configuration files\",\n        \"description\": \"Backup configuration files\",\n        \"operationId\": \"_backup_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"backup_dir\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: backup_dir\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"files_backed_up\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"size_mb\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/maintenance/status\": {\n      \"get\": {\n        \"summary\": \"Get current maintenance status\",\n        \"description\": \"Get current maintenance status\",\n        \"operationId\": \"get_maintenance_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"scheduled_tasks\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_tasks\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"completed_tasks\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"failed_tasks\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/maintenance/history\": {\n      \"get\": {\n        \"summary\": \"Get maintenance task history\",\n        \"description\": \"Get maintenance task history\",\n        \"operationId\": \"get_maintenance_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"task_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: task_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"hours\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: hours\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/resolution/steps\": {\n      \"get\": {\n        \"summary\": \"Get resolution steps for a session\",\n        \"description\": \"Get resolution steps for a session\",\n        \"operationId\": \"get_resolution_steps\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/system/health/report\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive system health report.\\n\\nReturns:\\n    System health report\",\n        \"description\": \"Get comprehensive system health report.\\n\\nReturns:\\n    System health report\",\n        \"operationId\": \"get_system_health_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/dependency/status\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_dependency_status\",\n        \"description\": \"API endpoint: get_dependency_status\",\n        \"operationId\": \"get_dependency_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/create/error/context\": {\n      \"post\": {\n        \"summary\": \"API endpoint: create_error_context\",\n        \"description\": \"API endpoint: create_error_context\",\n        \"operationId\": \"create_error_context\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.accuracy_tracking_diagnostics\n\n## Overview\n\nAccuracy Tracking Diagnostics and Maintenance System - Phase 5C-1B\nComprehensive diagnostics, automated maintenance, and troubleshooting for accuracy tracking.\nPart of the Saraphis recursive methodology.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/accuracy_tracking_diagnostics.py`\n\n## Dependencies\n\n- pathlib\n- linecache\n- socket\n- schedule\n- tracemalloc\n- enhanced_fraud_core_monitoring\n- gc\n- io\n- threading\n- ast\n- json\n- datetime\n- time\n- contextlib\n- weakref\n- yaml\n- numpy\n- accuracy_tracking_db\n- enum\n- traceback\n- subprocess\n- shutil\n- cProfile\n- re\n- sys\n- typing\n- warnings\n- config_manager\n- sqlite3\n- psutil\n- dependency_checker\n- concurrent.futures\n- resource\n- logging\n- pandas\n- asyncio\n- dis\n- enhanced_fraud_core_exceptions\n- dataclasses\n- pstats\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 1694\n- **Code Lines:** 1317\n- **Comment Lines:** 97\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.accuracy_tracking_diagnostics\n\nAccuracy Tracking Diagnostics and Maintenance System - Phase 5C-1B\nComprehensive diagnostics, automated maintenance, and troubleshooting for accuracy tracking.\nPart of the Saraphis recursive methodology.\n\n## Components Overview\n\n- **Classes:** 34\n- **Functions:** 6\n- **Dependencies:** 42\n\n## Class Hierarchy\n\n- **DiagnosticsError** (inherits from EnhancedFraudException)\n  - Methods: 0\n  - Complexity: 2\n- **MaintenanceError** (inherits from EnhancedFraudException)\n  - Methods: 0\n  - Complexity: 2\n- **TroubleshootingError** (inherits from EnhancedFraudException)\n  - Methods: 0\n  - Complexity: 2\n- **DiagnosticLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **MaintenanceType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **DiagnosticCategory** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **MaintenanceStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **TroubleshootingPhase** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **DiagnosticResult**\n  - Methods: 0\n  - Complexity: 10\n- **MaintenanceTask**\n  - Methods: 0\n  - Complexity: 11\n- **PerformanceBottleneck**\n  - Methods: 0\n  - Complexity: 8\n- **TroubleshootingSession**\n  - Methods: 0\n  - Complexity: 9\n- **MaintenanceSchedule**\n  - Methods: 0\n  - Complexity: 7\n- **DiagnosticsEngine**\n  - Methods: 14\n  - Complexity: 107\n- **MaintenanceEngine**\n  - Methods: 21\n  - Complexity: 101\n- **TroubleshootingAssistant**\n  - Methods: 4\n  - Complexity: 19\n- **AccuracyTrackingDiagnostics**\n  - Methods: 10\n  - Complexity: 42\n- **MonitoringManager**\n  - Methods: 0\n  - Complexity: 1\n- **MetricsCollector**\n  - Methods: 0\n  - Complexity: 1\n- **PerformanceMetrics**\n  - Methods: 0\n  - Complexity: 1\n- **ResourceMetrics**\n  - Methods: 0\n  - Complexity: 1\n- **CacheManager**\n  - Methods: 0\n  - Complexity: 1\n- **MonitoringConfig**\n  - Methods: 0\n  - Complexity: 1\n- **EnhancedFraudException** (inherits from Exception)\n  - Methods: 0\n  - Complexity: 1\n- **ValidationError** (inherits from EnhancedFraudException)\n  - Methods: 0\n  - Complexity: 1\n- **ConfigurationError** (inherits from EnhancedFraudException)\n  - Methods: 0\n  - Complexity: 1\n- **ResourceError** (inherits from EnhancedFraudException)\n  - Methods: 0\n  - Complexity: 1\n- **MonitoringError** (inherits from EnhancedFraudException)\n  - Methods: 0\n  - Complexity: 1\n- **ErrorContext**\n  - Methods: 0\n  - Complexity: 1\n- **AccuracyTrackingDatabase**\n  - Methods: 0\n  - Complexity: 1\n- **DatabaseConfig**\n  - Methods: 0\n  - Complexity: 1\n- **AccuracyMetric**\n  - Methods: 0\n  - Complexity: 1\n- **ConfigManager**\n  - Methods: 0\n  - Complexity: 1\n- **ConfigManagerSettings**\n  - Methods: 0\n  - Complexity: 1\n## Integration Points\n\n- Class: MonitoringManager\n- Class: CacheManager\n- Class: ConfigManager\n- Class: ConfigManagerSettings\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.api_documentation",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/api_documentation.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.api_documentation\n\nAPI endpoints for independent_core.api_documentation\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //analyze/function/for/api\n\n#### POST //analyze/function/for/api\n\nAnalyze a function node for API endpoint characteristics\n\n⏱️ Rate limited\n⚠️ Deprecated\n\n**Parameters:**\n\n- **node** (query) *required*: FunctionDef - Parameter: node\n- **content** (query) *required*: str - Parameter: content\n- **file_path** (query) *required*: str - Parameter: file_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//analyze/function/for/api?node=example_node&content=example_content&file_path=example_file_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//analyze/function/for/api\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"node\": \"example_node\",\n    \"content\": \"example_content\",\n    \"file_path\": \"example_file_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //analyze/return/statements\n\n#### POST //analyze/return/statements\n\nAnalyze return statements to infer response schema\n\n**Parameters:**\n\n- **node** (query) *required*: FunctionDef - Parameter: node\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//analyze/return/statements?node=example_node\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//analyze/return/statements\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"node\": \"example_node\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //extract/api/responses\n\n#### POST //extract/api/responses\n\nExtract API response information\n\n**Parameters:**\n\n- **node** (query) *required*: FunctionDef - Parameter: node\n- **source** (query) *required*: str - Parameter: source\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//extract/api/responses?node=example_node&source=example_source\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//extract/api/responses\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"node\": \"example_node\",\n    \"source\": \"example_source\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //extract/responses/from/docstring\n\n#### POST //extract/responses/from/docstring\n\nExtract response information from docstring\n\n**Parameters:**\n\n- **docstring** (query) *required*: str - Parameter: docstring\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//extract/responses/from/docstring?docstring=example_docstring\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//extract/responses/from/docstring\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"docstring\": \"example_docstring\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/api/examples\n\n#### POST //generate/api/examples\n\nGenerate example requests and responses for endpoint\n\n**Parameters:**\n\n- **endpoint** (query) *required*: APIEndpoint - Parameter: endpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/api/examples?endpoint=example_endpoint\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/api/examples\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"endpoint\": \"example_endpoint\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/comprehensive/api/docs\n\n#### POST //generate/comprehensive/api/docs\n\nGenerate comprehensive API documentation\n\n**Parameters:**\n\n- **api_doc** (query) *required*: APIDocumentation - Parameter: api_doc\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/comprehensive/api/docs?api_doc=example_api_doc\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/comprehensive/api/docs\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"api_doc\": \"example_api_doc\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/curl/example\n\n#### POST //generate/curl/example\n\nGenerate curl example for endpoint\n\n**Parameters:**\n\n- **endpoint** (query) *required*: APIEndpoint - Parameter: endpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/curl/example?endpoint=example_endpoint\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/curl/example\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"endpoint\": \"example_endpoint\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/endpoint/docs\n\n#### POST //generate/endpoint/docs\n\nGenerate documentation for a single endpoint\n\n⏱️ Rate limited\n⚠️ Deprecated\n\n**Parameters:**\n\n- **endpoint** (query) *required*: APIEndpoint - Parameter: endpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/endpoint/docs?endpoint=example_endpoint\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/endpoint/docs\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"endpoint\": \"example_endpoint\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/path/spec\n\n#### POST //generate/path/spec\n\nGenerate OpenAPI path specification for endpoint\n\n⚠️ Deprecated\n\n**Parameters:**\n\n- **endpoint** (query) *required*: APIEndpoint - Parameter: endpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/path/spec?endpoint=example_endpoint\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/path/spec\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"endpoint\": \"example_endpoint\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/python/example\n\n#### POST //generate/python/example\n\nGenerate Python requests example for endpoint\n\n**Parameters:**\n\n- **endpoint** (query) *required*: APIEndpoint - Parameter: endpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/python/example?endpoint=example_endpoint\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/python/example\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"endpoint\": \"example_endpoint\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/request/body/spec\n\n#### POST //generate/request/body/spec\n\nGenerate OpenAPI request body specification\n\n**Parameters:**\n\n- **body_params** (query) *required*: string - Parameter: body_params\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/request/body/spec?body_params=example_body_params\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/request/body/spec\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"body_params\": \"example_body_params\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/responses/spec\n\n#### POST //generate/responses/spec\n\nGenerate OpenAPI responses specification\n\n**Parameters:**\n\n- **responses** (query) *required*: string - Parameter: responses\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/responses/spec?responses=example_responses\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/responses/spec\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"responses\": \"example_responses\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //infer/parameter/type\n\n#### POST //infer/parameter/type\n\nInfer parameter type from name and context\n\n**Parameters:**\n\n- **param_name** (header) *required*: str - Parameter: param_name\n- **source** (header) *required*: str - Parameter: source\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//infer/parameter/type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//infer/parameter/type\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //is/likely/api/function\n\n#### POST //is/likely/api/function\n\nDetermine if function is likely an API endpoint\n\n**Parameters:**\n\n- **func_name** (query) *required*: str - Parameter: func_name\n- **source** (query) *required*: str - Parameter: source\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//is/likely/api/function?func_name=example_func_name&source=example_source\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//is/likely/api/function\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"func_name\": \"example_func_name\",\n    \"source\": \"example_source\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.api_documentation\",\n    \"description\": \"API endpoints for independent_core.api_documentation\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//analyze/function/for/api\": {\n      \"post\": {\n        \"summary\": \"Analyze a function node for API endpoint characteristics\",\n        \"description\": \"Analyze a function node for API endpoint characteristics\",\n        \"operationId\": \"_analyze_function_for_api\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"node\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: node\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"FunctionDef\"\n            }\n          },\n          {\n            \"name\": \"content\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: content\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"file_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: file_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"deprecated\": true\n      }\n    },\n    \"//is/likely/api/function\": {\n      \"post\": {\n        \"summary\": \"Determine if function is likely an API endpoint\",\n        \"description\": \"Determine if function is likely an API endpoint\",\n        \"operationId\": \"_is_likely_api_function\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"func_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: func_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"source\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: source\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//extract/api/responses\": {\n      \"post\": {\n        \"summary\": \"Extract API response information\",\n        \"description\": \"Extract API response information\",\n        \"operationId\": \"_extract_api_responses\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"node\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: node\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"FunctionDef\"\n            }\n          },\n          {\n            \"name\": \"source\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: source\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//infer/parameter/type\": {\n      \"post\": {\n        \"summary\": \"Infer parameter type from name and context\",\n        \"description\": \"Infer parameter type from name and context\",\n        \"operationId\": \"_infer_parameter_type\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"param_name\",\n            \"in\": \"header\",\n            \"description\": \"Parameter: param_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"source\",\n            \"in\": \"header\",\n            \"description\": \"Parameter: source\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//extract/responses/from/docstring\": {\n      \"post\": {\n        \"summary\": \"Extract response information from docstring\",\n        \"description\": \"Extract response information from docstring\",\n        \"operationId\": \"_extract_responses_from_docstring\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"docstring\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: docstring\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//analyze/return/statements\": {\n      \"post\": {\n        \"summary\": \"Analyze return statements to infer response schema\",\n        \"description\": \"Analyze return statements to infer response schema\",\n        \"operationId\": \"_analyze_return_statements\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"node\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: node\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"FunctionDef\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/api/examples\": {\n      \"post\": {\n        \"summary\": \"Generate example requests and responses for endpoint\",\n        \"description\": \"Generate example requests and responses for endpoint\",\n        \"operationId\": \"_generate_api_examples\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"endpoint\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: endpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"APIEndpoint\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/curl/example\": {\n      \"post\": {\n        \"summary\": \"Generate curl example for endpoint\",\n        \"description\": \"Generate curl example for endpoint\",\n        \"operationId\": \"_generate_curl_example\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"endpoint\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: endpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"APIEndpoint\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"language\": {\n                      \"type\": \"string\"\n                    },\n                    \"title\": {\n                      \"type\": \"string\"\n                    },\n                    \"code\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//generate/python/example\": {\n      \"post\": {\n        \"summary\": \"Generate Python requests example for endpoint\",\n        \"description\": \"Generate Python requests example for endpoint\",\n        \"operationId\": \"_generate_python_example\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"endpoint\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: endpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"APIEndpoint\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"language\": {\n                      \"type\": \"string\"\n                    },\n                    \"title\": {\n                      \"type\": \"string\"\n                    },\n                    \"code\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//generate/path/spec\": {\n      \"post\": {\n        \"summary\": \"Generate OpenAPI path specification for endpoint\",\n        \"description\": \"Generate OpenAPI path specification for endpoint\",\n        \"operationId\": \"_generate_path_spec\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"endpoint\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: endpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"APIEndpoint\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"deprecated\": true\n      }\n    },\n    \"//generate/request/body/spec\": {\n      \"post\": {\n        \"summary\": \"Generate OpenAPI request body specification\",\n        \"description\": \"Generate OpenAPI request body specification\",\n        \"operationId\": \"_generate_request_body_spec\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"body_params\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: body_params\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"required\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"content\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"application/json\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"schema\": {\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"type\": {\n                                  \"type\": \"string\"\n                                },\n                                \"properties\": {\n                                  \"type\": \"unknown\"\n                                },\n                                \"required\": {\n                                  \"type\": \"unknown\"\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//generate/responses/spec\": {\n      \"post\": {\n        \"summary\": \"Generate OpenAPI responses specification\",\n        \"description\": \"Generate OpenAPI responses specification\",\n        \"operationId\": \"_generate_responses_spec\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"responses\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: responses\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/comprehensive/api/docs\": {\n      \"post\": {\n        \"summary\": \"Generate comprehensive API documentation\",\n        \"description\": \"Generate comprehensive API documentation\",\n        \"operationId\": \"_generate_comprehensive_api_docs\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"api_doc\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: api_doc\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"APIDocumentation\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/endpoint/docs\": {\n      \"post\": {\n        \"summary\": \"Generate documentation for a single endpoint\",\n        \"description\": \"Generate documentation for a single endpoint\",\n        \"operationId\": \"_generate_endpoint_docs\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"endpoint\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: endpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"APIEndpoint\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"deprecated\": true\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.api_documentation\n\n## Overview\n\nAPI Documentation System for Saraphis Independent Core\n\nComprehensive API documentation generation with support for REST, GraphQL, RPC,\nWebSocket, and Internal API documentation across all 186 Python files.\n\nAdvanced endpoint discovery, parameter analysis, and interactive documentation generation.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/api_documentation.py`\n\n## Dependencies\n\n- pathlib\n- inspect\n- sys\n- logging\n- importlib.util\n- enum\n- typing\n- asyncio\n- urllib.parse\n- datetime\n- ast\n- dataclasses\n- json\n- re\n- os\n\n## Code Structure\n\n- **Total Lines:** 1146\n- **Code Lines:** 850\n- **Comment Lines:** 72\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Async programming\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.api_documentation\n\nAPI Documentation System for Saraphis Independent Core\n\nComprehensive API documentation generation with support for REST, GraphQL, RPC,\nWebSocket, and Internal API documentation across all 186 Python files.\n\nAdvanced endpoint discovery, parameter analysis, and interactive documentation generation.\n\n## Components Overview\n\n- **Classes:** 11\n- **Functions:** 0\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **APIType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **HTTPMethod** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **ParameterType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **APIParameter**\n  - Methods: 0\n  - Complexity: 9\n- **APIResponse**\n  - Methods: 0\n  - Complexity: 7\n- **APIEndpoint**\n  - Methods: 0\n  - Complexity: 15\n- **APIDocumentation**\n  - Methods: 0\n  - Complexity: 12\n- **APIDiscovery**\n  - Methods: 29\n  - Complexity: 202\n- **OpenAPIGenerator**\n  - Methods: 7\n  - Complexity: 44\n- **APIDocumentationGenerator**\n  - Methods: 3\n  - Complexity: 38\n- **MockTarget**\n  - Methods: 1\n  - Complexity: 3\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.training_hybrid_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/training_hybrid_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.training_hybrid_integration\n\nAPI endpoints for independent_core.training_hybrid_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/integration/status\n\n#### GET /get/integration/status\n\nGet current integration status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/training/analytics\n\n#### GET /get/training/analytics\n\nGet comprehensive training analytics.\n\nArgs:\n    session_id: Optional specific session ID for detailed analytics\n    \nReturns:\n    Training analytics results\n    \nRaises:\n    ValueError: If session ID is invalid\n    RuntimeError: If analytics retrieval fails\n\n**Parameters:**\n\n- **session_id** (query) *required*: integer - Optional specific session ID for detailed analytics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/analytics?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /handle/training/errors\n\n#### POST /handle/training/errors\n\nHandle training errors and attempt recovery.\n\nArgs:\n    session_id: Training session identifier\n    error: Training error that occurred\n    \nReturns:\n    Error handling results\n    \nRaises:\n    ValueError: If session is invalid\n    RuntimeError: If error handling fails\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Training session identifier\n- **error** (query) *required*: Exception - Training error that occurred\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/training/errors?session_id=example_session_id&error=example_error\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/training/errors\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"error\": \"example_error\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.training_hybrid_integration\",\n    \"description\": \"API endpoints for independent_core.training_hybrid_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/handle/training/errors\": {\n      \"post\": {\n        \"summary\": \"Handle training errors and attempt recovery.\\n\\nArgs:\\n    session_id: Training session identifier\\n    error: Training error that occurred\\n    \\nReturns:\\n    Error handling results\\n    \\nRaises:\\n    ValueError: If session is invalid\\n    RuntimeError: If error handling fails\",\n        \"description\": \"Handle training errors and attempt recovery.\\n\\nArgs:\\n    session_id: Training session identifier\\n    error: Training error that occurred\\n    \\nReturns:\\n    Error handling results\\n    \\nRaises:\\n    ValueError: If session is invalid\\n    RuntimeError: If error handling fails\",\n        \"operationId\": \"handle_training_errors\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Training session identifier\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Training error that occurred\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/training/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive training analytics.\\n\\nArgs:\\n    session_id: Optional specific session ID for detailed analytics\\n    \\nReturns:\\n    Training analytics results\\n    \\nRaises:\\n    ValueError: If session ID is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"description\": \"Get comprehensive training analytics.\\n\\nArgs:\\n    session_id: Optional specific session ID for detailed analytics\\n    \\nReturns:\\n    Training analytics results\\n    \\nRaises:\\n    ValueError: If session ID is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"operationId\": \"get_training_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific session ID for detailed analytics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"global_analytics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_sessions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance_baselines\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_performance\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_compressions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_optimizations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_health\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recommendations\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/integration/status\": {\n      \"get\": {\n        \"summary\": \"Get current integration status\",\n        \"description\": \"Get current integration status\",\n        \"operationId\": \"get_integration_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"integration_state\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_sessions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error_recovery_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_health\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.training_hybrid_integration\n\n## Overview\n\nTraining Hybrid Integration - Main orchestrator for training-hybrid integration\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/training_hybrid_integration.py`\n\n## Dependencies\n\n- gc\n- threading\n- json\n- datetime\n- time\n- numpy\n- enum\n- torch\n- compression_systems.padic.hybrid_padic_compressor\n- compression_systems.padic.dynamic_switching_manager\n- training_manager\n- pynvml\n- typing\n- hashlib\n- psutil\n- brain_gac_coordinator\n- compression_systems.padic.direction_manager\n- logging\n- brain_gac_integration\n- compression_systems.padic.hybrid_bounding_engine\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1149\n- **Code Lines:** 871\n- **Comment Lines:** 75\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.training_hybrid_integration\n\nTraining Hybrid Integration - Main orchestrator for training-hybrid integration\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/training_hybrid_integration.py\n- **Total Classes:** 7\n- **Total Functions:** 0\n- **Dependencies:** gc, threading, json, datetime, time, numpy, enum, torch, compression_systems.padic.hybrid_padic_compressor, compression_systems.padic.dynamic_switching_manager, training_manager, pynvml, typing, hashlib, psutil, brain_gac_coordinator, compression_systems.padic.direction_manager, logging, brain_gac_integration, compression_systems.padic.hybrid_bounding_engine, dataclasses, collections\n\n## Contents\n**Classes (7):** TrainingIntegrationMode, TrainingCompressionStrategy, TrainingIntegrationState, TrainingHybridConfig, TrainingSessionMetrics, TrainingAnalytics, TrainingHybridIntegration\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\npeak_memory_usage_gb: float = 0.0\n\naverage_memory_usage_gb: float = 0.0\n\ngpu_memory_usage_gb: float = 0.0\n\n# Compression metrics\n\n'memory_usage_gb': 2.0,\n\nmemory_usage = psutil.virtual_memory().used / (1024**3)  # GB\n\ngpu_memory_usage = 0.0\n\ngpu_memory_usage = gpu_memory_info.used / (1024**3)  # GB\n\n'memory_usage_gb': memory_usage,\n\n'gpu_memory_usage_gb': gpu_memory_usage\n\nsession_metrics.peak_memory_usage_gb = max(\n\nsession_metrics.peak_memory_usage_gb,\n\ncurrent_metrics.get('memory_usage_gb', 0.0)\n\n# Update GPU memory usage\n\nsession_metrics.gpu_memory_usage_gb = current_metrics.get('gpu_memory_usage_gb', 0.0)\n\n# Update averages (simple moving average)\n\nsession_metrics.average_memory_usage_gb = (\n\n(session_metrics.average_memory_usage_gb * (operations - 1) +\n\ncurrent_metrics.get('memory_usage_gb', 0.0)) / operations\n\nmemory_values = [m['current_metrics'].get('memory_usage_gb', 0) for m in recent_metrics]\n\nmemory_usage = current_metrics.get('memory_usage_gb', 0.0)\n\nif memory_usage > self.config.memory_threshold_gb:\n\nalerts.append(f\"High memory usage: {memory_usage:.1f}GB > {self.config.memory_threshold_gb}GB\")\n\n\nif current_metrics.get('memory_usage_gb', 0) > self.config.memory_threshold_gb * 0.8:\n\nrecommendations.append(\"Memory usage approaching threshold - enable memory optimization\")\n\n\n'peak_memory_usage_gb': session_metrics.peak_memory_usage_gb,\n\n'average_memory_usage_gb': session_metrics.average_memory_usage_gb,\n\ntotal_memory_usage = 0\n\ntotal_memory_usage += session_metrics.average_memory_usage_gb\n\nself.training_analytics.average_memory_savings = total_memory_usage / num_sessions\n",
        "architecture": "# Architecture: independent_core.training_hybrid_integration\n\nTraining Hybrid Integration - Main orchestrator for training-hybrid integration\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 22\n\n## Class Hierarchy\n\n- **TrainingIntegrationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **TrainingCompressionStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **TrainingIntegrationState** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **TrainingHybridConfig**\n  - Methods: 1\n  - Complexity: 28\n- **TrainingSessionMetrics**\n  - Methods: 1\n  - Complexity: 30\n- **TrainingAnalytics**\n  - Methods: 0\n  - Complexity: 17\n- **TrainingHybridIntegration**\n  - Methods: 36\n  - Complexity: 177\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_proof_components",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_proof_components.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.test_proof_components",
        "developer_guide": "# Developer Guide: independent_core.test_proof_components\n\n## Overview\n\nUnit Tests for Individual Proof System Components\nTests each proof engine component in isolation\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_proof_components.py`\n\n## Dependencies\n\n- argparse\n- numpy\n- os\n- sys\n- independent_core.proof_system.ml_based_engine\n- independent_core.proof_system.proof_integration_manager\n- independent_core.proof_system.algebraic_rule_enforcer\n- logging\n- typing\n- independent_core.proof_system.cryptographic_engine\n- independent_core.proof_system.confidence_generator\n- datetime\n- unittest\n- json\n- independent_core.proof_system.rule_based_engine\n- time\n\n## Code Structure\n\n- **Total Lines:** 662\n- **Code Lines:** 495\n- **Comment Lines:** 39\n\n## Complexity Indicators\n\n- High class count\n- High function count\n\n",
        "architecture": "# Architecture: independent_core.test_proof_components\n\nUnit Tests for Individual Proof System Components\nTests each proof engine component in isolation\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 1\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **TestRuleBasedEngine**\n  - Methods: 6\n  - Complexity: 21\n- **TestMLBasedEngine**\n  - Methods: 5\n  - Complexity: 16\n- **TestCryptographicEngine**\n  - Methods: 5\n  - Complexity: 19\n- **TestConfidenceGenerator**\n  - Methods: 6\n  - Complexity: 19\n- **TestAlgebraicRuleEnforcer**\n  - Methods: 6\n  - Complexity: 19\n- **TestProofIntegrationManager**\n  - Methods: 6\n  - Complexity: 23\n- **ProofComponentUnitTests**\n  - Methods: 2\n  - Complexity: 9\n- **FaultyEngine**\n  - Methods: 1\n  - Complexity: 3\n## Integration Points\n\n- Class: TestProofIntegrationManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_device_routing",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_device_routing.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.test_device_routing",
        "developer_guide": "# Developer Guide: independent_core.test_device_routing\n\n## Overview\n\nDevice Routing Efficiency Test\nTests that training is properly routed to CPU or GPU based on efficiency\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_device_routing.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- torch\n- torch.nn\n- torch.optim\n- psutil\n- time\n\n## Code Structure\n\n- **Total Lines:** 396\n- **Code Lines:** 298\n- **Comment Lines:** 25\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.production_security_validator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_validator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_security_validator\n\nAPI endpoints for independent_core.production_security_validator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //check/vulnerable/dependencies\n\n#### POST //check/vulnerable/dependencies\n\nCheck for vulnerable dependencies.\n\n**Parameters:**\n\n- **target_scope** (query) *required*: string - Parameter: target_scope\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//check/vulnerable/dependencies?target_scope=example_target_scope\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//check/vulnerable/dependencies\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"target_scope\": \"example_target_scope\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //load/configuration\n\n#### POST //load/configuration\n\nLoad validator configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/configuration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/hardening/validation\n\n#### POST /create/hardening/validation\n\nAPI endpoint: create_hardening_validation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/hardening/validation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/hardening/validation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/validation\n\n#### POST /create/validation\n\nCreate a new security validation.\n\n**Parameters:**\n\n- **validation** (query) *required*: SecurityValidation - Parameter: validation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/validation?validation=example_validation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/validation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"validation\": \"example_validation\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /execute/validation\n\n#### POST /execute/validation\n\nExecute a security validation.\n\n**Parameters:**\n\n- **validation_id** (query) *required*: str - Parameter: validation_id\n- **target_scope** (query) *required*: string - Parameter: target_scope\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/execute/validation?validation_id=example_validation_id&target_scope=example_target_scope\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/execute/validation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"validation_id\": \"example_validation_id\",\n    \"target_scope\": \"example_target_scope\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/validation/status\n\n#### GET /get/validation/status\n\nGet current validation system status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/validation/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/validation/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_security_validator\",\n    \"description\": \"API endpoints for independent_core.production_security_validator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//load/configuration\": {\n      \"post\": {\n        \"summary\": \"Load validator configuration.\",\n        \"description\": \"Load validator configuration.\",\n        \"operationId\": \"_load_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/validation\": {\n      \"post\": {\n        \"summary\": \"Create a new security validation.\",\n        \"description\": \"Create a new security validation.\",\n        \"operationId\": \"create_validation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"validation\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: validation\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SecurityValidation\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/execute/validation\": {\n      \"post\": {\n        \"summary\": \"Execute a security validation.\",\n        \"description\": \"Execute a security validation.\",\n        \"operationId\": \"execute_validation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"validation_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: validation_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"target_scope\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target_scope\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/validation/status\": {\n      \"get\": {\n        \"summary\": \"Get current validation system status.\",\n        \"description\": \"Get current validation system status.\",\n        \"operationId\": \"get_validation_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_validations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"completed_validations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_issues\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"critical_issues\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"high_issues\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"storage_path\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"running\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//check/vulnerable/dependencies\": {\n      \"post\": {\n        \"summary\": \"Check for vulnerable dependencies.\",\n        \"description\": \"Check for vulnerable dependencies.\",\n        \"operationId\": \"_check_vulnerable_dependencies\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"target_scope\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target_scope\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/create/hardening/validation\": {\n      \"post\": {\n        \"summary\": \"API endpoint: create_hardening_validation\",\n        \"description\": \"API endpoint: create_hardening_validation\",\n        \"operationId\": \"create_hardening_validation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_security_validator\n\n## Overview\n\nProduction Security Validator - Production security validation and verification system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security validation and verification capabilities,\nincluding configuration validation, code security analysis, deployment validation, runtime\nvalidation, compliance validation, and continuous security testing.\n\nKey Features:\n- Multi-type validation (CONFIGURATION, CODE, DEPLOYMENT, RUNTIME, COMPLIANCE)\n- Multi-level validation (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Configuration validation with policy compliance checking\n- Code security analysis with static and dynamic testing capabilities\n- Deployment validation with security scanning and verification\n- Runtime validation with behavior monitoring and anomaly detection\n- Compliance validation with regulatory requirement verification\n- Security testing with automated validation workflows\n- Quality assurance with comprehensive security metrics\n- Validation reporting with detailed results and recommendations\n- Continuous validation with automated checking and monitoring\n- Security certification with formal validation processes\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security validation operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_validator.py`\n\n## Dependencies\n\n- pathlib\n- statistics\n- ast\n- threading\n- datetime\n- json\n- time\n- production_security_hardening\n- production_security_enforcer\n- production_security_auditor\n- enum\n- uuid\n- traceback\n- subprocess\n- re\n- typing\n- production_security_config\n- tempfile\n- hashlib\n- concurrent.futures\n- logging\n- production_monitoring_system\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 1592\n- **Code Lines:** 1298\n- **Comment Lines:** 64\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "security_guide": "\n# independent_core.production_security_validator\n\nProduction Security Validator - Production security validation and verification system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security validation and verification capabilities,\nincluding configuration validation, code security analysis, deployment validation, runtime\nvalidation, compliance validation, and continuous security testing.\n\nKey Features:\n- Multi-type validation (CONFIGURATION, CODE, DEPLOYMENT, RUNTIME, COMPLIANCE)\n- Multi-level validation (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Configuration validation with policy compliance checking\n- Code security analysis with static and dynamic testing capabilities\n- Deployment validation with security scanning and verification\n- Runtime validation with behavior monitoring and anomaly detection\n- Compliance validation with regulatory requirement verification\n- Security testing with automated validation workflows\n- Quality assurance with comprehensive security metrics\n- Validation reporting with detailed results and recommendations\n- Continuous validation with automated checking and monitoring\n- Security certification with formal validation processes\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security validation operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_validator.py\n- **Total Classes:** 14\n- **Total Functions:** 4\n- **Dependencies:** pathlib, statistics, ast, threading, datetime, json, time, production_security_hardening, production_security_enforcer, production_security_auditor, enum, uuid, traceback, subprocess, re, typing, production_security_config, tempfile, hashlib, concurrent.futures, logging, production_monitoring_system, dataclasses, collections, os\n\n## Contents\n**Classes (14):** ValidationType, ValidationLevel, ValidationStatus, SecurityIssueType, ViolationSeverity, SecurityValidation, ValidationResult, SecurityIssue, SecurityValidator, ConfigurationValidator, CodeSecurityValidator, DeploymentValidator, RuntimeValidator, ComplianceValidator\n**Functions (4):** integrate_with_hardening_system, integrate_with_monitoring_system, create_hardening_validation, collect_validation_metrics\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\n\"Validate cryptographic usage\"\n\n\"Check resource usage anomalies\"\n\n\"Normal resource usage\"\n\nweak_algorithms = ['DES', 'RC4']  # Example weak algorithms found\n\n",
        "deployment_guide": "\n# independent_core.production_security_validator\n\nProduction Security Validator - Production security validation and verification system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security validation and verification capabilities,\nincluding configuration validation, code security analysis, deployment validation, runtime\nvalidation, compliance validation, and continuous security testing.\n\nKey Features:\n- Multi-type validation (CONFIGURATION, CODE, DEPLOYMENT, RUNTIME, COMPLIANCE)\n- Multi-level validation (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Configuration validation with policy compliance checking\n- Code security analysis with static and dynamic testing capabilities\n- Deployment validation with security scanning and verification\n- Runtime validation with behavior monitoring and anomaly detection\n- Compliance validation with regulatory requirement verification\n- Security testing with automated validation workflows\n- Quality assurance with comprehensive security metrics\n- Validation reporting with detailed results and recommendations\n- Continuous validation with automated checking and monitoring\n- Security certification with formal validation processes\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security validation operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_validator.py\n- **Total Classes:** 14\n- **Total Functions:** 4\n- **Dependencies:** pathlib, statistics, ast, threading, datetime, json, time, production_security_hardening, production_security_enforcer, production_security_auditor, enum, uuid, traceback, subprocess, re, typing, production_security_config, tempfile, hashlib, concurrent.futures, logging, production_monitoring_system, dataclasses, collections, os\n\n## Contents\n**Classes (14):** ValidationType, ValidationLevel, ValidationStatus, SecurityIssueType, ViolationSeverity, SecurityValidation, ValidationResult, SecurityIssue, SecurityValidator, ConfigurationValidator, CodeSecurityValidator, DeploymentValidator, RuntimeValidator, ComplianceValidator\n**Functions (4):** integrate_with_hardening_system, integrate_with_monitoring_system, create_hardening_validation, collect_validation_metrics\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\n\"Validate cryptographic usage\"\n\n\"Check resource usage anomalies\"\n\n\"Normal resource usage\"\n\nweak_algorithms = ['DES', 'RC4']  # Example weak algorithms found\n\n",
        "architecture": "# Architecture: independent_core.production_security_validator\n\nProduction Security Validator - Production security validation and verification system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security validation and verification capabilities,\nincluding configuration validation, code security analysis, deployment validation, runtime\nvalidation, compliance validation, and continuous security testing.\n\nKey Features:\n- Multi-type validation (CONFIGURATION, CODE, DEPLOYMENT, RUNTIME, COMPLIANCE)\n- Multi-level validation (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Configuration validation with policy compliance checking\n- Code security analysis with static and dynamic testing capabilities\n- Deployment validation with security scanning and verification\n- Runtime validation with behavior monitoring and anomaly detection\n- Compliance validation with regulatory requirement verification\n- Security testing with automated validation workflows\n- Quality assurance with comprehensive security metrics\n- Validation reporting with detailed results and recommendations\n- Continuous validation with automated checking and monitoring\n- Security certification with formal validation processes\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security validation operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 14\n- **Functions:** 4\n- **Dependencies:** 25\n\n## Class Hierarchy\n\n- **ValidationType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **ValidationLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **ValidationStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **SecurityIssueType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **ViolationSeverity** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **SecurityValidation**\n  - Methods: 1\n  - Complexity: 20\n- **ValidationResult**\n  - Methods: 1\n  - Complexity: 19\n- **SecurityIssue**\n  - Methods: 1\n  - Complexity: 20\n- **SecurityValidator**\n  - Methods: 10\n  - Complexity: 64\n- **ConfigurationValidator**\n  - Methods: 7\n  - Complexity: 30\n- **CodeSecurityValidator**\n  - Methods: 6\n  - Complexity: 25\n- **DeploymentValidator**\n  - Methods: 5\n  - Complexity: 22\n- **RuntimeValidator**\n  - Methods: 5\n  - Complexity: 22\n- **ComplianceValidator**\n  - Methods: 6\n  - Complexity: 29\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "security_guide missing required section: Overview",
        "security_guide missing required section: Details",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.install_dependencies",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/install_dependencies.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.install_dependencies\n\nAPI endpoints for independent_core.install_dependencies\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /test/core/dependencies\n\n#### POST /test/core/dependencies\n\nTest core dependencies required for basic functionality.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/core/dependencies\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/core/dependencies\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.install_dependencies\",\n    \"description\": \"API endpoints for independent_core.install_dependencies\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/test/core/dependencies\": {\n      \"post\": {\n        \"summary\": \"Test core dependencies required for basic functionality.\",\n        \"description\": \"Test core dependencies required for basic functionality.\",\n        \"operationId\": \"test_core_dependencies\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.install_dependencies\n\n## Overview\n\nInteractive dependency installation helper for Saraphis Independent Core.\nHandles installation and verification of all required and optional dependencies.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/install_dependencies.py`\n\n## Dependencies\n\n- pathlib\n- dependency_checker\n- sys\n- typing\n- traceback\n- pip\n- subprocess\n- importlib\n- accuracy_tracking_diagnostics\n- os\n\n## Code Structure\n\n- **Total Lines:** 358\n- **Code Lines:** 280\n- **Comment Lines:** 14\n\n",
        "architecture": "# Architecture: independent_core.install_dependencies\n\nInteractive dependency installation helper for Saraphis Independent Core.\nHandles installation and verification of all required and optional dependencies.\n\n## Components Overview\n\n- **Classes:** 0\n- **Functions:** 12\n- **Dependencies:** 10\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.production_observability",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_observability.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_observability\n\nAPI endpoints for independent_core.production_observability\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/observability/manager\n\n#### POST /create/observability/manager\n\nFactory function to create an ObservabilityManager instance.\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/observability/manager?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/observability/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/trace\n\n#### POST /create/trace\n\nCreate a new distributed trace.\n\n**Parameters:**\n\n- **operation_name** (query) *required*: str - Parameter: operation_name\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/trace?operation_name=example_operation_name&service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/trace\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation_name\": \"example_operation_name\",\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/observability/status\n\n#### GET /get/observability/status\n\nGet observability status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/observability/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/observability/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/recent/anomalies\n\n#### GET /get/recent/anomalies\n\nGet recent anomalies.\n\n**Parameters:**\n\n- **minutes** (query) *required*: int - Parameter: minutes\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/recent/anomalies?minutes=example_minutes\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/recent/anomalies\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"minutes\": \"example_minutes\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/trace\n\n#### GET /get/trace\n\nGet trace by ID.\n\n**Parameters:**\n\n- **trace_id** (query) *required*: str - Parameter: trace_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/trace?trace_id=example_trace_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/trace\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"trace_id\": \"example_trace_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_observability\",\n    \"description\": \"API endpoints for independent_core.production_observability\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/observability/manager\": {\n      \"post\": {\n        \"summary\": \"Factory function to create an ObservabilityManager instance.\",\n        \"description\": \"Factory function to create an ObservabilityManager instance.\",\n        \"operationId\": \"create_observability_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/trace\": {\n      \"get\": {\n        \"summary\": \"Get trace by ID.\",\n        \"description\": \"Get trace by ID.\",\n        \"operationId\": \"get_trace\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"trace_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: trace_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"trace_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"spans\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/recent/anomalies\": {\n      \"get\": {\n        \"summary\": \"Get recent anomalies.\",\n        \"description\": \"Get recent anomalies.\",\n        \"operationId\": \"get_recent_anomalies\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"minutes\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: minutes\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/trace\": {\n      \"post\": {\n        \"summary\": \"Create a new distributed trace.\",\n        \"description\": \"Create a new distributed trace.\",\n        \"operationId\": \"create_trace\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"operation_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: operation_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/observability/status\": {\n      \"get\": {\n        \"summary\": \"Get observability status.\",\n        \"description\": \"Get observability status.\",\n        \"operationId\": \"get_observability_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"observability_level\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"enabled_telemetry_types\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"uptime_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"traces_created\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"logs_processed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"events_emitted\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"anomalies_detected\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"components\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"tracing\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"active_traces\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"completed_traces\": {\n                              \"type\": \"unknown\"\n                            }\n                          }\n                        },\n                        \"logging\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"log_buffer_size\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"processing_active\": {\n                              \"type\": \"unknown\"\n                            }\n                          }\n                        },\n                        \"events\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"event_buffer_size\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"streaming_active\": {\n                              \"type\": \"unknown\"\n                            }\n                          }\n                        },\n                        \"anomaly_detection\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"recent_anomalies\": {\n                              \"type\": \"unknown\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_observability\n\n## Overview\n\nProduction Observability - Production observability and telemetry system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production observability capabilities including\ndistributed tracing, log aggregation, event streaming, metrics aggregation,\ncorrelation analysis, anomaly detection, and performance profiling.\n\nKey Features:\n- Multi-level observability (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Multiple telemetry types (METRICS, LOGS, TRACES, EVENTS)\n- Distributed tracing with request correlation\n- Log aggregation with structured logging\n- Event streaming with real-time event processing\n- Metrics aggregation with statistical analysis\n- Correlation analysis across different telemetry types\n- Anomaly detection with machine learning\n- Performance profiling with detailed analysis\n- Error tracking with stack trace analysis\n- User behavior tracking with privacy compliance\n- Business metrics with KPI tracking\n- Infrastructure metrics with resource utilization\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll observability operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_observability.py`\n\n## Dependencies\n\n- pathlib\n- statistics\n- threading\n- datetime\n- json\n- time\n- contextlib\n- numpy\n- enum\n- uuid\n- traceback\n- re\n- typing\n- pickle\n- tempfile\n- compression_systems.padic.hybrid_performance_monitor\n- struct\n- hashlib\n- sqlite3\n- gzip\n- logging\n- asyncio\n- production_monitoring_system\n- base64\n- production_config_manager\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 1309\n- **Code Lines:** 1025\n- **Comment Lines:** 50\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "deployment_guide": "\n# independent_core.production_observability\n\nProduction Observability - Production observability and telemetry system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production observability capabilities including\ndistributed tracing, log aggregation, event streaming, metrics aggregation,\ncorrelation analysis, anomaly detection, and performance profiling.\n\nKey Features:\n- Multi-level observability (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Multiple telemetry types (METRICS, LOGS, TRACES, EVENTS)\n- Distributed tracing with request correlation\n- Log aggregation with structured logging\n- Event streaming with real-time event processing\n- Metrics aggregation with statistical analysis\n- Correlation analysis across different telemetry types\n- Anomaly detection with machine learning\n- Performance profiling with detailed analysis\n- Error tracking with stack trace analysis\n- User behavior tracking with privacy compliance\n- Business metrics with KPI tracking\n- Infrastructure metrics with resource utilization\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll observability operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_observability.py\n- **Total Classes:** 15\n- **Total Functions:** 1\n- **Dependencies:** pathlib, statistics, threading, datetime, json, time, contextlib, numpy, enum, uuid, traceback, re, typing, pickle, tempfile, compression_systems.padic.hybrid_performance_monitor, struct, hashlib, sqlite3, gzip, logging, asyncio, production_monitoring_system, base64, production_config_manager, dataclasses, collections, os\n\n## Contents\n**Classes (15):** ObservabilityLevel, TelemetryType, TraceStatus, LogLevel, EventType, ObservabilityData, TraceSpan, LogEntry, Event, ObservabilityConfiguration, DistributedTracing, LogAggregation, EventStreaming, AnomalyDetection, ObservabilityManager\n**Functions (1):** create_observability_manager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: ObservabilityManager\nFunction: create_observability_manager\nFunction: initialize_observability_manager\n\n## Examples\n# Example usage\n\n# Create a sample trace\n\nwith observability_manager.distributed_tracing.trace_context(\"example_operation\", \"example_service\") as span:\n\nmessage=\"Example log message\",\n\nservice_name=\"example_service\",\n\nname=\"example_event\",\n\nsource=\"example_service\",\n",
        "architecture": "# Architecture: independent_core.production_observability\n\nProduction Observability - Production observability and telemetry system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production observability capabilities including\ndistributed tracing, log aggregation, event streaming, metrics aggregation,\ncorrelation analysis, anomaly detection, and performance profiling.\n\nKey Features:\n- Multi-level observability (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Multiple telemetry types (METRICS, LOGS, TRACES, EVENTS)\n- Distributed tracing with request correlation\n- Log aggregation with structured logging\n- Event streaming with real-time event processing\n- Metrics aggregation with statistical analysis\n- Correlation analysis across different telemetry types\n- Anomaly detection with machine learning\n- Performance profiling with detailed analysis\n- Error tracking with stack trace analysis\n- User behavior tracking with privacy compliance\n- Business metrics with KPI tracking\n- Infrastructure metrics with resource utilization\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll observability operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 15\n- **Functions:** 1\n- **Dependencies:** 28\n\n## Class Hierarchy\n\n- **ObservabilityLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **TelemetryType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **TraceStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **LogLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **EventType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **ObservabilityData**\n  - Methods: 1\n  - Complexity: 12\n- **TraceSpan**\n  - Methods: 5\n  - Complexity: 31\n- **LogEntry**\n  - Methods: 1\n  - Complexity: 19\n- **Event**\n  - Methods: 1\n  - Complexity: 17\n- **ObservabilityConfiguration**\n  - Methods: 0\n  - Complexity: 24\n- **DistributedTracing**\n  - Methods: 9\n  - Complexity: 36\n- **LogAggregation**\n  - Methods: 8\n  - Complexity: 47\n- **EventStreaming**\n  - Methods: 9\n  - Complexity: 42\n- **AnomalyDetection**\n  - Methods: 5\n  - Complexity: 27\n- **ObservabilityManager**\n  - Methods: 13\n  - Complexity: 53\n## Integration Points\n\n- Class: ObservabilityManager\n- Function: create_observability_manager\n- Function: initialize_observability_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.production_metrics_collector",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_metrics_collector.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_metrics_collector\n\nAPI endpoints for independent_core.production_metrics_collector\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //load/config\n\n#### POST //load/config\n\nLoad configuration from file.\n\n**Parameters:**\n\n- **config_path** (query) *required*: str - Parameter: config_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/config?config_path=example_config_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_path\": \"example_config_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //store/aggregations\n\n#### POST //store/aggregations\n\nStore aggregations to storage.\n\n**Parameters:**\n\n- **aggregations** (query) *required*: string - Parameter: aggregations\n- **window** (query) *required*: str - Parameter: window\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//store/aggregations?aggregations=example_aggregations&window=example_window\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//store/aggregations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"aggregations\": \"example_aggregations\",\n    \"window\": \"example_window\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //store/metrics\n\n#### POST //store/metrics\n\nStore metrics to storage.\n\n**Parameters:**\n\n- **metrics** (query) *required*: string - Parameter: metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//store/metrics?metrics=example_metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//store/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"metrics\": \"example_metrics\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /add/metric\n\n#### POST /add/metric\n\nAdd a metric for aggregation.\n\n**Parameters:**\n\n- **metric** (query) *required*: MetricValue - Parameter: metric\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/add/metric?metric=example_metric\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/add/metric\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"metric\": \"example_metric\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /compute/aggregations\n\n#### POST /compute/aggregations\n\nCompute aggregations for a time window.\n\n**Parameters:**\n\n- **window** (query) *required*: str - Parameter: window\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/compute/aggregations?window=example_window\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/compute/aggregations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"window\": \"example_window\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/alert/status\n\n#### GET /get/alert/status\n\nGet status of all alerts.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/alert/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/alert/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/collector/info\n\n#### GET /get/collector/info\n\nGet information about this collector.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/collector/info\n\nGet system collector information.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/collector/info\n\nGet application collector information.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/collector/info\n\nGet business collector information.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/collector/info\n\nAPI endpoint: get_collector_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/collector/info\n\nAPI endpoint: get_collector_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/metric/definitions\n\n#### GET /get/metric/definitions\n\nGet definitions of metrics this collector provides.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metric/definitions\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metric/definitions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/metric/definitions\n\nGet system metric definitions.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metric/definitions\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metric/definitions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/metric/definitions\n\nGet application metric definitions.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metric/definitions\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metric/definitions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/metric/definitions\n\nGet business metric definitions.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metric/definitions\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metric/definitions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/metric/definitions\n\nAPI endpoint: get_metric_definitions\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metric/definitions\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metric/definitions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/metric/definitions\n\nAPI endpoint: get_metric_definitions\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metric/definitions\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metric/definitions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/metrics/status\n\n#### GET /get/metrics/status\n\nGet current metrics system status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metrics/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metrics/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/metrics/summary\n\n#### GET /get/metrics/summary\n\nGet metrics summary statistics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metrics/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metrics/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /remove/alert\n\n#### DELETE /remove/alert\n\nRemove a metric alert.\n\n**Parameters:**\n\n- **metric_name** (query) *required*: str - Parameter: metric_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/alert?metric_name=example_metric_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/alert\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"metric_name\": \"example_metric_name\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /remove/collector\n\n#### DELETE /remove/collector\n\nRemove a metric collector.\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/collector?name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/collector\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_metrics_collector\",\n    \"description\": \"API endpoints for independent_core.production_metrics_collector\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/metric/definitions\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_metric_definitions\",\n        \"description\": \"API endpoint: get_metric_definitions\",\n        \"operationId\": \"get_metric_definitions\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/collector/info\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_collector_info\",\n        \"description\": \"API endpoint: get_collector_info\",\n        \"operationId\": \"get_collector_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"type\": {\n                      \"type\": \"string\"\n                    },\n                    \"integration_type\": {\n                      \"type\": \"string\"\n                    },\n                    \"capabilities\": {\n                      \"type\": \"array\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/add/metric\": {\n      \"post\": {\n        \"summary\": \"Add a metric for aggregation.\",\n        \"description\": \"Add a metric for aggregation.\",\n        \"operationId\": \"add_metric\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"metric\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metric\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MetricValue\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/compute/aggregations\": {\n      \"post\": {\n        \"summary\": \"Compute aggregations for a time window.\",\n        \"description\": \"Compute aggregations for a time window.\",\n        \"operationId\": \"compute_aggregations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"window\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: window\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/remove/alert\": {\n      \"delete\": {\n        \"summary\": \"Remove a metric alert.\",\n        \"description\": \"Remove a metric alert.\",\n        \"operationId\": \"remove_alert\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"metric_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metric_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/alert/status\": {\n      \"get\": {\n        \"summary\": \"Get status of all alerts.\",\n        \"description\": \"Get status of all alerts.\",\n        \"operationId\": \"get_alert_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_alerts\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"enabled_alerts\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"alerts\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//load/config\": {\n      \"post\": {\n        \"summary\": \"Load configuration from file.\",\n        \"description\": \"Load configuration from file.\",\n        \"operationId\": \"_load_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/remove/collector\": {\n      \"delete\": {\n        \"summary\": \"Remove a metric collector.\",\n        \"description\": \"Remove a metric collector.\",\n        \"operationId\": \"remove_collector\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//store/metrics\": {\n      \"post\": {\n        \"summary\": \"Store metrics to storage.\",\n        \"description\": \"Store metrics to storage.\",\n        \"operationId\": \"_store_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"metrics\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//store/aggregations\": {\n      \"post\": {\n        \"summary\": \"Store aggregations to storage.\",\n        \"description\": \"Store aggregations to storage.\",\n        \"operationId\": \"_store_aggregations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"aggregations\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: aggregations\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"window\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: window\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/metrics/status\": {\n      \"get\": {\n        \"summary\": \"Get current metrics system status.\",\n        \"description\": \"Get current metrics system status.\",\n        \"operationId\": \"get_metrics_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"running\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"collection_interval\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"aggregation_interval\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"alert_check_interval\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"storage_path\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"collectors\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metric_definitions_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_metrics_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"alert_status\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/metrics/summary\": {\n      \"get\": {\n        \"summary\": \"Get metrics summary statistics.\",\n        \"description\": \"Get metrics summary statistics.\",\n        \"operationId\": \"get_metrics_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_metrics_collector\n\n## Overview\n\nProduction Metrics Collection and Analysis System\nProvides comprehensive metrics collection, aggregation, analysis, and reporting for production environments.\nNO FALLBACKS - HARD FAILURES ONLY architecture.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_metrics_collector.py`\n\n## Dependencies\n\n- pathlib\n- production_telemetry\n- statistics\n- threading\n- datetime\n- json\n- time\n- numpy\n- enum\n- typing\n- abc\n- hashlib\n- psutil\n- concurrent.futures\n- logging\n- asyncio\n- production_monitoring_system\n- production_config_manager\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 1521\n- **Code Lines:** 1218\n- **Comment Lines:** 77\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "deployment_guide": "\n# independent_core.production_metrics_collector\n\nProduction Metrics Collection and Analysis System\nProvides comprehensive metrics collection, aggregation, analysis, and reporting for production environments.\nNO FALLBACKS - HARD FAILURES ONLY architecture.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_metrics_collector.py\n- **Total Classes:** 17\n- **Total Functions:** 2\n- **Dependencies:** pathlib, production_telemetry, statistics, threading, datetime, json, time, numpy, enum, typing, abc, hashlib, psutil, concurrent.futures, logging, asyncio, production_monitoring_system, production_config_manager, dataclasses, collections, os\n\n## Contents\n**Classes (17):** MetricType, MetricCategory, AggregationType, AlertSeverity, MetricDefinition, MetricValue, MetricAlert, MetricAggregation, MetricCollector, SystemMetricsCollector, ApplicationMetricsCollector, BusinessMetricsCollector, MetricAggregator, MetricAlertManager, MetricsManager, MonitoringMetricsCollector, TelemetryMetricsCollector\n**Functions (2):** integrate_with_monitoring_system, integrate_with_telemetry_system\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: MetricAlertManager\nClass: MetricsManager\nFunction: add_alert_handler\n\n## Examples\ndisk_usage = psutil.disk_usage('/')\n\n\"system.disk.total\": disk_usage.total,\n\n\"system.disk.used\": disk_usage.used,\n\n\"system.disk.free\": disk_usage.free,\n\n\"system.disk.utilization\": (disk_usage.used / disk_usage.total) * 100\n\nif timer_data['samples']:\n\navg_time = statistics.mean(timer_data['samples'])\n\nmetadata={\"unit\": \"seconds\", \"type\": \"timer\", \"sample_count\": len(timer_data['samples'])}\n\nvalue=len(timer_data['samples']),\n\nself.timers[name] = {'samples': deque(maxlen=1000)}\n\nself.timers[name]['samples'].append(duration)\n\n\ndescription=\"Application memory usage percentage\",\n\ndescription=\"Application CPU usage percentage\",\n\n'storage_usage': self._get_storage_usage()\n\ndef _get_storage_usage(self) -> Dict[str, Any]:\n\n\"\"\"Get storage usage statistics.\"\"\"\n\nlogging.error(f\"Failed to get storage usage: {e}\")\n",
        "architecture": "# Architecture: independent_core.production_metrics_collector\n\nProduction Metrics Collection and Analysis System\nProvides comprehensive metrics collection, aggregation, analysis, and reporting for production environments.\nNO FALLBACKS - HARD FAILURES ONLY architecture.\n\n## Components Overview\n\n- **Classes:** 17\n- **Functions:** 2\n- **Dependencies:** 21\n\n## Class Hierarchy\n\n- **MetricType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **MetricCategory** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **AggregationType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 10\n- **AlertSeverity** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **MetricDefinition**\n  - Methods: 1\n  - Complexity: 14\n- **MetricValue**\n  - Methods: 1\n  - Complexity: 10\n- **MetricAlert**\n  - Methods: 1\n  - Complexity: 12\n- **MetricAggregation**\n  - Methods: 1\n  - Complexity: 11\n- **MetricCollector** (inherits from ABC)\n  - Methods: 3\n  - Complexity: 10\n- **SystemMetricsCollector** (inherits from MetricCollector)\n  - Methods: 4\n  - Complexity: 36\n- **ApplicationMetricsCollector** (inherits from MetricCollector)\n  - Methods: 8\n  - Complexity: 37\n- **BusinessMetricsCollector** (inherits from MetricCollector)\n  - Methods: 5\n  - Complexity: 20\n- **MetricAggregator**\n  - Methods: 4\n  - Complexity: 23\n- **MetricAlertManager**\n  - Methods: 7\n  - Complexity: 37\n- **MetricsManager**\n  - Methods: 16\n  - Complexity: 90\n- **MonitoringMetricsCollector** (inherits from MetricCollector)\n  - Methods: 4\n  - Complexity: 18\n- **TelemetryMetricsCollector** (inherits from MetricCollector)\n  - Methods: 4\n  - Complexity: 12\n## Integration Points\n\n- Class: MetricAlertManager\n- Class: MetricsManager\n- Function: add_alert_handler\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.session_management_validation",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/session_management_validation.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.session_management_validation",
        "developer_guide": "# Developer Guide: independent_core.session_management_validation\n\n## Overview\n\nValidation tests for comprehensive training session lifecycle management.\nThese tests demonstrate that all requirements have been implemented.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/session_management_validation.py`\n\n## Dependencies\n\n- pathlib\n- brain_training_integration\n- numpy\n- os\n- sys\n- json\n- brain\n- training_manager\n- traceback\n- threading\n- datetime\n- training_session_management\n- time\n\n## Code Structure\n\n- **Total Lines:** 668\n- **Code Lines:** 443\n- **Comment Lines:** 87\n\n## Complexity Indicators\n\n- Concurrency\n\n",
        "architecture": "# Architecture: independent_core.session_management_validation\n\nValidation tests for comprehensive training session lifecycle management.\nThese tests demonstrate that all requirements have been implemented.\n\n## Components Overview\n\n- **Classes:** 0\n- **Functions:** 12\n- **Dependencies:** 13\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.domain_compression_coordinator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/domain_compression_coordinator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.domain_compression_coordinator\n\nAPI endpoints for independent_core.domain_compression_coordinator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/coordinator/status\n\n#### GET /get/coordinator/status\n\nGet current coordinator status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/coordinator/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/coordinator/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/domain/compression/analytics\n\n#### GET /get/domain/compression/analytics\n\nGet comprehensive domain-compression analytics.\n\nArgs:\n    domain_name: Optional specific domain for detailed analytics\n    \nReturns:\n    Domain compression analytics results\n    \nRaises:\n    ValueError: If domain name is invalid\n    RuntimeError: If analytics retrieval fails\n\n**Parameters:**\n\n- **domain_name** (query) *required*: string - Optional specific domain for detailed analytics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/compression/analytics?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/compression/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.domain_compression_coordinator\",\n    \"description\": \"API endpoints for independent_core.domain_compression_coordinator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/domain/compression/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive domain-compression analytics.\\n\\nArgs:\\n    domain_name: Optional specific domain for detailed analytics\\n    \\nReturns:\\n    Domain compression analytics results\\n    \\nRaises:\\n    ValueError: If domain name is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"description\": \"Get comprehensive domain-compression analytics.\\n\\nArgs:\\n    domain_name: Optional specific domain for detailed analytics\\n    \\nReturns:\\n    Domain compression analytics results\\n    \\nRaises:\\n    ValueError: If domain name is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"operationId\": \"get_domain_compression_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific domain for detailed analytics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"global_analytics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_operations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"coordination_history\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_resource_allocations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_compression_strategies\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance_baselines\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_history\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"coordination_trends\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_recommendations\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/coordinator/status\": {\n      \"get\": {\n        \"summary\": \"Get current coordinator status\",\n        \"description\": \"Get current coordinator status\",\n        \"operationId\": \"get_coordinator_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"coordination_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"resource_monitoring_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"coordination_mode\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_operations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domains_coordinated\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_resource_allocations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_compression_strategies\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_performance\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.domain_compression_coordinator\n\n## Overview\n\nDomain Compression Coordinator - Coordination between domains and compression operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/domain_compression_coordinator.py`\n\n## Dependencies\n\n- gc\n- threading\n- json\n- datetime\n- time\n- numpy\n- enum\n- torch\n- compression_systems.padic.hybrid_padic_compressor\n- compression_systems.padic.dynamic_switching_manager\n- pynvml\n- typing\n- psutil\n- domain_registry\n- compression_systems.padic.direction_manager\n- logging\n- domain_router\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1573\n- **Code Lines:** 1195\n- **Comment Lines:** 118\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.domain_compression_coordinator\n\nDomain Compression Coordinator - Coordination between domains and compression operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 19\n\n## Class Hierarchy\n\n- **DomainCoordinationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **DomainCompressionPriority** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **DomainResourceStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **DomainCompressionCoordinatorConfig**\n  - Methods: 1\n  - Complexity: 27\n- **DomainCompressionOperation**\n  - Methods: 1\n  - Complexity: 27\n- **DomainCompressionAnalytics**\n  - Methods: 0\n  - Complexity: 28\n- **DomainCompressionCoordinator**\n  - Methods: 46\n  - Complexity: 237\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.training_compression_coordinator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/training_compression_coordinator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.training_compression_coordinator\n\nAPI endpoints for independent_core.training_compression_coordinator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/coordination/analytics\n\n#### GET /get/coordination/analytics\n\nGet comprehensive coordination analytics.\n\nArgs:\n    session_id: Optional specific session ID for detailed analytics\n    \nReturns:\n    Coordination analytics results\n    \nRaises:\n    ValueError: If session ID is invalid\n    RuntimeError: If analytics retrieval fails\n\n**Parameters:**\n\n- **session_id** (query) *required*: integer - Optional specific session ID for detailed analytics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/coordination/analytics?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/coordination/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/coordination/status\n\n#### GET /get/coordination/status\n\nGet current coordination status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/coordination/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/coordination/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.training_compression_coordinator\",\n    \"description\": \"API endpoints for independent_core.training_compression_coordinator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/coordination/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive coordination analytics.\\n\\nArgs:\\n    session_id: Optional specific session ID for detailed analytics\\n    \\nReturns:\\n    Coordination analytics results\\n    \\nRaises:\\n    ValueError: If session ID is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"description\": \"Get comprehensive coordination analytics.\\n\\nArgs:\\n    session_id: Optional specific session ID for detailed analytics\\n    \\nReturns:\\n    Coordination analytics results\\n    \\nRaises:\\n    ValueError: If session ID is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"operationId\": \"get_coordination_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific session ID for detailed analytics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"global_analytics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_operations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"coordination_history\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"resource_allocation\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance_baselines\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_history\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"coordination_trends\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_recommendations\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/coordination/status\": {\n      \"get\": {\n        \"summary\": \"Get current coordination status\",\n        \"description\": \"Get current coordination status\",\n        \"operationId\": \"get_coordination_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"coordination_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"resource_monitoring_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"coordination_mode\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_operations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"resource_allocation\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_performance\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.training_compression_coordinator\n\n## Overview\n\nTraining Compression Coordinator - Coordination between training and compression operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/training_compression_coordinator.py`\n\n## Dependencies\n\n- numpy\n- json\n- logging\n- compression_systems.padic.direction_manager\n- psutil\n- enum\n- typing\n- training_manager\n- torch\n- compression_systems.padic.hybrid_padic_compressor\n- gc\n- compression_systems.padic.dynamic_switching_manager\n- threading\n- dataclasses\n- datetime\n- pynvml\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1429\n- **Code Lines:** 1082\n- **Comment Lines:** 104\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.training_compression_coordinator\n\nTraining Compression Coordinator - Coordination between training and compression operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 18\n\n## Class Hierarchy\n\n- **CoordinationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **CompressionPriority** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **ResourceAllocationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **TrainingCompressionCoordinatorConfig**\n  - Methods: 1\n  - Complexity: 29\n- **CoordinationOperation**\n  - Methods: 1\n  - Complexity: 25\n- **CoordinationAnalytics**\n  - Methods: 0\n  - Complexity: 23\n- **TrainingCompressionCoordinator**\n  - Methods: 48\n  - Complexity: 222\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.production_security_config",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_config.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_security_config\n\nAPI endpoints for independent_core.production_security_config\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //load/security/configurations\n\n#### POST //load/security/configurations\n\nLoad existing security configurations.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/security/configurations\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/security/configurations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //log/security/event\n\n#### POST //log/security/event\n\nLog security event.\n\n**Parameters:**\n\n- **event** (query) *required*: string - Parameter: event\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//log/security/event?event=example_event\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//log/security/event\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"event\": \"example_event\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //save/authentication/config\n\n#### POST //save/authentication/config\n\nSave authentication configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/authentication/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/authentication/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/authorization/config\n\n#### POST //save/authorization/config\n\nSave authorization configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/authorization/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/authorization/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/encryption/config\n\n#### POST //save/encryption/config\n\nSave encryption configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/encryption/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/encryption/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/network/security/config\n\n#### POST //save/network/security/config\n\nSave network security configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/network/security/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/network/security/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/security/policy\n\n#### POST //save/security/policy\n\nSave security policy.\n\n**Parameters:**\n\n- **policy** (query) *required*: SecurityPolicy - Parameter: policy\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/security/policy?policy=example_policy\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/security/policy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"policy\": \"example_policy\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/security/config/manager\n\n#### POST /create/security/config/manager\n\nFactory function to create a SecurityConfigManager instance.\n\n**Parameters:**\n\n- **config_dir** (query) *required*: str - Parameter: config_dir\n- **security_level** (query) *required*: SecurityLevel - Parameter: security_level\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/security/config/manager?config_dir=example_config_dir&security_level=example_security_level\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/security/config/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_dir\": \"example_config_dir\",\n    \"security_level\": \"example_security_level\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/security/policy\n\n#### POST /create/security/policy\n\nCreate security policy.\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n- **rules** (query) *required*: string - Parameter: rules\n- **description** (query) *required*: str - Parameter: description\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/security/policy?name=example_name&rules=example_rules&description=example_description\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/security/policy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n    \"rules\": \"example_rules\",\n    \"description\": \"example_description\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /delete/key\n\n#### DELETE /delete/key\n\nDelete key.\n\n**Parameters:**\n\n- **key_name** (query) *required*: str - Parameter: key_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/delete/key?key_name=example_key_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/delete/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key_name\": \"example_key_name\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/certificate/info\n\n#### GET /get/certificate/info\n\nGet certificate information.\n\n**Parameters:**\n\n- **cert_path** (query) *required*: str - Parameter: cert_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/certificate/info?cert_path=example_cert_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/certificate/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"cert_path\": \"example_cert_path\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/key\n\n#### GET /get/key\n\nGet key by name.\n\n**Parameters:**\n\n- **key_name** (query) *required*: str - Parameter: key_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/key?key_name=example_key_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key_name\": \"example_key_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/security/status\n\n#### GET /get/security/status\n\nGet current security status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/security/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/security/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_security_config\",\n    \"description\": \"API endpoints for independent_core.production_security_config\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/security/config/manager\": {\n      \"post\": {\n        \"summary\": \"Factory function to create a SecurityConfigManager instance.\",\n        \"description\": \"Factory function to create a SecurityConfigManager instance.\",\n        \"operationId\": \"create_security_config_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_dir\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_dir\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"security_level\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: security_level\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SecurityLevel\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/certificate/info\": {\n      \"get\": {\n        \"summary\": \"Get certificate information.\",\n        \"description\": \"Get certificate information.\",\n        \"operationId\": \"get_certificate_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"cert_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: cert_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"subject\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"issuer\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"serial_number\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"not_valid_before\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"not_valid_after\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"public_key_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"signature_algorithm\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"is_expired\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/key\": {\n      \"get\": {\n        \"summary\": \"Get key by name.\",\n        \"description\": \"Get key by name.\",\n        \"operationId\": \"get_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/delete/key\": {\n      \"delete\": {\n        \"summary\": \"Delete key.\",\n        \"description\": \"Delete key.\",\n        \"operationId\": \"delete_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/security/policy\": {\n      \"post\": {\n        \"summary\": \"Create security policy.\",\n        \"description\": \"Create security policy.\",\n        \"operationId\": \"create_security_policy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"rules\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: rules\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"description\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: description\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/security/status\": {\n      \"get\": {\n        \"summary\": \"Get current security status.\",\n        \"description\": \"Get current security status.\",\n        \"operationId\": \"get_security_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"security_level\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"authentication_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"authorization_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"encryption_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"network_security_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"audit_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_policies\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"key_rotation_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_events\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_violations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"certificates_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"keys_count\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//load/security/configurations\": {\n      \"post\": {\n        \"summary\": \"Load existing security configurations.\",\n        \"description\": \"Load existing security configurations.\",\n        \"operationId\": \"_load_security_configurations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/authentication/config\": {\n      \"post\": {\n        \"summary\": \"Save authentication configuration.\",\n        \"description\": \"Save authentication configuration.\",\n        \"operationId\": \"_save_authentication_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/authorization/config\": {\n      \"post\": {\n        \"summary\": \"Save authorization configuration.\",\n        \"description\": \"Save authorization configuration.\",\n        \"operationId\": \"_save_authorization_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/encryption/config\": {\n      \"post\": {\n        \"summary\": \"Save encryption configuration.\",\n        \"description\": \"Save encryption configuration.\",\n        \"operationId\": \"_save_encryption_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/network/security/config\": {\n      \"post\": {\n        \"summary\": \"Save network security configuration.\",\n        \"description\": \"Save network security configuration.\",\n        \"operationId\": \"_save_network_security_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/security/policy\": {\n      \"post\": {\n        \"summary\": \"Save security policy.\",\n        \"description\": \"Save security policy.\",\n        \"operationId\": \"_save_security_policy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"policy\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: policy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SecurityPolicy\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//log/security/event\": {\n      \"post\": {\n        \"summary\": \"Log security event.\",\n        \"description\": \"Log security event.\",\n        \"operationId\": \"_log_security_event\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"event\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: event\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_security_config\n\n## Overview\n\nProduction Security Configuration - Production security configuration and management\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security configuration and management\ncapabilities, including authentication, authorization, encryption, network security,\ncertificate management, key rotation, security auditing, and compliance checking.\n\nKey Features:\n- Multi-level security configuration (BASIC, STANDARD, ENHANCED, MAXIMUM)\n- Comprehensive authentication and authorization management\n- Advanced encryption configuration and key management\n- Network security configuration and monitoring\n- Certificate management with automatic renewal\n- Security auditing and compliance reporting\n- Key rotation and lifecycle management\n- Security policy enforcement and validation\n- Integration with existing production configuration systems\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_config.py`\n\n## Dependencies\n\n- pathlib\n- socket\n- production_deployment_config\n- cryptography\n- cryptography.hazmat.backends\n- threading\n- datetime\n- json\n- time\n- contextlib\n- cryptography.x509.oid\n- yaml\n- enum\n- copy\n- uuid\n- traceback\n- cryptography.hazmat.primitives\n- gac_system.gac_config\n- typing\n- bcrypt\n- tempfile\n- hashlib\n- jwt\n- ssl\n- secrets\n- cryptography.hazmat.primitives.kdf.pbkdf2\n- logging\n- cryptography.fernet\n- production_config_manager\n- base64\n- cryptography.hazmat.primitives.asymmetric\n- dataclasses\n- os\n\n## Code Structure\n\n- **Total Lines:** 1524\n- **Code Lines:** 1116\n- **Comment Lines:** 117\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "configuration_guide": "\n# independent_core.production_security_config\n\nProduction Security Configuration - Production security configuration and management\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security configuration and management\ncapabilities, including authentication, authorization, encryption, network security,\ncertificate management, key rotation, security auditing, and compliance checking.\n\nKey Features:\n- Multi-level security configuration (BASIC, STANDARD, ENHANCED, MAXIMUM)\n- Comprehensive authentication and authorization management\n- Advanced encryption configuration and key management\n- Network security configuration and monitoring\n- Certificate management with automatic renewal\n- Security auditing and compliance reporting\n- Key rotation and lifecycle management\n- Security policy enforcement and validation\n- Integration with existing production configuration systems\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_config.py\n- **Total Classes:** 16\n- **Total Functions:** 1\n- **Dependencies:** pathlib, socket, production_deployment_config, cryptography, cryptography.hazmat.backends, threading, datetime, json, time, contextlib, cryptography.x509.oid, yaml, enum, copy, uuid, traceback, cryptography.hazmat.primitives, gac_system.gac_config, typing, bcrypt, tempfile, hashlib, jwt, ssl, secrets, cryptography.hazmat.primitives.kdf.pbkdf2, logging, cryptography.fernet, production_config_manager, base64, cryptography.hazmat.primitives.asymmetric, dataclasses, os\n\n## Contents\n**Classes (16):** SecurityLevel, AuthenticationType, AuthorizationModel, EncryptionAlgorithm, SecurityAuditLevel, ComplianceStandard, AuthenticationConfig, AuthorizationConfig, EncryptionConfig, NetworkSecurityConfig, AuditConfig, SecurityPolicy, CertificateManager, KeyManager, SecurityValidator, SecurityConfigManager\n**Functions (1):** create_security_config_manager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: CertificateManager\nClass: KeyManager\nClass: SecurityConfigManager\nFunction: create_security_config_manager\nFunction: initialize_security_config_manager\n\n## Examples\n# Example usage\n\n# Initialize with sample settings\n",
        "security_guide": "\n# independent_core.production_security_config\n\nProduction Security Configuration - Production security configuration and management\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security configuration and management\ncapabilities, including authentication, authorization, encryption, network security,\ncertificate management, key rotation, security auditing, and compliance checking.\n\nKey Features:\n- Multi-level security configuration (BASIC, STANDARD, ENHANCED, MAXIMUM)\n- Comprehensive authentication and authorization management\n- Advanced encryption configuration and key management\n- Network security configuration and monitoring\n- Certificate management with automatic renewal\n- Security auditing and compliance reporting\n- Key rotation and lifecycle management\n- Security policy enforcement and validation\n- Integration with existing production configuration systems\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_config.py\n- **Total Classes:** 16\n- **Total Functions:** 1\n- **Dependencies:** pathlib, socket, production_deployment_config, cryptography, cryptography.hazmat.backends, threading, datetime, json, time, contextlib, cryptography.x509.oid, yaml, enum, copy, uuid, traceback, cryptography.hazmat.primitives, gac_system.gac_config, typing, bcrypt, tempfile, hashlib, jwt, ssl, secrets, cryptography.hazmat.primitives.kdf.pbkdf2, logging, cryptography.fernet, production_config_manager, base64, cryptography.hazmat.primitives.asymmetric, dataclasses, os\n\n## Contents\n**Classes (16):** SecurityLevel, AuthenticationType, AuthorizationModel, EncryptionAlgorithm, SecurityAuditLevel, ComplianceStandard, AuthenticationConfig, AuthorizationConfig, EncryptionConfig, NetworkSecurityConfig, AuditConfig, SecurityPolicy, CertificateManager, KeyManager, SecurityValidator, SecurityConfigManager\n**Functions (1):** create_security_config_manager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: CertificateManager\nClass: KeyManager\nClass: SecurityConfigManager\nFunction: create_security_config_manager\nFunction: initialize_security_config_manager\n\n## Examples\n# Example usage\n\n# Initialize with sample settings\n",
        "deployment_guide": "\n# independent_core.production_security_config\n\nProduction Security Configuration - Production security configuration and management\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security configuration and management\ncapabilities, including authentication, authorization, encryption, network security,\ncertificate management, key rotation, security auditing, and compliance checking.\n\nKey Features:\n- Multi-level security configuration (BASIC, STANDARD, ENHANCED, MAXIMUM)\n- Comprehensive authentication and authorization management\n- Advanced encryption configuration and key management\n- Network security configuration and monitoring\n- Certificate management with automatic renewal\n- Security auditing and compliance reporting\n- Key rotation and lifecycle management\n- Security policy enforcement and validation\n- Integration with existing production configuration systems\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_config.py\n- **Total Classes:** 16\n- **Total Functions:** 1\n- **Dependencies:** pathlib, socket, production_deployment_config, cryptography, cryptography.hazmat.backends, threading, datetime, json, time, contextlib, cryptography.x509.oid, yaml, enum, copy, uuid, traceback, cryptography.hazmat.primitives, gac_system.gac_config, typing, bcrypt, tempfile, hashlib, jwt, ssl, secrets, cryptography.hazmat.primitives.kdf.pbkdf2, logging, cryptography.fernet, production_config_manager, base64, cryptography.hazmat.primitives.asymmetric, dataclasses, os\n\n## Contents\n**Classes (16):** SecurityLevel, AuthenticationType, AuthorizationModel, EncryptionAlgorithm, SecurityAuditLevel, ComplianceStandard, AuthenticationConfig, AuthorizationConfig, EncryptionConfig, NetworkSecurityConfig, AuditConfig, SecurityPolicy, CertificateManager, KeyManager, SecurityValidator, SecurityConfigManager\n**Functions (1):** create_security_config_manager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: CertificateManager\nClass: KeyManager\nClass: SecurityConfigManager\nFunction: create_security_config_manager\nFunction: initialize_security_config_manager\n\n## Examples\n# Example usage\n\n# Initialize with sample settings\n",
        "architecture": "# Architecture: independent_core.production_security_config\n\nProduction Security Configuration - Production security configuration and management\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security configuration and management\ncapabilities, including authentication, authorization, encryption, network security,\ncertificate management, key rotation, security auditing, and compliance checking.\n\nKey Features:\n- Multi-level security configuration (BASIC, STANDARD, ENHANCED, MAXIMUM)\n- Comprehensive authentication and authorization management\n- Advanced encryption configuration and key management\n- Network security configuration and monitoring\n- Certificate management with automatic renewal\n- Security auditing and compliance reporting\n- Key rotation and lifecycle management\n- Security policy enforcement and validation\n- Integration with existing production configuration systems\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 16\n- **Functions:** 1\n- **Dependencies:** 33\n\n## Class Hierarchy\n\n- **SecurityLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **AuthenticationType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 10\n- **AuthorizationModel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **EncryptionAlgorithm** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **SecurityAuditLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **ComplianceStandard** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **AuthenticationConfig**\n  - Methods: 0\n  - Complexity: 46\n- **AuthorizationConfig**\n  - Methods: 0\n  - Complexity: 21\n- **EncryptionConfig**\n  - Methods: 0\n  - Complexity: 26\n- **NetworkSecurityConfig**\n  - Methods: 0\n  - Complexity: 37\n- **AuditConfig**\n  - Methods: 0\n  - Complexity: 30\n- **SecurityPolicy**\n  - Methods: 0\n  - Complexity: 15\n- **CertificateManager**\n  - Methods: 4\n  - Complexity: 16\n- **KeyManager**\n  - Methods: 5\n  - Complexity: 25\n- **SecurityValidator**\n  - Methods: 4\n  - Complexity: 40\n- **SecurityConfigManager**\n  - Methods: 38\n  - Complexity: 201\n## Integration Points\n\n- Class: CertificateManager\n- Class: KeyManager\n- Class: SecurityConfigManager\n- Function: create_security_config_manager\n- Function: initialize_security_config_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "configuration_guide missing required section: Overview",
        "configuration_guide missing required section: Details",
        "security_guide missing required section: Overview",
        "security_guide missing required section: Details",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.brain_training_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/brain_training_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.brain_training_integration\n\nAPI endpoints for independent_core.brain_training_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/model/with/device\n\n#### POST /create/model/with/device\n\nCreate a PyTorch model and place it on the specified device with error handling.\n\nArgs:\n    input_size: Input layer size\n    hidden_layers: List of hidden layer sizes\n    output_size: Output layer size\n    device_str: Target device ('cuda' or 'cpu')\n    \nReturns:\n    Tuple of (model, actual_device_used, device_info)\n\n**Parameters:**\n\n- **input_size** (query) *required*: int - Input layer size\n- **hidden_layers** (query) *required*: string - List of hidden layer sizes\n- **output_size** (query) *required*: int - Output layer size\n- **device_str** (query) *required*: str - Target device ('cuda' or 'cpu')\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/model/with/device?input_size=example_input_size&hidden_layers=example_hidden_layers&output_size=example_output_size&device_str=example_device_str\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/model/with/device\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_size\": \"example_input_size\",\n    \"hidden_layers\": \"example_hidden_layers\",\n    \"output_size\": \"example_output_size\",\n    \"device_str\": \"example_device_str\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/training/session\n\n#### POST /create/training/session\n\nCreate a new training session with full lifecycle management.\n\nArgs:\n    domain_name: Name of the domain to train\n    training_config: Training configuration (dict or TrainingConfig)\n    session_name: Optional human-readable session name\n    \nReturns:\n    Session ID for the created session\n    \nRaises:\n    RuntimeError: If domain not found or session creation fails\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain to train\n- **training_config** (query) *required*: string - Training configuration (dict or TrainingConfig)\n- **session_name** (query) *required*: string - Optional human-readable session name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/training/session?domain_name=example_domain_name&training_config=example_training_config&session_name=example_session_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/training/session\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"training_config\": \"example_training_config\",\n    \"session_name\": \"example_session_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/optimal/device\n\n#### GET /get/optimal/device\n\nGet the optimal device for training with comprehensive CUDA testing.\nEnhanced to handle newer GPU architectures and provide better fallback.\n\nReturns:\n    Tuple of (device_string, device_info_dict)\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimal/device\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimal/device\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/session/checkpoints\n\n#### GET /get/session/checkpoints\n\nGet checkpoints for a training session.\n\nArgs:\n    session_id: ID of the session\n    \nReturns:\n    List of checkpoint information\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - ID of the session\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/session/checkpoints?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/session/checkpoints\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/training/device/info\n\n#### GET /get/training/device/info\n\nGet comprehensive information about available training devices.\n\nReturns:\n    Dictionary with device capabilities and status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/device/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/device/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/training/session/status\n\n#### GET /get/training/session/status\n\nGet comprehensive status of a training session.\n\nArgs:\n    session_id: ID of the session\n    \nReturns:\n    Dictionary with session status information\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - ID of the session\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/session/status?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/session/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.brain_training_integration\",\n    \"description\": \"API endpoints for independent_core.brain_training_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/optimal/device\": {\n      \"get\": {\n        \"summary\": \"Get the optimal device for training with comprehensive CUDA testing.\\nEnhanced to handle newer GPU architectures and provide better fallback.\\n\\nReturns:\\n    Tuple of (device_string, device_info_dict)\",\n        \"description\": \"Get the optimal device for training with comprehensive CUDA testing.\\nEnhanced to handle newer GPU architectures and provide better fallback.\\n\\nReturns:\\n    Tuple of (device_string, device_info_dict)\",\n        \"operationId\": \"get_optimal_device\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/model/with/device\": {\n      \"post\": {\n        \"summary\": \"Create a PyTorch model and place it on the specified device with error handling.\\n\\nArgs:\\n    input_size: Input layer size\\n    hidden_layers: List of hidden layer sizes\\n    output_size: Output layer size\\n    device_str: Target device ('cuda' or 'cpu')\\n    \\nReturns:\\n    Tuple of (model, actual_device_used, device_info)\",\n        \"description\": \"Create a PyTorch model and place it on the specified device with error handling.\\n\\nArgs:\\n    input_size: Input layer size\\n    hidden_layers: List of hidden layer sizes\\n    output_size: Output layer size\\n    device_str: Target device ('cuda' or 'cpu')\\n    \\nReturns:\\n    Tuple of (model, actual_device_used, device_info)\",\n        \"operationId\": \"create_model_with_device\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_size\",\n            \"in\": \"query\",\n            \"description\": \"Input layer size\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"hidden_layers\",\n            \"in\": \"query\",\n            \"description\": \"List of hidden layer sizes\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"output_size\",\n            \"in\": \"query\",\n            \"description\": \"Output layer size\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"device_str\",\n            \"in\": \"query\",\n            \"description\": \"Target device ('cuda' or 'cpu')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/training/device/info\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive information about available training devices.\\n\\nReturns:\\n    Dictionary with device capabilities and status\",\n        \"description\": \"Get comprehensive information about available training devices.\\n\\nReturns:\\n    Dictionary with device capabilities and status\",\n        \"operationId\": \"get_training_device_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/training/session\": {\n      \"post\": {\n        \"summary\": \"Create a new training session with full lifecycle management.\\n\\nArgs:\\n    domain_name: Name of the domain to train\\n    training_config: Training configuration (dict or TrainingConfig)\\n    session_name: Optional human-readable session name\\n    \\nReturns:\\n    Session ID for the created session\\n    \\nRaises:\\n    RuntimeError: If domain not found or session creation fails\",\n        \"description\": \"Create a new training session with full lifecycle management.\\n\\nArgs:\\n    domain_name: Name of the domain to train\\n    training_config: Training configuration (dict or TrainingConfig)\\n    session_name: Optional human-readable session name\\n    \\nReturns:\\n    Session ID for the created session\\n    \\nRaises:\\n    RuntimeError: If domain not found or session creation fails\",\n        \"operationId\": \"create_training_session\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain to train\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"training_config\",\n            \"in\": \"query\",\n            \"description\": \"Training configuration (dict or TrainingConfig)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"session_name\",\n            \"in\": \"query\",\n            \"description\": \"Optional human-readable session name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/training/session/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive status of a training session.\\n\\nArgs:\\n    session_id: ID of the session\\n    \\nReturns:\\n    Dictionary with session status information\",\n        \"description\": \"Get comprehensive status of a training session.\\n\\nArgs:\\n    session_id: ID of the session\\n    \\nReturns:\\n    Dictionary with session status information\",\n        \"operationId\": \"get_training_session_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"ID of the session\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/session/checkpoints\": {\n      \"get\": {\n        \"summary\": \"Get checkpoints for a training session.\\n\\nArgs:\\n    session_id: ID of the session\\n    \\nReturns:\\n    List of checkpoint information\",\n        \"description\": \"Get checkpoints for a training session.\\n\\nArgs:\\n    session_id: ID of the session\\n    \\nReturns:\\n    List of checkpoint information\",\n        \"operationId\": \"get_session_checkpoints\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"ID of the session\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.brain_training_integration\n\n## Overview\n\nBrain Training Integration with Enhanced Session Management\nProvides Brain class methods for comprehensive training session lifecycle management.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/brain_training_integration.py`\n\n## Dependencies\n\n- pathlib\n- domain_registry\n- torch.utils.data\n- numpy\n- brain\n- logging\n- typing\n- training_manager\n- traceback\n- torch\n- torch.nn\n- torch.optim\n- datetime\n- training_session_management\n- time\n\n## Code Structure\n\n- **Total Lines:** 1651\n- **Code Lines:** 1221\n- **Comment Lines:** 157\n\n## Complexity Indicators\n\n- High function count\n\n",
        "integration_guide": "\n# independent_core.brain_training_integration\n\nBrain Training Integration with Enhanced Session Management\nProvides Brain class methods for comprehensive training session lifecycle management.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/brain_training_integration.py\n- **Total Classes:** 1\n- **Total Functions:** 22\n- **Dependencies:** pathlib, domain_registry, torch.utils.data, numpy, brain, logging, typing, training_manager, traceback, torch, torch.nn, torch.optim, datetime, training_session_management, time\n\n## Contents\n**Classes (1):** BrainTrainingManagerProxy\n**Functions (22):** get_optimal_device, create_model_with_device, execute_training_with_device_fallback, get_training_device_info, enable_enhanced_training, initialize_enhanced_training, create_training_session, start_training_session, pause_training_session, resume_training_session, stop_training_session, recover_training_session, get_training_session_status, list_training_sessions, get_session_checkpoints, cleanup_training_session, enhanced_train_domain, _execute_session_training, _execute_pytorch_training, auto_enhance_brain_training_manager, integrate_enhanced_training_with_brain, enhanced_init\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: BrainTrainingManagerProxy\nFunction: auto_enhance_brain_training_manager\nFunction: _create_session_bridge\n\n## Examples\nsamples_processed=epoch_num * len(dataset)\n",
        "architecture": "# Architecture: independent_core.brain_training_integration\n\nBrain Training Integration with Enhanced Session Management\nProvides Brain class methods for comprehensive training session lifecycle management.\n\n## Components Overview\n\n- **Classes:** 1\n- **Functions:** 22\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **BrainTrainingManagerProxy**\n  - Methods: 6\n  - Complexity: 41\n## Integration Points\n\n- Class: BrainTrainingManagerProxy\n- Function: auto_enhance_brain_training_manager\n- Function: _create_session_bridge\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_performance_optimization",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_performance_optimization.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.test_performance_optimization",
        "developer_guide": "# Developer Guide: independent_core.test_performance_optimization\n\n## Overview\n\nComprehensive tests for performance optimization components.\nTests PerformanceOptimizer, MemoryOptimizer, and GeneralGPUMemoryOptimizer.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_performance_optimization.py`\n\n## Dependencies\n\n- pytest\n- logging\n- typing\n- memory_optimizer\n- torch\n- performance_optimizer\n- gc\n- psutil\n- threading\n- gpu_memory_optimizer\n- unittest.mock\n- time\n\n## Code Structure\n\n- **Total Lines:** 858\n- **Code Lines:** 623\n- **Comment Lines:** 49\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.test_performance_optimization\n\nComprehensive tests for performance optimization components.\nTests PerformanceOptimizer, MemoryOptimizer, and GeneralGPUMemoryOptimizer.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/test_performance_optimization.py\n- **Total Classes:** 4\n- **Total Functions:** 11\n- **Dependencies:** pytest, logging, typing, memory_optimizer, torch, performance_optimizer, gc, psutil, threading, gpu_memory_optimizer, unittest.mock, time\n\n## Contents\n**Classes (4):** TestPerformanceOptimizer, TestMemoryOptimizer, TestGeneralGPUMemoryOptimizer, TestPerformanceOptimizationIntegration\n**Functions (11):** test_performance_optimizer_basic, test_memory_optimizer_basic, test_gpu_memory_optimizer_basic, test_function, test_operation, dummy_func, failing_operation, test_hook, slow_operation, cpu_intensive_task, worker_task\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: test_track_memory_usage_context_manager\n\n## Examples\ndef test_track_memory_usage_context_manager(self):\n\"\"\"Test memory tracking context manager\"\"\"\n\ninitial_memory = len(self.optimizer.component_memory_usage)\n\n\nwith self.optimizer.track_memory_usage(\"test_component\") as tracking_data:\n\n# Simulate some memory usage\n\n# Memory usage should be tracked\n\nassert \"test_component\" in self.optimizer.component_memory_usage\n\nassert len(self.optimizer.component_memory_usage[\"test_component\"]) == 1\n\n\nusage_record = self.optimizer.component_memory_usage[\"test_component\"][0]\n\nassert 'timestamp' in usage_record\n\nassert 'memory_delta' in usage_record\n\nassert 'duration' in usage_record\n\n\ndef test_track_memory_usage_invalid_component_name(self):\n\"\"\"Test memory tracking fails with invalid component name\"\"\"\n\nwith self.optimizer.track_memory_usage(123):\n\nwith self.optimizer.track_memory_usage(\"\"):\n\ndef test_track_memory_usage_disabled(self):\n\"\"\"Test memory tracking when disabled\"\"\"\n\nwith self.optimizer.track_memory_usage(\"disabled_test\") as tracking_data:\n\nassert \"disabled_test\" not in self.optimizer.component_memory_usage\n\n\n# Add minimal usage data\n\nwith self.optimizer.track_memory_usage(\"minimal_component\"):\n\ndef test_optimize_memory_usage(self):\n\n\"\"\"Test memory usage optimization\"\"\"\n# Generate some tracking data first\n\nwith self.optimizer.track_memory_usage(f\"opt_test_{i}\"):\n\n# Simulate memory usage\n\nresult = self.optimizer.optimize_memory_usage()\n\n\nwith self.optimizer.track_memory_usage(\"report_component\"):\n\nassert 'usage_percent' in system_memory\n\n# Check component summary\n\n# Generate some memory usage\n\nwith self.memory_optimizer.track_memory_usage(\"integration_test\"):\n\nmemory_result = self.memory_optimizer.optimize_memory_usage()\n\n\nwith self.memory_optimizer.track_memory_usage(\"report_memory\"):\n\nwith self.memory_optimizer.track_memory_usage(f\"worker_memory_{worker_id}\"):\n\nassert len(self.memory_optimizer.component_memory_usage) == 5\n\n\n\nwith optimizer.track_memory_usage(\"basic_memory_test\"):\n\nassert \"basic_memory_test\" in optimizer.component_memory_usage\n\nassert len(optimizer.component_memory_usage[\"basic_memory_test\"]) == 1\n\n# Test optimization\n\nresult = optimizer.optimize_memory_usage()\n",
        "architecture": "# Architecture: independent_core.test_performance_optimization\n\nComprehensive tests for performance optimization components.\nTests PerformanceOptimizer, MemoryOptimizer, and GeneralGPUMemoryOptimizer.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 11\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **TestPerformanceOptimizer**\n  - Methods: 17\n  - Complexity: 66\n- **TestMemoryOptimizer**\n  - Methods: 18\n  - Complexity: 62\n- **TestGeneralGPUMemoryOptimizer**\n  - Methods: 17\n  - Complexity: 62\n- **TestPerformanceOptimizationIntegration**\n  - Methods: 4\n  - Complexity: 22\n## Integration Points\n\n- Function: test_track_memory_usage_context_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.brain_system_examples",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/brain_system_examples.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.brain_system_examples\n\nAPI endpoints for independent_core.brain_system_examples\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /advanced/features/demo\n\n#### POST /advanced/features/demo\n\nBonus: Demonstrate advanced Brain features.\n\n**Parameters:**\n\n- **brain** (query) *required*: Brain - Parameter: brain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/advanced/features/demo?brain=example_brain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/advanced/features/demo\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain\": \"example_brain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /brain/persistence/example\n\n#### POST /brain/persistence/example\n\nExample 5: Saving and loading Brain state.\n\n**Parameters:**\n\n- **brain** (query) *required*: Brain - Parameter: brain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/brain/persistence/example?brain=example_brain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/brain/persistence/example\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain\": \"example_brain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.brain_system_examples\",\n    \"description\": \"API endpoints for independent_core.brain_system_examples\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/brain/persistence/example\": {\n      \"post\": {\n        \"summary\": \"Example 5: Saving and loading Brain state.\",\n        \"description\": \"Example 5: Saving and loading Brain state.\",\n        \"operationId\": \"brain_persistence_example\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: brain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Brain\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/advanced/features/demo\": {\n      \"post\": {\n        \"summary\": \"Bonus: Demonstrate advanced Brain features.\",\n        \"description\": \"Bonus: Demonstrate advanced Brain features.\",\n        \"operationId\": \"advanced_features_demo\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: brain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Brain\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.brain_system_examples\n\n## Overview\n\nBrain System Usage Examples\n===========================\n\nThis module demonstrates practical usage of the Universal AI Core Brain system,\nincluding domain management, training, prediction, and validation of \nanti-catastrophic forgetting capabilities.\n\nRun this script to see the Brain system in action with real-world scenarios.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/brain_system_examples.py`\n\n## Dependencies\n\n- pathlib\n- domain_registry\n- numpy\n- os\n- sys\n- brain\n- typing\n- training_manager\n- traceback\n- datetime\n- shutil\n- json\n- time\n\n## Code Structure\n\n- **Total Lines:** 779\n- **Code Lines:** 556\n- **Comment Lines:** 68\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.brain",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/brain.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.brain\n\nAPI endpoints for independent_core.brain\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///post/init//\n\n#### POST ///post/init//\n\nValidate and setup configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///post/init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///post/init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //attempt/json/recovery\n\n#### POST //attempt/json/recovery\n\nAttempt to recover from corrupted JSON files.\n\n**Parameters:**\n\n- **state_file** (query) *required*: str - Parameter: state_file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//attempt/json/recovery?state_file=example_state_file\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//attempt/json/recovery\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"state_file\": \"example_state_file\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //attempt/json/recovery\n\nAttempt to recover data from corrupted JSON\n\n**Parameters:**\n\n- **content** (query) *required*: str - Parameter: content\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//attempt/json/recovery?content=example_content\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//attempt/json/recovery\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"content\": \"example_content\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //calculate/error/rate\n\n#### POST //calculate/error/rate\n\nCalculate error rate.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//calculate/error/rate\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//calculate/error/rate\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //calculate/throughput\n\n#### POST //calculate/throughput\n\nCalculate current throughput (requests per second).\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//calculate/throughput\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//calculate/throughput\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //check/router/health\n\n#### POST //check/router/health\n\nCheck Domain Router health.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//check/router/health\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//check/router/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //export/proof/csv\n\n#### POST //export/proof/csv\n\nExport proof system metrics in CSV-friendly format.\n\n**Parameters:**\n\n- **include_history** (query) *required*: bool - Parameter: include_history\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//export/proof/csv?include_history=example_include_history\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//export/proof/csv\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"include_history\": \"example_include_history\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //export/proof/json\n\n#### POST //export/proof/json\n\nExport complete proof system metrics as JSON.\n\n**Parameters:**\n\n- **include_history** (query) *required*: bool - Parameter: include_history\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//export/proof/json?include_history=example_include_history\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//export/proof/json\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"include_history\": \"example_include_history\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //get/domain/usage/examples\n\n#### POST //get/domain/usage/examples\n\nGet usage examples for a domain.\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/domain/usage/examples?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/domain/usage/examples\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //get/last/save/time\n\n#### POST //get/last/save/time\n\nGet last save time.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/last/save/time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/last/save/time\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //get/state/file/path\n\n#### POST //get/state/file/path\n\nGet the path to the state file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/state/file/path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/state/file/path\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //golf/decision/hook\n\n#### POST //golf/decision/hook\n\nHook for golf domain decision making.\n\n**Parameters:**\n\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//golf/decision/hook?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//golf/decision/hook\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //initialize/components\n\n#### POST //initialize/components\n\nInitialize all Brain system components.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/components\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/components\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //initialize/golf/gambling/domain\n\n#### POST //initialize/golf/gambling/domain\n\nInitialize golf gambling domain with Brain system integration.\n\n**Parameters:**\n\n- **domain_config** (query) *required*: DomainConfig - Parameter: domain_config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/golf/gambling/domain?domain_config=example_domain_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/golf/gambling/domain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_config\": \"example_domain_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //initialize/production/monitoring\n\n#### POST //initialize/production/monitoring\n\nInitialize production monitoring and observability systems.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/production/monitoring\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/production/monitoring\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //integrate/security/hardening/with/brain\n\n#### POST //integrate/security/hardening/with/brain\n\nIntegrate security hardening systems with existing Brain components.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//integrate/security/hardening/with/brain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//integrate/security/hardening/with/brain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //load/persisted/state\n\n#### POST //load/persisted/state\n\nLoad persisted state with JSON corruption recovery.\n\n**Parameters:**\n\n- **state_file** (query) *required*: str - Parameter: state_file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/persisted/state?state_file=example_state_file\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/persisted/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"state_file\": \"example_state_file\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //load/persisted/state\n\nLoad persisted brain state with robust error handling\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/persisted/state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/persisted/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/gac/checkpoint\n\n#### POST /create/gac/checkpoint\n\nCreate a checkpoint of the GAC system state.\n\nArgs:\n    checkpoint_path: Path where to save the checkpoint\n    \nReturns:\n    bool: True if checkpoint created successfully\n\n**Parameters:**\n\n- **checkpoint_path** (query) *required*: str - Path where to save the checkpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/gac/checkpoint?checkpoint_path=example_checkpoint_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/gac/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"checkpoint_path\": \"example_checkpoint_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /export/domain\n\n#### POST /export/domain\n\nExport a domain's complete state and configuration.\n\nArgs:\n    domain_name: Name of the domain to export\n    export_path: Optional path for export (uses default if None)\n    \nReturns:\n    Dictionary with export results\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain to export\n- **export_path** (query) *required*: string - Optional path for export (uses default if None)\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/domain?domain_name=example_domain_name&export_path=example_export_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/domain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"export_path\": \"example_export_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /export/proof/system/metrics\n\n#### POST /export/proof/system/metrics\n\nExport proof system metrics in various formats.\n\nArgs:\n    format: Export format ('json', 'csv', 'summary')\n    include_history: Whether to include historical data\n    \nReturns:\n    Dict containing exported metrics\n\n**Parameters:**\n\n- **format** (query) *required*: str - Export format ('json', 'csv', 'summary')\n- **include_history** (query) *required*: bool - Whether to include historical data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/proof/system/metrics?format=example_format&include_history=example_include_history\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/proof/system/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"format\": \"example_format\",\n    \"include_history\": \"example_include_history\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/brain/status\n\n#### GET /get/brain/status\n\nGet comprehensive status of the Brain system.\n\nReturns:\n    Dictionary with detailed system status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/brain/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/brain/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/comprehensive/proof/report\n\n#### GET /get/comprehensive/proof/report\n\nGet comprehensive proof system report including all metrics and status.\n\nReturns:\n    Dict containing complete proof system report\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/comprehensive/proof/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/comprehensive/proof/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/domain/capabilities\n\n#### GET /get/domain/capabilities\n\nGet detailed capabilities and configuration for a specific domain.\n\nThis provides comprehensive information about what a domain can do,\nits current state, and how to use it effectively.\n\nArgs:\n    domain_name: Name of the domain to query\n    \nReturns:\n    Dictionary containing:\n    - capabilities: List of what the domain can do\n    - input_formats: Supported input data formats\n    - output_formats: Types of outputs produced\n    - configuration: Current domain configuration\n    - performance_profile: Performance characteristics\n    - usage_examples: Example usage patterns\n    - limitations: Known limitations or constraints\n    - optimization_hints: Tips for best performance\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain to query\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/capabilities?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/capabilities\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/domain/health\n\n#### GET /get/domain/health\n\nGet detailed health status for a specific domain.\n\nArgs:\n    domain_name: Name of the domain to check\n    \nReturns:\n    Dictionary containing:\n    - health_score: Domain health score (0-100)\n    - status: Current domain status\n    - performance: Domain performance metrics\n    - issues: List of domain-specific issues\n    - recommendations: Domain-specific recommendations\n    - diagnostics: Detailed diagnostic data\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain to check\n\n**Responses:**\n\n- **200**: Successful response\n- **100**: )\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/health?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/fraud/system/status\n\n#### GET /get/fraud/system/status\n\nGet comprehensive fraud system status integrated with Brain.\n\nReturns:\n    Dictionary with fraud system status and configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/fraud/system/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/fraud/system/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/gac/status\n\n#### GET /get/gac/status\n\nGet status of the GAC system.\n\nReturns:\n    Dict containing GAC system status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/gac/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/gac/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/gpu/memory/status\n\n#### GET /get/gpu/memory/status\n\nGet current GPU memory status and statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/gpu/memory/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/gpu/memory/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/health/status\n\n#### GET /get/health/status\n\nGet comprehensive health status of the Brain system.\n\nReturns:\n    Dictionary containing:\n    - overall_health: Overall health score (0-100)\n    - health_grade: Grade (A/B/C/D/F)\n    - component_health: Health of each component\n    - issues: List of current issues\n    - recommendations: Health improvement suggestions\n    - diagnostics: Detailed diagnostic information\n\n**Responses:**\n\n- **200**: Successful response\n- **100**: )\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/health/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/health/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/last/proof\n\n#### GET /get/last/proof\n\nGet the last generated proof.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/last/proof\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/last/proof\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/orchestrator\n\n#### GET /get/orchestrator\n\nGet an orchestrator by type.\n\n**Parameters:**\n\n- **orchestrator_type** (query) *required*: str - Parameter: orchestrator_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/orchestrator?orchestrator_type=example_orchestrator_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/orchestrator\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"orchestrator_type\": \"example_orchestrator_type\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/orchestrator/status\n\n#### GET /get/orchestrator/status\n\nGet status of all orchestrators.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/orchestrator/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/orchestrator/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/metrics\n\n#### GET /get/performance/metrics\n\nGet comprehensive performance metrics for the Brain system.\n\nReturns:\n    Dictionary containing:\n    - prediction_metrics: Prediction performance stats\n    - training_metrics: Training performance stats\n    - resource_metrics: Resource utilization stats\n    - cache_metrics: Cache performance stats\n    - throughput_metrics: System throughput stats\n    - latency_distribution: Response time distribution\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/prediction/confidence\n\n#### GET /get/prediction/confidence\n\nExtract and analyze confidence information from a prediction result.\n\nThis method provides detailed confidence analysis including uncertainty\nmetrics, reliability indicators, and recommendations.\n\nArgs:\n    prediction_result: BrainPredictionResult or dictionary from predict()\n    \nReturns:\n    Dictionary containing:\n    - overall_confidence: Single confidence value (0-1)\n    - confidence_level: Qualitative level (high/medium/low)\n    - uncertainty_analysis: Detailed uncertainty breakdown\n    - reliability_factors: Factors affecting reliability\n    - recommendations: Suggestions for improving confidence\n    - warning_flags: Any concerns about the prediction\n\n**Parameters:**\n\n- **prediction_result** (query) *required*: string - BrainPredictionResult or dictionary from predict()\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/prediction/confidence?prediction_result=example_prediction_result\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/prediction/confidence\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"prediction_result\": \"example_prediction_result\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/proof/system/status\n\n#### GET /get/proof/system/status\n\nGet status of the proof system.\n\nReturns:\n    Dict containing proof system status and metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/proof/system/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/proof/system/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/resource/usage\n\n#### GET /get/resource/usage\n\nGet detailed resource usage information for the Brain system.\n\nReturns:\n    Dictionary containing:\n    - memory: Memory usage details\n    - cpu: CPU usage details\n    - storage: Storage usage details\n    - network: Network usage (if applicable)\n    - by_component: Resource usage per component\n    - by_domain: Resource usage per domain\n    - trends: Resource usage trends\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/resource/usage\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/resource/usage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/training/alerts\n\n#### GET /get/training/alerts\n\nGet training alerts across domains.\n\nArgs:\n    domain_name: Optional filter by domain\n    severity: Optional severity filter\n    unresolved_only: Only show unresolved alerts\n    \nReturns:\n    List of alerts\n\n**Parameters:**\n\n- **domain_name** (query) *required*: string - Optional filter by domain\n- **severity** (query) *required*: string - Optional severity filter\n- **unresolved_only** (query) *required*: bool - Only show unresolved alerts\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/alerts?domain_name=example_domain_name&severity=example_severity&unresolved_only=example_unresolved_only\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/alerts\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"severity\": \"example_severity\",\n    \"unresolved_only\": \"example_unresolved_only\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/training/efficiency/metrics\n\n#### GET /get/training/efficiency/metrics\n\nGet training efficiency metrics across all domains.\n\nReturns:\n    Dictionary with efficiency metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/efficiency/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/efficiency/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/training/progress/report\n\n#### GET /get/training/progress/report\n\nGet comprehensive progress report for a training session.\n\nArgs:\n    identifier: Session ID or domain name\n    \nReturns:\n    Progress report dictionary\n\n**Parameters:**\n\n- **identifier** (query) *required*: str - Session ID or domain name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/progress/report?identifier=example_identifier\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/progress/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"identifier\": \"example_identifier\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/training/recovery/stats\n\n#### GET /get/training/recovery/stats\n\nGet error recovery statistics for training sessions.\n\nArgs:\n    session_id: Optional specific session ID\n    \nReturns:\n    Dictionary with recovery statistics\n\n**Parameters:**\n\n- **session_id** (query) *required*: integer - Optional specific session ID\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/recovery/stats?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/recovery/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /handle/training/error\n\n#### POST /handle/training/error\n\nHandle a training error using the error recovery system.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about the error\n    \nReturns:\n    True if recovery was successful, False otherwise\n\n**Parameters:**\n\n- **error** (query) *required*: Exception - The exception that occurred\n- **context** (query) *required*: string - Additional context about the error\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/training/error?error=example_error&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/training/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /import/domain\n\n#### POST /import/domain\n\nImport a domain from exported files.\n\nArgs:\n    import_path: Path to import from\n    domain_name: Optional new name for the domain\n    overwrite: Whether to overwrite existing domain\n    \nReturns:\n    Dictionary with import results\n\n**Parameters:**\n\n- **import_path** (query) *required*: Path - Path to import from\n- **domain_name** (query) *required*: string - Optional new name for the domain\n- **overwrite** (query) *required*: bool - Whether to overwrite existing domain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/import/domain?import_path=example_import_path&domain_name=example_domain_name&overwrite=example_overwrite\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/import/domain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"import_path\": \"example_import_path\",\n    \"domain_name\": \"example_domain_name\",\n    \"overwrite\": \"example_overwrite\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /list/available/domains\n\n#### POST /list/available/domains\n\nGet list of all available domains with their status and capabilities.\n\nThis is a user-friendly method for external systems to discover what domains\nare available and their current state.\n\nReturns:\n    List of dictionaries containing domain information:\n    - name: Domain name\n    - type: Domain type (core, specialized, etc.)\n    - status: Current status (active, training, etc.)\n    - description: What the domain does\n    - capabilities: List of capabilities\n    - performance: Current performance metrics\n    - resource_usage: Resource consumption info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/list/available/domains\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/list/available/domains\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /load/brain/state\n\n#### POST /load/brain/state\n\nLoad complete Brain state from a single file.\n\nThis is a user-friendly wrapper around load_state() that restores everything\nfrom a single saved state file.\n\nArgs:\n    filepath: Path to the saved brain state file\n    \nReturns:\n    Dictionary with load results:\n    - success: Whether load was successful\n    - components_loaded: List of loaded components\n    - timestamp: When the state was saved\n    - warnings: Any warnings during load\n\n**Parameters:**\n\n- **filepath** (query) *required*: string - Path to the saved brain state file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/brain/state?filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/brain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /load/state\n\n#### POST /load/state\n\nLoad a saved state of the Brain system.\n\nArgs:\n    checkpoint_name: Optional specific checkpoint to load\n    \nReturns:\n    Dictionary with load operation results\n\n**Parameters:**\n\n- **checkpoint_name** (query) *required*: string - Optional specific checkpoint to load\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/state?checkpoint_name=example_checkpoint_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"checkpoint_name\": \"example_checkpoint_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /post/training/memory/hook\n\n#### POST /post/training/memory/hook\n\nPost-training memory cleanup hook\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n- **results** (query) *required*: string - Parameter: results\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/post/training/memory/hook?session_id=example_session_id&results=example_results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/post/training/memory/hook\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"results\": \"example_results\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /predict\n\n#### POST /predict\n\nMake a prediction using the Brain system.\n\nArgs:\n    input_data: Input data for prediction\n    domain: Optional specific domain to use (auto-routes if None)\n    routing_strategy: Optional routing strategy override\n    return_reasoning: Whether to include reasoning steps\n    \nReturns:\n    BrainPredictionResult with prediction and metadata\n\n**Parameters:**\n\n- **input_data** (query) *required*: Any - Input data for prediction\n- **domain** (query) *required*: string - Optional specific domain to use (auto-routes if None)\n- **routing_strategy** (query) *required*: string - Optional routing strategy override\n- **return_reasoning** (query) *required*: bool - Whether to include reasoning steps\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/predict?input_data=example_input_data&domain=example_domain&routing_strategy=example_routing_strategy&return_reasoning=example_return_reasoning\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/predict\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n    \"domain\": \"example_domain\",\n    \"routing_strategy\": \"example_routing_strategy\",\n    \"return_reasoning\": \"example_return_reasoning\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /reset/domain\n\n#### POST /reset/domain\n\nReset a domain to initial state.\n\nArgs:\n    domain_name: Name of the domain to reset\n    preserve_knowledge: Whether to preserve domain knowledge\n    \nReturns:\n    Dictionary with reset results\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain to reset\n- **preserve_knowledge** (query) *required*: bool - Whether to preserve domain knowledge\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/reset/domain?domain_name=example_domain_name&preserve_knowledge=example_preserve_knowledge\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/reset/domain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"preserve_knowledge\": \"example_preserve_knowledge\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/brain/state\n\n#### POST /save/brain/state\n\nSave the complete Brain state to a single file.\n\nThis is a user-friendly wrapper around save_state() that saves everything\nto a single location for easy backup and restoration.\n\nArgs:\n    filepath: Path where to save the brain state\n    \nReturns:\n    Dictionary with save results:\n    - success: Whether save was successful\n    - filepath: Where the state was saved\n    - size_mb: Size of saved state in MB\n    - components_saved: List of saved components\n    - timestamp: When the save occurred\n\n**Parameters:**\n\n- **filepath** (query) *required*: string - Path where to save the brain state\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/brain/state?filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/brain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/state\n\n#### POST /save/state\n\nSave the current state of the Brain system.\n\nArgs:\n    checkpoint_name: Optional name for the checkpoint\n    \nReturns:\n    Dictionary with save operation results\n\n**Parameters:**\n\n- **checkpoint_name** (query) *required*: string - Optional name for the checkpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/state?checkpoint_name=example_checkpoint_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"checkpoint_name\": \"example_checkpoint_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /security/validated/route\n\n#### POST /security/validated/route\n\nAPI endpoint: security_validated_route\n\n**Parameters:**\n\n- **query** (query) *required*: string - Parameter: query\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/security/validated/route?query=example_query&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/security/validated/route\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"query\": \"example_query\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/proof/system/config\n\n#### PUT /update/proof/system/config\n\nUpdate proof system configuration dynamically.\n\nArgs:\n    config_updates: Dictionary containing configuration updates\n    \nReturns:\n    Dict containing update results\n\n**Parameters:**\n\n- **config_updates** (query) *required*: string - Dictionary containing configuration updates\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/proof/system/config?config_updates=example_config_updates\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/proof/system/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_updates\": \"example_config_updates\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.brain\",\n    \"description\": \"API endpoints for independent_core.brain\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///post/init//\": {\n      \"post\": {\n        \"summary\": \"Validate and setup configuration.\",\n        \"description\": \"Validate and setup configuration.\",\n        \"operationId\": \"__post_init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/components\": {\n      \"post\": {\n        \"summary\": \"Initialize all Brain system components.\",\n        \"description\": \"Initialize all Brain system components.\",\n        \"operationId\": \"_initialize_components\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/golf/gambling/domain\": {\n      \"post\": {\n        \"summary\": \"Initialize golf gambling domain with Brain system integration.\",\n        \"description\": \"Initialize golf gambling domain with Brain system integration.\",\n        \"operationId\": \"_initialize_golf_gambling_domain\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DomainConfig\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//golf/decision/hook\": {\n      \"post\": {\n        \"summary\": \"Hook for golf domain decision making.\",\n        \"description\": \"Hook for golf domain decision making.\",\n        \"operationId\": \"_golf_decision_hook\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/predict\": {\n      \"post\": {\n        \"summary\": \"Make a prediction using the Brain system.\\n\\nArgs:\\n    input_data: Input data for prediction\\n    domain: Optional specific domain to use (auto-routes if None)\\n    routing_strategy: Optional routing strategy override\\n    return_reasoning: Whether to include reasoning steps\\n    \\nReturns:\\n    BrainPredictionResult with prediction and metadata\",\n        \"description\": \"Make a prediction using the Brain system.\\n\\nArgs:\\n    input_data: Input data for prediction\\n    domain: Optional specific domain to use (auto-routes if None)\\n    routing_strategy: Optional routing strategy override\\n    return_reasoning: Whether to include reasoning steps\\n    \\nReturns:\\n    BrainPredictionResult with prediction and metadata\",\n        \"operationId\": \"predict\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Input data for prediction\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"domain\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific domain to use (auto-routes if None)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"routing_strategy\",\n            \"in\": \"query\",\n            \"description\": \"Optional routing strategy override\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"return_reasoning\",\n            \"in\": \"query\",\n            \"description\": \"Whether to include reasoning steps\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/brain/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive status of the Brain system.\\n\\nReturns:\\n    Dictionary with detailed system status\",\n        \"description\": \"Get comprehensive status of the Brain system.\\n\\nReturns:\\n    Dictionary with detailed system status\",\n        \"operationId\": \"get_brain_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"initialized\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//load/persisted/state\": {\n      \"post\": {\n        \"summary\": \"Load persisted brain state with robust error handling\",\n        \"description\": \"Load persisted brain state with robust error handling\",\n        \"operationId\": \"_load_persisted_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//attempt/json/recovery\": {\n      \"post\": {\n        \"summary\": \"Attempt to recover data from corrupted JSON\",\n        \"description\": \"Attempt to recover data from corrupted JSON\",\n        \"operationId\": \"_attempt_json_recovery\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"content\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: content\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/save/state\": {\n      \"post\": {\n        \"summary\": \"Save the current state of the Brain system.\\n\\nArgs:\\n    checkpoint_name: Optional name for the checkpoint\\n    \\nReturns:\\n    Dictionary with save operation results\",\n        \"description\": \"Save the current state of the Brain system.\\n\\nArgs:\\n    checkpoint_name: Optional name for the checkpoint\\n    \\nReturns:\\n    Dictionary with save operation results\",\n        \"operationId\": \"save_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"checkpoint_name\",\n            \"in\": \"query\",\n            \"description\": \"Optional name for the checkpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/load/state\": {\n      \"post\": {\n        \"summary\": \"Load a saved state of the Brain system.\\n\\nArgs:\\n    checkpoint_name: Optional specific checkpoint to load\\n    \\nReturns:\\n    Dictionary with load operation results\",\n        \"description\": \"Load a saved state of the Brain system.\\n\\nArgs:\\n    checkpoint_name: Optional specific checkpoint to load\\n    \\nReturns:\\n    Dictionary with load operation results\",\n        \"operationId\": \"load_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"checkpoint_name\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific checkpoint to load\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/export/domain\": {\n      \"post\": {\n        \"summary\": \"Export a domain's complete state and configuration.\\n\\nArgs:\\n    domain_name: Name of the domain to export\\n    export_path: Optional path for export (uses default if None)\\n    \\nReturns:\\n    Dictionary with export results\",\n        \"description\": \"Export a domain's complete state and configuration.\\n\\nArgs:\\n    domain_name: Name of the domain to export\\n    export_path: Optional path for export (uses default if None)\\n    \\nReturns:\\n    Dictionary with export results\",\n        \"operationId\": \"export_domain\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain to export\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"export_path\",\n            \"in\": \"query\",\n            \"description\": \"Optional path for export (uses default if None)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/import/domain\": {\n      \"post\": {\n        \"summary\": \"Import a domain from exported files.\\n\\nArgs:\\n    import_path: Path to import from\\n    domain_name: Optional new name for the domain\\n    overwrite: Whether to overwrite existing domain\\n    \\nReturns:\\n    Dictionary with import results\",\n        \"description\": \"Import a domain from exported files.\\n\\nArgs:\\n    import_path: Path to import from\\n    domain_name: Optional new name for the domain\\n    overwrite: Whether to overwrite existing domain\\n    \\nReturns:\\n    Dictionary with import results\",\n        \"operationId\": \"import_domain\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"import_path\",\n            \"in\": \"query\",\n            \"description\": \"Path to import from\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          },\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Optional new name for the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"overwrite\",\n            \"in\": \"query\",\n            \"description\": \"Whether to overwrite existing domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"import_path\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/reset/domain\": {\n      \"post\": {\n        \"summary\": \"Reset a domain to initial state.\\n\\nArgs:\\n    domain_name: Name of the domain to reset\\n    preserve_knowledge: Whether to preserve domain knowledge\\n    \\nReturns:\\n    Dictionary with reset results\",\n        \"description\": \"Reset a domain to initial state.\\n\\nArgs:\\n    domain_name: Name of the domain to reset\\n    preserve_knowledge: Whether to preserve domain knowledge\\n    \\nReturns:\\n    Dictionary with reset results\",\n        \"operationId\": \"reset_domain\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain to reset\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"preserve_knowledge\",\n            \"in\": \"query\",\n            \"description\": \"Whether to preserve domain knowledge\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//get/state/file/path\": {\n      \"post\": {\n        \"summary\": \"Get the path to the state file\",\n        \"description\": \"Get the path to the state file\",\n        \"operationId\": \"_get_state_file_path\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/orchestrator\": {\n      \"get\": {\n        \"summary\": \"Get an orchestrator by type.\",\n        \"description\": \"Get an orchestrator by type.\",\n        \"operationId\": \"get_orchestrator\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"orchestrator_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: orchestrator_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/orchestrator/status\": {\n      \"get\": {\n        \"summary\": \"Get status of all orchestrators.\",\n        \"description\": \"Get status of all orchestrators.\",\n        \"operationId\": \"get_orchestrator_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"orchestrators_available\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"orchestrator_status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_orchestrators\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/list/available/domains\": {\n      \"post\": {\n        \"summary\": \"Get list of all available domains with their status and capabilities.\\n\\nThis is a user-friendly method for external systems to discover what domains\\nare available and their current state.\\n\\nReturns:\\n    List of dictionaries containing domain information:\\n    - name: Domain name\\n    - type: Domain type (core, specialized, etc.)\\n    - status: Current status (active, training, etc.)\\n    - description: What the domain does\\n    - capabilities: List of capabilities\\n    - performance: Current performance metrics\\n    - resource_usage: Resource consumption info\",\n        \"description\": \"Get list of all available domains with their status and capabilities.\\n\\nThis is a user-friendly method for external systems to discover what domains\\nare available and their current state.\\n\\nReturns:\\n    List of dictionaries containing domain information:\\n    - name: Domain name\\n    - type: Domain type (core, specialized, etc.)\\n    - status: Current status (active, training, etc.)\\n    - description: What the domain does\\n    - capabilities: List of capabilities\\n    - performance: Current performance metrics\\n    - resource_usage: Resource consumption info\",\n        \"operationId\": \"list_available_domains\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/domain/capabilities\": {\n      \"get\": {\n        \"summary\": \"Get detailed capabilities and configuration for a specific domain.\\n\\nThis provides comprehensive information about what a domain can do,\\nits current state, and how to use it effectively.\\n\\nArgs:\\n    domain_name: Name of the domain to query\\n    \\nReturns:\\n    Dictionary containing:\\n    - capabilities: List of what the domain can do\\n    - input_formats: Supported input data formats\\n    - output_formats: Types of outputs produced\\n    - configuration: Current domain configuration\\n    - performance_profile: Performance characteristics\\n    - usage_examples: Example usage patterns\\n    - limitations: Known limitations or constraints\\n    - optimization_hints: Tips for best performance\",\n        \"description\": \"Get detailed capabilities and configuration for a specific domain.\\n\\nThis provides comprehensive information about what a domain can do,\\nits current state, and how to use it effectively.\\n\\nArgs:\\n    domain_name: Name of the domain to query\\n    \\nReturns:\\n    Dictionary containing:\\n    - capabilities: List of what the domain can do\\n    - input_formats: Supported input data formats\\n    - output_formats: Types of outputs produced\\n    - configuration: Current domain configuration\\n    - performance_profile: Performance characteristics\\n    - usage_examples: Example usage patterns\\n    - limitations: Known limitations or constraints\\n    - optimization_hints: Tips for best performance\",\n        \"operationId\": \"get_domain_capabilities\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain to query\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_name\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/prediction/confidence\": {\n      \"get\": {\n        \"summary\": \"Extract and analyze confidence information from a prediction result.\\n\\nThis method provides detailed confidence analysis including uncertainty\\nmetrics, reliability indicators, and recommendations.\\n\\nArgs:\\n    prediction_result: BrainPredictionResult or dictionary from predict()\\n    \\nReturns:\\n    Dictionary containing:\\n    - overall_confidence: Single confidence value (0-1)\\n    - confidence_level: Qualitative level (high/medium/low)\\n    - uncertainty_analysis: Detailed uncertainty breakdown\\n    - reliability_factors: Factors affecting reliability\\n    - recommendations: Suggestions for improving confidence\\n    - warning_flags: Any concerns about the prediction\",\n        \"description\": \"Extract and analyze confidence information from a prediction result.\\n\\nThis method provides detailed confidence analysis including uncertainty\\nmetrics, reliability indicators, and recommendations.\\n\\nArgs:\\n    prediction_result: BrainPredictionResult or dictionary from predict()\\n    \\nReturns:\\n    Dictionary containing:\\n    - overall_confidence: Single confidence value (0-1)\\n    - confidence_level: Qualitative level (high/medium/low)\\n    - uncertainty_analysis: Detailed uncertainty breakdown\\n    - reliability_factors: Factors affecting reliability\\n    - recommendations: Suggestions for improving confidence\\n    - warning_flags: Any concerns about the prediction\",\n        \"operationId\": \"get_prediction_confidence\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"prediction_result\",\n            \"in\": \"query\",\n            \"description\": \"BrainPredictionResult or dictionary from predict()\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"overall_confidence\": {\n                      \"type\": \"number\"\n                    },\n                    \"confidence_level\": {\n                      \"type\": \"string\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recommendations\": {\n                      \"type\": \"array\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/save/brain/state\": {\n      \"post\": {\n        \"summary\": \"Save the complete Brain state to a single file.\\n\\nThis is a user-friendly wrapper around save_state() that saves everything\\nto a single location for easy backup and restoration.\\n\\nArgs:\\n    filepath: Path where to save the brain state\\n    \\nReturns:\\n    Dictionary with save results:\\n    - success: Whether save was successful\\n    - filepath: Where the state was saved\\n    - size_mb: Size of saved state in MB\\n    - components_saved: List of saved components\\n    - timestamp: When the save occurred\",\n        \"description\": \"Save the complete Brain state to a single file.\\n\\nThis is a user-friendly wrapper around save_state() that saves everything\\nto a single location for easy backup and restoration.\\n\\nArgs:\\n    filepath: Path where to save the brain state\\n    \\nReturns:\\n    Dictionary with save results:\\n    - success: Whether save was successful\\n    - filepath: Where the state was saved\\n    - size_mb: Size of saved state in MB\\n    - components_saved: List of saved components\\n    - timestamp: When the save occurred\",\n        \"operationId\": \"save_brain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Path where to save the brain state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"filepath\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/load/brain/state\": {\n      \"post\": {\n        \"summary\": \"Load complete Brain state from a single file.\\n\\nThis is a user-friendly wrapper around load_state() that restores everything\\nfrom a single saved state file.\\n\\nArgs:\\n    filepath: Path to the saved brain state file\\n    \\nReturns:\\n    Dictionary with load results:\\n    - success: Whether load was successful\\n    - components_loaded: List of loaded components\\n    - timestamp: When the state was saved\\n    - warnings: Any warnings during load\",\n        \"description\": \"Load complete Brain state from a single file.\\n\\nThis is a user-friendly wrapper around load_state() that restores everything\\nfrom a single saved state file.\\n\\nArgs:\\n    filepath: Path to the saved brain state file\\n    \\nReturns:\\n    Dictionary with load results:\\n    - success: Whether load was successful\\n    - components_loaded: List of loaded components\\n    - timestamp: When the state was saved\\n    - warnings: Any warnings during load\",\n        \"operationId\": \"load_brain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Path to the saved brain state file\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"filepath\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//get/domain/usage/examples\": {\n      \"post\": {\n        \"summary\": \"Get usage examples for a domain.\",\n        \"description\": \"Get usage examples for a domain.\",\n        \"operationId\": \"_get_domain_usage_examples\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/health/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive health status of the Brain system.\\n\\nReturns:\\n    Dictionary containing:\\n    - overall_health: Overall health score (0-100)\\n    - health_grade: Grade (A/B/C/D/F)\\n    - component_health: Health of each component\\n    - issues: List of current issues\\n    - recommendations: Health improvement suggestions\\n    - diagnostics: Detailed diagnostic information\",\n        \"description\": \"Get comprehensive health status of the Brain system.\\n\\nReturns:\\n    Dictionary containing:\\n    - overall_health: Overall health score (0-100)\\n    - health_grade: Grade (A/B/C/D/F)\\n    - component_health: Health of each component\\n    - issues: List of current issues\\n    - recommendations: Health improvement suggestions\\n    - diagnostics: Detailed diagnostic information\",\n        \"operationId\": \"get_health_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"overall_health\": {\n                      \"type\": \"number\"\n                    },\n                    \"health_grade\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"100\": {\n            \"description\": \")\"\n          }\n        }\n      }\n    },\n    \"/get/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive performance metrics for the Brain system.\\n\\nReturns:\\n    Dictionary containing:\\n    - prediction_metrics: Prediction performance stats\\n    - training_metrics: Training performance stats\\n    - resource_metrics: Resource utilization stats\\n    - cache_metrics: Cache performance stats\\n    - throughput_metrics: System throughput stats\\n    - latency_distribution: Response time distribution\",\n        \"description\": \"Get comprehensive performance metrics for the Brain system.\\n\\nReturns:\\n    Dictionary containing:\\n    - prediction_metrics: Prediction performance stats\\n    - training_metrics: Training performance stats\\n    - resource_metrics: Resource utilization stats\\n    - cache_metrics: Cache performance stats\\n    - throughput_metrics: System throughput stats\\n    - latency_distribution: Response time distribution\",\n        \"operationId\": \"get_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"partial_metrics\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/domain/health\": {\n      \"get\": {\n        \"summary\": \"Get detailed health status for a specific domain.\\n\\nArgs:\\n    domain_name: Name of the domain to check\\n    \\nReturns:\\n    Dictionary containing:\\n    - health_score: Domain health score (0-100)\\n    - status: Current domain status\\n    - performance: Domain performance metrics\\n    - issues: List of domain-specific issues\\n    - recommendations: Domain-specific recommendations\\n    - diagnostics: Detailed diagnostic data\",\n        \"description\": \"Get detailed health status for a specific domain.\\n\\nArgs:\\n    domain_name: Name of the domain to check\\n    \\nReturns:\\n    Dictionary containing:\\n    - health_score: Domain health score (0-100)\\n    - status: Current domain status\\n    - performance: Domain performance metrics\\n    - issues: List of domain-specific issues\\n    - recommendations: Domain-specific recommendations\\n    - diagnostics: Detailed diagnostic data\",\n        \"operationId\": \"get_domain_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain to check\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"domain_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"health_score\": {\n                      \"type\": \"number\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"100\": {\n            \"description\": \")\"\n          }\n        }\n      }\n    },\n    \"/get/resource/usage\": {\n      \"get\": {\n        \"summary\": \"Get detailed resource usage information for the Brain system.\\n\\nReturns:\\n    Dictionary containing:\\n    - memory: Memory usage details\\n    - cpu: CPU usage details\\n    - storage: Storage usage details\\n    - network: Network usage (if applicable)\\n    - by_component: Resource usage per component\\n    - by_domain: Resource usage per domain\\n    - trends: Resource usage trends\",\n        \"description\": \"Get detailed resource usage information for the Brain system.\\n\\nReturns:\\n    Dictionary containing:\\n    - memory: Memory usage details\\n    - cpu: CPU usage details\\n    - storage: Storage usage details\\n    - network: Network usage (if applicable)\\n    - by_component: Resource usage per component\\n    - by_domain: Resource usage per domain\\n    - trends: Resource usage trends\",\n        \"operationId\": \"get_resource_usage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"basic_usage\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//check/router/health\": {\n      \"post\": {\n        \"summary\": \"Check Domain Router health.\",\n        \"description\": \"Check Domain Router health.\",\n        \"operationId\": \"_check_router_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"component\": {\n                      \"type\": \"string\"\n                    },\n                    \"score\": {\n                      \"type\": \"number\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"issues\": {\n                      \"type\": \"array\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//calculate/throughput\": {\n      \"post\": {\n        \"summary\": \"Calculate current throughput (requests per second).\",\n        \"description\": \"Calculate current throughput (requests per second).\",\n        \"operationId\": \"_calculate_throughput\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//calculate/error/rate\": {\n      \"post\": {\n        \"summary\": \"Calculate error rate.\",\n        \"description\": \"Calculate error rate.\",\n        \"operationId\": \"_calculate_error_rate\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//get/last/save/time\": {\n      \"post\": {\n        \"summary\": \"Get last save time.\",\n        \"description\": \"Get last save time.\",\n        \"operationId\": \"_get_last_save_time\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/fraud/system/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive fraud system status integrated with Brain.\\n\\nReturns:\\n    Dictionary with fraud system status and configuration\",\n        \"description\": \"Get comprehensive fraud system status integrated with Brain.\\n\\nReturns:\\n    Dictionary with fraud system status and configuration\",\n        \"operationId\": \"get_fraud_system_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/training/progress/report\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive progress report for a training session.\\n\\nArgs:\\n    identifier: Session ID or domain name\\n    \\nReturns:\\n    Progress report dictionary\",\n        \"description\": \"Get comprehensive progress report for a training session.\\n\\nArgs:\\n    identifier: Session ID or domain name\\n    \\nReturns:\\n    Progress report dictionary\",\n        \"operationId\": \"get_training_progress_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"identifier\",\n            \"in\": \"query\",\n            \"description\": \"Session ID or domain name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"session_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"progress\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/training/alerts\": {\n      \"get\": {\n        \"summary\": \"Get training alerts across domains.\\n\\nArgs:\\n    domain_name: Optional filter by domain\\n    severity: Optional severity filter\\n    unresolved_only: Only show unresolved alerts\\n    \\nReturns:\\n    List of alerts\",\n        \"description\": \"Get training alerts across domains.\\n\\nArgs:\\n    domain_name: Optional filter by domain\\n    severity: Optional severity filter\\n    unresolved_only: Only show unresolved alerts\\n    \\nReturns:\\n    List of alerts\",\n        \"operationId\": \"get_training_alerts\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Optional filter by domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"severity\",\n            \"in\": \"query\",\n            \"description\": \"Optional severity filter\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"unresolved_only\",\n            \"in\": \"query\",\n            \"description\": \"Only show unresolved alerts\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/training/efficiency/metrics\": {\n      \"get\": {\n        \"summary\": \"Get training efficiency metrics across all domains.\\n\\nReturns:\\n    Dictionary with efficiency metrics\",\n        \"description\": \"Get training efficiency metrics across all domains.\\n\\nReturns:\\n    Dictionary with efficiency metrics\",\n        \"operationId\": \"get_training_efficiency_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/training/recovery/stats\": {\n      \"get\": {\n        \"summary\": \"Get error recovery statistics for training sessions.\\n\\nArgs:\\n    session_id: Optional specific session ID\\n    \\nReturns:\\n    Dictionary with recovery statistics\",\n        \"description\": \"Get error recovery statistics for training sessions.\\n\\nArgs:\\n    session_id: Optional specific session ID\\n    \\nReturns:\\n    Dictionary with recovery statistics\",\n        \"operationId\": \"get_training_recovery_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific session ID\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"string\"\n                    },\n                    \"recovery_enabled\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/handle/training/error\": {\n      \"post\": {\n        \"summary\": \"Handle a training error using the error recovery system.\\n\\nArgs:\\n    error: The exception that occurred\\n    context: Additional context about the error\\n    \\nReturns:\\n    True if recovery was successful, False otherwise\",\n        \"description\": \"Handle a training error using the error recovery system.\\n\\nArgs:\\n    error: The exception that occurred\\n    context: Additional context about the error\\n    \\nReturns:\\n    True if recovery was successful, False otherwise\",\n        \"operationId\": \"handle_training_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"The exception that occurred\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Additional context about the error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/gac/status\": {\n      \"get\": {\n        \"summary\": \"Get status of the GAC system.\\n\\nReturns:\\n    Dict containing GAC system status\",\n        \"description\": \"Get status of the GAC system.\\n\\nReturns:\\n    Dict containing GAC system status\",\n        \"operationId\": \"get_gac_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"integrated\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/create/gac/checkpoint\": {\n      \"post\": {\n        \"summary\": \"Create a checkpoint of the GAC system state.\\n\\nArgs:\\n    checkpoint_path: Path where to save the checkpoint\\n    \\nReturns:\\n    bool: True if checkpoint created successfully\",\n        \"description\": \"Create a checkpoint of the GAC system state.\\n\\nArgs:\\n    checkpoint_path: Path where to save the checkpoint\\n    \\nReturns:\\n    bool: True if checkpoint created successfully\",\n        \"operationId\": \"create_gac_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"checkpoint_path\",\n            \"in\": \"query\",\n            \"description\": \"Path where to save the checkpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/production/monitoring\": {\n      \"post\": {\n        \"summary\": \"Initialize production monitoring and observability systems.\",\n        \"description\": \"Initialize production monitoring and observability systems.\",\n        \"operationId\": \"_initialize_production_monitoring\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//integrate/security/hardening/with/brain\": {\n      \"post\": {\n        \"summary\": \"Integrate security hardening systems with existing Brain components.\",\n        \"description\": \"Integrate security hardening systems with existing Brain components.\",\n        \"operationId\": \"_integrate_security_hardening_with_brain\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/last/proof\": {\n      \"get\": {\n        \"summary\": \"Get the last generated proof.\",\n        \"description\": \"Get the last generated proof.\",\n        \"operationId\": \"get_last_proof\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/proof/system/status\": {\n      \"get\": {\n        \"summary\": \"Get status of the proof system.\\n\\nReturns:\\n    Dict containing proof system status and metrics\",\n        \"description\": \"Get status of the proof system.\\n\\nReturns:\\n    Dict containing proof system status and metrics\",\n        \"operationId\": \"get_proof_system_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"integrated\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/comprehensive/proof/report\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive proof system report including all metrics and status.\\n\\nReturns:\\n    Dict containing complete proof system report\",\n        \"description\": \"Get comprehensive proof system report including all metrics and status.\\n\\nReturns:\\n    Dict containing complete proof system report\",\n        \"operationId\": \"get_comprehensive_proof_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_status\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"integrated\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"status\": {\n                          \"type\": \"string\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/proof/system/config\": {\n      \"put\": {\n        \"summary\": \"Update proof system configuration dynamically.\\n\\nArgs:\\n    config_updates: Dictionary containing configuration updates\\n    \\nReturns:\\n    Dict containing update results\",\n        \"description\": \"Update proof system configuration dynamically.\\n\\nArgs:\\n    config_updates: Dictionary containing configuration updates\\n    \\nReturns:\\n    Dict containing update results\",\n        \"operationId\": \"update_proof_system_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_updates\",\n            \"in\": \"query\",\n            \"description\": \"Dictionary containing configuration updates\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"updated_components\": {\n                      \"type\": \"array\"\n                    },\n                    \"errors\": {\n                      \"type\": \"array\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/export/proof/system/metrics\": {\n      \"post\": {\n        \"summary\": \"Export proof system metrics in various formats.\\n\\nArgs:\\n    format: Export format ('json', 'csv', 'summary')\\n    include_history: Whether to include historical data\\n    \\nReturns:\\n    Dict containing exported metrics\",\n        \"description\": \"Export proof system metrics in various formats.\\n\\nArgs:\\n    format: Export format ('json', 'csv', 'summary')\\n    include_history: Whether to include historical data\\n    \\nReturns:\\n    Dict containing exported metrics\",\n        \"operationId\": \"export_proof_system_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"format\",\n            \"in\": \"query\",\n            \"description\": \"Export format ('json', 'csv', 'summary')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"include_history\",\n            \"in\": \"query\",\n            \"description\": \"Whether to include historical data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"format\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//export/proof/json\": {\n      \"post\": {\n        \"summary\": \"Export complete proof system metrics as JSON.\",\n        \"description\": \"Export complete proof system metrics as JSON.\",\n        \"operationId\": \"_export_proof_json\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"include_history\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: include_history\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//export/proof/csv\": {\n      \"post\": {\n        \"summary\": \"Export proof system metrics in CSV-friendly format.\",\n        \"description\": \"Export proof system metrics in CSV-friendly format.\",\n        \"operationId\": \"_export_proof_csv\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"include_history\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: include_history\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"format\": {\n                      \"type\": \"string\"\n                    },\n                    \"note\": {\n                      \"type\": \"string\"\n                    },\n                    \"data\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/gpu/memory/status\": {\n      \"get\": {\n        \"summary\": \"Get current GPU memory status and statistics\",\n        \"description\": \"Get current GPU memory status and statistics\",\n        \"operationId\": \"get_gpu_memory_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"available\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/post/training/memory/hook\": {\n      \"post\": {\n        \"summary\": \"Post-training memory cleanup hook\",\n        \"description\": \"Post-training memory cleanup hook\",\n        \"operationId\": \"post_training_memory_hook\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"results\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: results\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/security/validated/route\": {\n      \"post\": {\n        \"summary\": \"API endpoint: security_validated_route\",\n        \"description\": \"API endpoint: security_validated_route\",\n        \"operationId\": \"security_validated_route\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"query\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: query\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.brain\n\n## Overview\n\nMain Brain API for Universal AI Core.\nProvides a unified interface to the complete Brain system.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/brain.py`\n\n## Dependencies\n\n- pathlib\n- brain_core\n- production_telemetry\n- training_integration_fixes\n- compression_systems.gpu_memory\n- logging.handlers\n- proof_system.proof_integration_manager\n- threading\n- datetime\n- json\n- gac_system.gradient_ascent_clipping\n- time\n- production_security_hardening\n- production_security_enforcer\n- domain_state\n- sklearn.preprocessing\n- numpy\n- production_observability\n- error_recovery_system\n- production_security_auditor\n- compression_systems.padic.padic_integration\n- proof_system.cryptographic_engine\n- production_metrics_collector\n- traceback\n- sklearn.impute\n- brain_gac_optimizer\n- training_manager\n- re\n- golf_domain.brain_golf_connector\n- shutil\n- financial_fraud_domain.enhanced_fraud_core_main\n- sys\n- proof_system.ml_based_engine\n- typing\n- warnings\n- proof_system.algebraic_rule_enforcer\n- pickle\n- orchestrators\n- psutil\n- golf_domain.domain_config\n- domain_registry\n- proof_system.confidence_generator\n- brain_training_integration\n- brain_gac_coordinator\n- concurrent.futures\n- logging\n- brain_gac_integration\n- proof_system.rule_based_engine\n- production_security_validator\n- pandas\n- zipfile\n- progress_tracker\n- production_monitoring_system\n- domain_router\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 7628\n- **Code Lines:** 5825\n- **Comment Lines:** 627\n\n## Complexity Indicators\n\n- High function count\n- Async programming\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.brain\n\nMain Brain API for Universal AI Core.\nProvides a unified interface to the complete Brain system.\n\n## Components Overview\n\n- **Classes:** 3\n- **Functions:** 10\n- **Dependencies:** 57\n\n## Class Hierarchy\n\n- **BrainSystemConfig**\n  - Methods: 1\n  - Complexity: 41\n- **BrainPredictionResult**\n  - Methods: 1\n  - Complexity: 14\n- **Brain**\n  - Methods: 198\n  - Complexity: 1154\n## Integration Points\n\n- Function: _setup_proof_system_event_handlers\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.training_integration_fixes",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/training_integration_fixes.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.training_integration_fixes\n\nAPI endpoints for independent_core.training_integration_fixes\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/enhanced/training/manager\n\n#### POST /create/enhanced/training/manager\n\nCreate an enhanced training manager.\n\n**Parameters:**\n\n- **brain_instance** (query) *required*: string - Parameter: brain_instance\n- **storage_path** (query) *required*: str - Parameter: storage_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/enhanced/training/manager?brain_instance=example_brain_instance&storage_path=example_storage_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/enhanced/training/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain_instance\": \"example_brain_instance\",\n    \"storage_path\": \"example_storage_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/session/info\n\n#### GET /get/session/info\n\nGet comprehensive session information.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/session/info?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/session/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.training_integration_fixes\",\n    \"description\": \"API endpoints for independent_core.training_integration_fixes\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/enhanced/training/manager\": {\n      \"post\": {\n        \"summary\": \"Create an enhanced training manager.\",\n        \"description\": \"Create an enhanced training manager.\",\n        \"operationId\": \"create_enhanced_training_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain_instance\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: brain_instance\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"storage_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: storage_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/session/info\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive session information.\",\n        \"description\": \"Get comprehensive session information.\",\n        \"operationId\": \"get_session_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"session_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"model_type\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"start_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"duration\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"resource_usage\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"checkpoints\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"errors\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recovery_attempts\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.training_integration_fixes\n\n## Overview\n\nEnhanced Training Manager with Brain System Integration\nProvides complete training integration with session management, monitoring, and recovery.\nPart of the training execution and monitoring fixes.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/training_integration_fixes.py`\n\n## Dependencies\n\n- pathlib\n- torch.utils.data\n- numpy\n- logging\n- pandas\n- typing\n- warnings\n- torch\n- training_session_manager\n- torch.nn\n- torch.optim\n- datetime\n- threading\n- dataclasses\n- json\n- time\n\n## Code Structure\n\n- **Total Lines:** 817\n- **Code Lines:** 604\n- **Comment Lines:** 74\n\n## Complexity Indicators\n\n- Concurrency\n\n",
        "integration_guide": "\n# independent_core.training_integration_fixes\n\nEnhanced Training Manager with Brain System Integration\nProvides complete training integration with session management, monitoring, and recovery.\nPart of the training execution and monitoring fixes.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/training_integration_fixes.py\n- **Total Classes:** 1\n- **Total Functions:** 3\n- **Dependencies:** pathlib, torch.utils.data, numpy, logging, pandas, typing, warnings, torch, training_session_manager, torch.nn, torch.optim, datetime, threading, dataclasses, json, time\n\n## Contents\n**Classes (1):** EnhancedTrainingManager\n**Functions (3):** enhance_brain_training, create_enhanced_training_manager, enhanced_train_domain\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: EnhancedTrainingManager\nFunction: create_enhanced_training_manager\n\n## Examples\n# Fallback import for standalone usage\n\n'max_memory_usage': 0.9,\n\n'resource_usage': self._serialize_resources(session.resource_metrics),\n\n'num_samples': len(X),\n\n'avg_cpu_usage': np.mean(resources.cpu_usage) if resources.cpu_usage else 0.0,\n\n'max_cpu_usage': np.max(resources.cpu_usage) if resources.cpu_usage else 0.0,\n\n'avg_memory_usage': np.mean(resources.memory_usage) if resources.memory_usage else 0.0,\n\n'max_memory_usage': np.max(resources.memory_usage) if resources.memory_usage else 0.0,\n\n'avg_gpu_usage': np.mean(resources.gpu_usage) if resources.gpu_usage else 0.0,\n\n'max_gpu_usage': np.max(resources.gpu_usage) if resources.gpu_usage else 0.0,\n\n'resource_usage': self._serialize_resources(session.resource_metrics),\n\n# Example usage\n\n# Example training data\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.run_proof_tests",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/run_proof_tests.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.run_proof_tests\n\nAPI endpoints for independent_core.run_proof_tests\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //save/results\n\n#### POST //save/results\n\nSave test results to file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/results\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.run_proof_tests\",\n    \"description\": \"API endpoints for independent_core.run_proof_tests\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//save/results\": {\n      \"post\": {\n        \"summary\": \"Save test results to file\",\n        \"description\": \"Save test results to file\",\n        \"operationId\": \"_save_results\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.run_proof_tests\n\n## Overview\n\nTest Runner for Proof System Integration\nExecutes proof system tests and generates reports compatible with Saraphis structure\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/run_proof_tests.py`\n\n## Dependencies\n\n- test_proof_system_comprehensive\n- independent_core.proof_system.rule_based_engine\n- os\n- sys\n- independent_core.proof_system.proof_integration_manager\n- logging\n- typing\n- datetime\n- test_brain_proof_integration\n- json\n- test_proof_components\n- argparse\n- time\n\n## Code Structure\n\n- **Total Lines:** 319\n- **Code Lines:** 239\n- **Comment Lines:** 18\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.demo_error_recovery",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/demo_error_recovery.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.demo_error_recovery\n\nAPI endpoints for independent_core.demo_error_recovery\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /demo/5/comprehensive/integration\n\n#### POST /demo/5/comprehensive/integration\n\nDemo 5: Comprehensive integration of all systems.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/demo/5/comprehensive/integration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/demo/5/comprehensive/integration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.demo_error_recovery\",\n    \"description\": \"API endpoints for independent_core.demo_error_recovery\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/demo/5/comprehensive/integration\": {\n      \"post\": {\n        \"summary\": \"Demo 5: Comprehensive integration of all systems.\",\n        \"description\": \"Demo 5: Comprehensive integration of all systems.\",\n        \"operationId\": \"demo_5_comprehensive_integration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.demo_error_recovery\n\n## Overview\n\nComprehensive Demo of Integrated Error Recovery and Progress Tracking System.\n\nThis demo showcases the complete integration of error recovery capabilities\nwith the existing progress tracking infrastructure, demonstrating real-world\nscenarios and recovery mechanisms.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/demo_error_recovery.py`\n\n## Dependencies\n\n- pathlib\n- domain_registry\n- numpy\n- os\n- sys\n- brain\n- error_recovery_system\n- traceback\n- time\n\n## Code Structure\n\n- **Total Lines:** 569\n- **Code Lines:** 402\n- **Comment Lines:** 49\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.production_documentation_system",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_documentation_system.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_documentation_system\n\nAPI endpoints for independent_core.production_documentation_system\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //get/default/config\n\n#### POST //get/default/config\n\nGet default configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/default/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/default/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/documentation/status\n\n#### GET /get/documentation/status\n\nGet current status of documentation system\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/documentation/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/documentation/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_documentation_system\",\n    \"description\": \"API endpoints for independent_core.production_documentation_system\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//get/default/config\": {\n      \"post\": {\n        \"summary\": \"Get default configuration\",\n        \"description\": \"Get default configuration\",\n        \"operationId\": \"_get_default_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"root_path\": {\n                      \"type\": \"string\"\n                    },\n                    \"output_dir\": {\n                      \"type\": \"string\"\n                    },\n                    \"documentation_level\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"output_formats\": {\n                      \"type\": \"array\"\n                    },\n                    \"documentation_types\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"parallel_workers\": {\n                      \"type\": \"number\"\n                    },\n                    \"validate_output\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"include_metrics\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/documentation/status\": {\n      \"get\": {\n        \"summary\": \"Get current status of documentation system\",\n        \"description\": \"Get current status of documentation system\",\n        \"operationId\": \"get_documentation_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_discoverable_targets\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"documentation_types_supported\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"output_formats_supported\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_status\": {\n                      \"type\": \"string\"\n                    },\n                    \"last_generation\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_documentation_system\n\n## Overview\n\nProduction Documentation System for Saraphis Independent Core\n\nComprehensive documentation orchestration system covering all 186 Python files\nin the independent_core with multi-level documentation generation capabilities.\n\nNO FALLBACKS - HARD FAILURES ONLY architecture ensuring comprehensive coverage.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_documentation_system.py`\n\n## Dependencies\n\n- pathlib\n- inspect\n- concurrent.futures\n- importlib\n- sys\n- logging\n- documentation_generator\n- enum\n- typing\n- asyncio\n- comprehensive_documentation\n- api_documentation\n- datetime\n- ast\n- dataclasses\n- json\n- os\n\n## Code Structure\n\n- **Total Lines:** 669\n- **Code Lines:** 520\n- **Comment Lines:** 2\n\n## Complexity Indicators\n\n- High class count\n- Async programming\n- Decorators used\n\n",
        "deployment_guide": "\n# independent_core.production_documentation_system\n\nProduction Documentation System for Saraphis Independent Core\n\nComprehensive documentation orchestration system covering all 186 Python files\nin the independent_core with multi-level documentation generation capabilities.\n\nNO FALLBACKS - HARD FAILURES ONLY architecture ensuring comprehensive coverage.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_documentation_system.py\n- **Total Classes:** 10\n- **Total Functions:** 0\n- **Dependencies:** pathlib, inspect, concurrent.futures, importlib, sys, logging, documentation_generator, enum, typing, asyncio, comprehensive_documentation, api_documentation, datetime, ast, dataclasses, json, os\n\n## Contents\n**Classes (10):** DocumentationType, DocumentationLevel, OutputFormat, DocumentationTarget, DocumentationResult, DocumentationDiscovery, DocumentationValidator, DocumentationOrchestrator, DocumentationExporter, ProductionDocumentationSystem\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\n\"api\": [\"Overview\", \"Classes\", \"Functions\", \"Examples\"],\n\n\"user_guide\": [\"Introduction\", \"Getting Started\", \"Usage\", \"Examples\"],\n",
        "architecture": "# Architecture: independent_core.production_documentation_system\n\nProduction Documentation System for Saraphis Independent Core\n\nComprehensive documentation orchestration system covering all 186 Python files\nin the independent_core with multi-level documentation generation capabilities.\n\nNO FALLBACKS - HARD FAILURES ONLY architecture ensuring comprehensive coverage.\n\n## Components Overview\n\n- **Classes:** 10\n- **Functions:** 0\n- **Dependencies:** 17\n\n## Class Hierarchy\n\n- **DocumentationType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 11\n- **DocumentationLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **OutputFormat** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **DocumentationTarget**\n  - Methods: 0\n  - Complexity: 8\n- **DocumentationResult**\n  - Methods: 0\n  - Complexity: 8\n- **DocumentationDiscovery**\n  - Methods: 5\n  - Complexity: 39\n- **DocumentationValidator**\n  - Methods: 4\n  - Complexity: 24\n- **DocumentationOrchestrator**\n  - Methods: 2\n  - Complexity: 20\n- **DocumentationExporter**\n  - Methods: 5\n  - Complexity: 52\n- **ProductionDocumentationSystem**\n  - Methods: 4\n  - Complexity: 16\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "deployment_guide missing required section: Monitoring",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.production_config_manager",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_config_manager.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_config_manager\n\nAPI endpoints for independent_core.production_config_manager\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //hot/reload/loop\n\n#### POST //hot/reload/loop\n\nHot reload monitoring loop.\n\n**Parameters:**\n\n- **check_interval** (query) *required*: float - Parameter: check_interval\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//hot/reload/loop?check_interval=example_check_interval\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//hot/reload/loop\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"check_interval\": \"example_check_interval\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //load/config/file\n\n#### POST //load/config/file\n\nLoad configuration from file.\n\n**Parameters:**\n\n- **config_file** (query) *required*: Path - Parameter: config_file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/config/file?config_file=example_config_file\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/config/file\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_file\": \"example_config_file\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //load/configuration\n\n#### POST //load/configuration\n\nLoad configuration from default location.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/configuration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/config/file\n\n#### POST //save/config/file\n\nSave configuration to file.\n\n**Parameters:**\n\n- **config_file** (query) *required*: Path - Parameter: config_file\n- **config_data** (query) *required*: string - Parameter: config_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/config/file?config_file=example_config_file&config_data=example_config_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/config/file\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_file\": \"example_config_file\",\n    \"config_data\": \"example_config_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //setup/default/migrations\n\n#### POST //setup/default/migrations\n\nSetup default configuration migrations.\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//setup/default/migrations\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//setup/default/migrations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //update/configuration/metadata\n\n#### POST //update/configuration/metadata\n\nUpdate configuration metadata.\n\n**Parameters:**\n\n- **config_file** (query) *required*: Path - Parameter: config_file\n- **config_data** (query) *required*: string - Parameter: config_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//update/configuration/metadata?config_file=example_config_file&config_data=example_config_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//update/configuration/metadata\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_file\": \"example_config_file\",\n    \"config_data\": \"example_config_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/production/config/manager\n\n#### POST /create/production/config/manager\n\nFactory function to create a ProductionConfigManager instance.\n\n**Parameters:**\n\n- **config_dir** (query) *required*: str - Parameter: config_dir\n- **environment** (query) *required*: string - Parameter: environment\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/production/config/manager?config_dir=example_config_dir&environment=example_environment\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/production/config/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_dir\": \"example_config_dir\",\n    \"environment\": \"example_environment\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/configuration/diff\n\n#### GET /get/configuration/diff\n\nGet differences between current and another configuration.\n\n**Parameters:**\n\n- **other_config** (query) *required*: ProductionConfig - Parameter: other_config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/configuration/diff?other_config=example_other_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/configuration/diff\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"other_config\": \"example_other_config\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/configuration/status\n\n#### GET /get/configuration/status\n\nGet current configuration status and metadata.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/configuration/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/configuration/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/migration/path\n\n#### GET /get/migration/path\n\nGet migration path between versions.\n\n**Parameters:**\n\n- **from_version** (query) *required*: str - Parameter: from_version\n- **to_version** (query) *required*: str - Parameter: to_version\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/migration/path?from_version=example_from_version&to_version=example_to_version\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/migration/path\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"from_version\": \"example_from_version\",\n    \"to_version\": \"example_to_version\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /load/configuration\n\n#### POST /load/configuration\n\nLoad production configuration from file.\n\n**Parameters:**\n\n- **config_path** (query) *required*: string - Parameter: config_path\n- **validate** (query) *required*: bool - Parameter: validate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/configuration?config_path=example_config_path&validate=example_validate\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_path\": \"example_config_path\",\n    \"validate\": \"example_validate\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /migrate/1/0/0/to/1/1/0\n\n#### POST /migrate/1/0/0/to/1/1/0\n\nExample migration from 1.0.0 to 1.1.0.\n\n⏱️ Rate limited\n\n**Parameters:**\n\n- **config_data** (query) *required*: string - Parameter: config_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/migrate/1/0/0/to/1/1/0?config_data=example_config_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/migrate/1/0/0/to/1/1/0\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_data\": \"example_config_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/configuration\n\n#### POST /save/configuration\n\nSave production configuration to file.\n\n**Parameters:**\n\n- **config_path** (query) *required*: string - Parameter: config_path\n- **encrypt_sensitive** (query) *required*: bool - Parameter: encrypt_sensitive\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/configuration?config_path=example_config_path&encrypt_sensitive=example_encrypt_sensitive\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_path\": \"example_config_path\",\n    \"encrypt_sensitive\": \"example_encrypt_sensitive\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_config_manager\",\n    \"description\": \"API endpoints for independent_core.production_config_manager\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/production/config/manager\": {\n      \"post\": {\n        \"summary\": \"Factory function to create a ProductionConfigManager instance.\",\n        \"description\": \"Factory function to create a ProductionConfigManager instance.\",\n        \"operationId\": \"create_production_config_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_dir\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_dir\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"environment\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: environment\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/migration/path\": {\n      \"get\": {\n        \"summary\": \"Get migration path between versions.\",\n        \"description\": \"Get migration path between versions.\",\n        \"operationId\": \"get_migration_path\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"from_version\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: from_version\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"to_version\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: to_version\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/load/configuration\": {\n      \"post\": {\n        \"summary\": \"Load production configuration from file.\",\n        \"description\": \"Load production configuration from file.\",\n        \"operationId\": \"load_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"validate\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: validate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/save/configuration\": {\n      \"post\": {\n        \"summary\": \"Save production configuration to file.\",\n        \"description\": \"Save production configuration to file.\",\n        \"operationId\": \"save_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"encrypt_sensitive\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: encrypt_sensitive\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/configuration/status\": {\n      \"get\": {\n        \"summary\": \"Get current configuration status and metadata.\",\n        \"description\": \"Get current configuration status and metadata.\",\n        \"operationId\": \"get_configuration_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"environment\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"version\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"encrypted\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"hot_reload_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"validation_level\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metadata\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"deployment_configs\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"config_files\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"backup_available\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"integrations\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"gac_config\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"golf_domain_config\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"production_training\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//setup/default/migrations\": {\n      \"post\": {\n        \"summary\": \"Setup default configuration migrations.\",\n        \"description\": \"Setup default configuration migrations.\",\n        \"operationId\": \"_setup_default_migrations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/configuration\": {\n      \"post\": {\n        \"summary\": \"Load configuration from default location.\",\n        \"description\": \"Load configuration from default location.\",\n        \"operationId\": \"_load_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/config/file\": {\n      \"post\": {\n        \"summary\": \"Load configuration from file.\",\n        \"description\": \"Load configuration from file.\",\n        \"operationId\": \"_load_config_file\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_file\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_file\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/config/file\": {\n      \"post\": {\n        \"summary\": \"Save configuration to file.\",\n        \"description\": \"Save configuration to file.\",\n        \"operationId\": \"_save_config_file\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_file\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_file\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          },\n          {\n            \"name\": \"config_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//update/configuration/metadata\": {\n      \"post\": {\n        \"summary\": \"Update configuration metadata.\",\n        \"description\": \"Update configuration metadata.\",\n        \"operationId\": \"_update_configuration_metadata\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_file\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_file\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          },\n          {\n            \"name\": \"config_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//hot/reload/loop\": {\n      \"post\": {\n        \"summary\": \"Hot reload monitoring loop.\",\n        \"description\": \"Hot reload monitoring loop.\",\n        \"operationId\": \"_hot_reload_loop\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"check_interval\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: check_interval\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/configuration/diff\": {\n      \"get\": {\n        \"summary\": \"Get differences between current and another configuration.\",\n        \"description\": \"Get differences between current and another configuration.\",\n        \"operationId\": \"get_configuration_diff\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"other_config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: other_config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ProductionConfig\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/migrate/1/0/0/to/1/1/0\": {\n      \"post\": {\n        \"summary\": \"Example migration from 1.0.0 to 1.1.0.\",\n        \"description\": \"Example migration from 1.0.0 to 1.1.0.\",\n        \"operationId\": \"migrate_1_0_0_to_1_1_0\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_config_manager\n\n## Overview\n\nProduction Configuration Manager - Unified production configuration management system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production configuration management capabilities,\nincluding environment-specific settings, validation, encryption, versioning, and migration.\n\nKey Features:\n- Unified production configuration management across all environments\n- Environment-specific configuration switching (dev, staging, prod)\n- Configuration validation with strict error checking\n- Configuration encryption for sensitive settings\n- Configuration versioning and migration support\n- Hot-reloading capabilities for dynamic configuration updates\n- Integration with existing GAC and domain configuration systems\n- Comprehensive logging and audit trails\n- Backup and restore functionality\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll configuration operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_config_manager.py`\n\n## Dependencies\n\n- pathlib\n- cryptography.hazmat.backends\n- threading\n- datetime\n- json\n- time\n- contextlib\n- yaml\n- enum\n- copy\n- uuid\n- traceback\n- cryptography.hazmat.primitives\n- gac_system.gac_config\n- typing\n- hashlib\n- golf_domain.domain_config\n- production_training_execution\n- cryptography.hazmat.primitives.kdf.pbkdf2\n- logging\n- cryptography.fernet\n- base64\n- dataclasses\n- os\n\n## Code Structure\n\n- **Total Lines:** 1167\n- **Code Lines:** 836\n- **Comment Lines:** 98\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "configuration_guide": "\n# independent_core.production_config_manager\n\nProduction Configuration Manager - Unified production configuration management system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production configuration management capabilities,\nincluding environment-specific settings, validation, encryption, versioning, and migration.\n\nKey Features:\n- Unified production configuration management across all environments\n- Environment-specific configuration switching (dev, staging, prod)\n- Configuration validation with strict error checking\n- Configuration encryption for sensitive settings\n- Configuration versioning and migration support\n- Hot-reloading capabilities for dynamic configuration updates\n- Integration with existing GAC and domain configuration systems\n- Comprehensive logging and audit trails\n- Backup and restore functionality\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll configuration operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_config_manager.py\n- **Total Classes:** 14\n- **Total Functions:** 2\n- **Dependencies:** pathlib, cryptography.hazmat.backends, threading, datetime, json, time, contextlib, yaml, enum, copy, uuid, traceback, cryptography.hazmat.primitives, gac_system.gac_config, typing, hashlib, golf_domain.domain_config, production_training_execution, cryptography.hazmat.primitives.kdf.pbkdf2, logging, cryptography.fernet, base64, dataclasses, os\n\n## Contents\n**Classes (14):** ProductionEnvironment, ConfigurationFormat, ConfigurationPriority, ValidationLevel, ProductionConfig, DeploymentConfig, SecurityConfig, PerformanceConfig, MonitoringConfig, ConfigurationMetadata, ConfigurationEncryption, ConfigurationValidator, ConfigurationMigrator, ProductionConfigManager\n**Functions (2):** create_production_config_manager, migrate_1_0_0_to_1_1_0\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: ProductionConfigManager\nFunction: create_production_config_manager\nFunction: initialize_production_config_manager\n\n## Examples\n\"\"\"Example migration from 1.0.0 to 1.1.0.\"\"\"\n\n# Example usage\n\n# Initialize with sample integrations\n",
        "integration_guide": "\n# independent_core.production_config_manager\n\nProduction Configuration Manager - Unified production configuration management system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production configuration management capabilities,\nincluding environment-specific settings, validation, encryption, versioning, and migration.\n\nKey Features:\n- Unified production configuration management across all environments\n- Environment-specific configuration switching (dev, staging, prod)\n- Configuration validation with strict error checking\n- Configuration encryption for sensitive settings\n- Configuration versioning and migration support\n- Hot-reloading capabilities for dynamic configuration updates\n- Integration with existing GAC and domain configuration systems\n- Comprehensive logging and audit trails\n- Backup and restore functionality\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll configuration operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_config_manager.py\n- **Total Classes:** 14\n- **Total Functions:** 2\n- **Dependencies:** pathlib, cryptography.hazmat.backends, threading, datetime, json, time, contextlib, yaml, enum, copy, uuid, traceback, cryptography.hazmat.primitives, gac_system.gac_config, typing, hashlib, golf_domain.domain_config, production_training_execution, cryptography.hazmat.primitives.kdf.pbkdf2, logging, cryptography.fernet, base64, dataclasses, os\n\n## Contents\n**Classes (14):** ProductionEnvironment, ConfigurationFormat, ConfigurationPriority, ValidationLevel, ProductionConfig, DeploymentConfig, SecurityConfig, PerformanceConfig, MonitoringConfig, ConfigurationMetadata, ConfigurationEncryption, ConfigurationValidator, ConfigurationMigrator, ProductionConfigManager\n**Functions (2):** create_production_config_manager, migrate_1_0_0_to_1_1_0\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: ProductionConfigManager\nFunction: create_production_config_manager\nFunction: initialize_production_config_manager\n\n## Examples\n\"\"\"Example migration from 1.0.0 to 1.1.0.\"\"\"\n\n# Example usage\n\n# Initialize with sample integrations\n",
        "deployment_guide": "\n# independent_core.production_config_manager\n\nProduction Configuration Manager - Unified production configuration management system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production configuration management capabilities,\nincluding environment-specific settings, validation, encryption, versioning, and migration.\n\nKey Features:\n- Unified production configuration management across all environments\n- Environment-specific configuration switching (dev, staging, prod)\n- Configuration validation with strict error checking\n- Configuration encryption for sensitive settings\n- Configuration versioning and migration support\n- Hot-reloading capabilities for dynamic configuration updates\n- Integration with existing GAC and domain configuration systems\n- Comprehensive logging and audit trails\n- Backup and restore functionality\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll configuration operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_config_manager.py\n- **Total Classes:** 14\n- **Total Functions:** 2\n- **Dependencies:** pathlib, cryptography.hazmat.backends, threading, datetime, json, time, contextlib, yaml, enum, copy, uuid, traceback, cryptography.hazmat.primitives, gac_system.gac_config, typing, hashlib, golf_domain.domain_config, production_training_execution, cryptography.hazmat.primitives.kdf.pbkdf2, logging, cryptography.fernet, base64, dataclasses, os\n\n## Contents\n**Classes (14):** ProductionEnvironment, ConfigurationFormat, ConfigurationPriority, ValidationLevel, ProductionConfig, DeploymentConfig, SecurityConfig, PerformanceConfig, MonitoringConfig, ConfigurationMetadata, ConfigurationEncryption, ConfigurationValidator, ConfigurationMigrator, ProductionConfigManager\n**Functions (2):** create_production_config_manager, migrate_1_0_0_to_1_1_0\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: ProductionConfigManager\nFunction: create_production_config_manager\nFunction: initialize_production_config_manager\n\n## Examples\n\"\"\"Example migration from 1.0.0 to 1.1.0.\"\"\"\n\n# Example usage\n\n# Initialize with sample integrations\n",
        "architecture": "# Architecture: independent_core.production_config_manager\n\nProduction Configuration Manager - Unified production configuration management system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production configuration management capabilities,\nincluding environment-specific settings, validation, encryption, versioning, and migration.\n\nKey Features:\n- Unified production configuration management across all environments\n- Environment-specific configuration switching (dev, staging, prod)\n- Configuration validation with strict error checking\n- Configuration encryption for sensitive settings\n- Configuration versioning and migration support\n- Hot-reloading capabilities for dynamic configuration updates\n- Integration with existing GAC and domain configuration systems\n- Comprehensive logging and audit trails\n- Backup and restore functionality\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll configuration operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 14\n- **Functions:** 2\n- **Dependencies:** 24\n\n## Class Hierarchy\n\n- **ProductionEnvironment** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **ConfigurationFormat** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **ConfigurationPriority** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **ValidationLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **ProductionConfig**\n  - Methods: 0\n  - Complexity: 51\n- **DeploymentConfig**\n  - Methods: 0\n  - Complexity: 16\n- **SecurityConfig**\n  - Methods: 0\n  - Complexity: 26\n- **PerformanceConfig**\n  - Methods: 0\n  - Complexity: 29\n- **MonitoringConfig**\n  - Methods: 0\n  - Complexity: 21\n- **ConfigurationMetadata**\n  - Methods: 0\n  - Complexity: 15\n- **ConfigurationEncryption**\n  - Methods: 6\n  - Complexity: 26\n- **ConfigurationValidator**\n  - Methods: 4\n  - Complexity: 45\n- **ConfigurationMigrator**\n  - Methods: 4\n  - Complexity: 15\n- **ProductionConfigManager**\n  - Methods: 24\n  - Complexity: 118\n## Integration Points\n\n- Class: ProductionConfigManager\n- Function: create_production_config_manager\n- Function: initialize_production_config_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "configuration_guide missing required section: Overview",
        "configuration_guide missing required section: Details",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_proof_system_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_proof_system_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.test_proof_system_integration\n\nAPI endpoints for independent_core.test_proof_system_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/synthetic/fraud/data\n\n#### POST /create/synthetic/fraud/data\n\nCreate synthetic fraud detection data for testing.\n\nReturns:\n    Tuple of (X_train, y_train) with fraud detection features\n\n**Parameters:**\n\n- **num_samples** (query) *required*: int - Parameter: num_samples\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/synthetic/fraud/data?num_samples=example_num_samples\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/synthetic/fraud/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"num_samples\": \"example_num_samples\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.test_proof_system_integration\",\n    \"description\": \"API endpoints for independent_core.test_proof_system_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/synthetic/fraud/data\": {\n      \"post\": {\n        \"summary\": \"Create synthetic fraud detection data for testing.\\n\\nReturns:\\n    Tuple of (X_train, y_train) with fraud detection features\",\n        \"description\": \"Create synthetic fraud detection data for testing.\\n\\nReturns:\\n    Tuple of (X_train, y_train) with fraud detection features\",\n        \"operationId\": \"create_synthetic_fraud_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"num_samples\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: num_samples\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.test_proof_system_integration\n\n## Overview\n\nTest script for proof system integration in TrainingManager.\nDemonstrates comprehensive proof verification, confidence generation, and algebraic rule enforcement.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_proof_system_integration.py`\n\n## Dependencies\n\n- pathlib\n- numpy\n- sys\n- typing\n- training_manager\n- uuid\n- traceback\n- torch\n- datetime\n- json\n\n## Code Structure\n\n- **Total Lines:** 335\n- **Code Lines:** 252\n- **Comment Lines:** 33\n\n",
        "integration_guide": "\n# independent_core.test_proof_system_integration\n\nTest script for proof system integration in TrainingManager.\nDemonstrates comprehensive proof verification, confidence generation, and algebraic rule enforcement.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/test_proof_system_integration.py\n- **Total Classes:** 0\n- **Total Functions:** 3\n- **Dependencies:** pathlib, numpy, sys, typing, training_manager, uuid, traceback, torch, datetime, json\n\n## Contents\n**Functions (3):** create_synthetic_fraud_data, test_proof_system_integration, main\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nDemonstrates comprehensive proof verification, confidence generation, and algebraic rule enforcement.\n\"\"\"\n\n\ndef create_synthetic_fraud_data(num_samples: int = 1000) -> tuple:\n\"\"\"\n\nX_train = np.zeros((num_samples, 9))\n\ny_train = np.zeros(num_samples)\n\n\nfor i in range(num_samples):\n# Transaction amount (log-normal distribution)\n\nX_train, y_train = create_synthetic_fraud_data(num_samples=100)\n\nprint(f\"✓ Generated {len(X_train)} training samples\")\n\n# Display some sample features\n\nprint(\"  Sample transaction features:\")\n\nprint(\"\\n🎯 KEY CAPABILITIES DEMONSTRATED:\")\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.production_training_execution",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_training_execution.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_training_execution\n\nAPI endpoints for independent_core.production_training_execution\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //generate/gac/analysis\n\n#### POST //generate/gac/analysis\n\nGenerate detailed GAC system performance analysis\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/gac/analysis\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/gac/analysis\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //validate/deployment/readiness\n\n#### POST //validate/deployment/readiness\n\nValidate if model is ready for production deployment.\n\n**Parameters:**\n\n- **training_results** (query) *required*: string - Parameter: training_results\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/deployment/readiness?training_results=example_training_results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/deployment/readiness\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"training_results\": \"example_training_results\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /deploy/trained/model\n\n#### POST /deploy/trained/model\n\nDeploy trained model to production using deployment orchestrator.\n\n**Parameters:**\n\n- **training_results** (query) *required*: string - Parameter: training_results\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/deploy/trained/model?training_results=example_training_results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/deploy/trained/model\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"training_results\": \"example_training_results\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/comprehensive/results\n\n#### POST /save/comprehensive/results\n\nSave comprehensive training results, models, and analysis\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/comprehensive/results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/comprehensive/results\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_training_execution\",\n    \"description\": \"API endpoints for independent_core.production_training_execution\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/save/comprehensive/results\": {\n      \"post\": {\n        \"summary\": \"Save comprehensive training results, models, and analysis\",\n        \"description\": \"Save comprehensive training results, models, and analysis\",\n        \"operationId\": \"save_comprehensive_results\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/gac/analysis\": {\n      \"post\": {\n        \"summary\": \"Generate detailed GAC system performance analysis\",\n        \"description\": \"Generate detailed GAC system performance analysis\",\n        \"operationId\": \"_generate_gac_analysis\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/deploy/trained/model\": {\n      \"post\": {\n        \"summary\": \"Deploy trained model to production using deployment orchestrator.\",\n        \"description\": \"Deploy trained model to production using deployment orchestrator.\",\n        \"operationId\": \"deploy_trained_model\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"training_results\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: training_results\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"reason\": {\n                      \"type\": \"string\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"traceback\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//validate/deployment/readiness\": {\n      \"post\": {\n        \"summary\": \"Validate if model is ready for production deployment.\",\n        \"description\": \"Validate if model is ready for production deployment.\",\n        \"operationId\": \"_validate_deployment_readiness\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"training_results\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: training_results\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"ready\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"reason\": {\n                      \"type\": \"string\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_training_execution\n\n## Overview\n\n!/usr/bin/env python3\nPyTorch import for device detection\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_training_execution.py`\n\n## Dependencies\n\n- pathlib\n- brain_training_integration\n- numpy\n- os\n- sys\n- brain\n- logging\n- training_manager\n- financial_fraud_domain.ieee_fraud_data_loader\n- traceback\n- torch\n- financial_fraud_domain.deployment_orchestrator\n- datetime\n- dataclasses\n- json\n- argparse\n- time\n\n## Code Structure\n\n- **Total Lines:** 1026\n- **Code Lines:** 787\n- **Comment Lines:** 87\n\n",
        "deployment_guide": "\n# independent_core.production_training_execution\n\n!/usr/bin/env python3\nPyTorch import for device detection\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_training_execution.py\n- **Total Classes:** 1\n- **Total Functions:** 1\n- **Dependencies:** pathlib, brain_training_integration, numpy, os, sys, brain, logging, training_manager, financial_fraud_domain.ieee_fraud_data_loader, traceback, torch, financial_fraud_domain.deployment_orchestrator, datetime, dataclasses, json, argparse, time\n\n## Contents\n**Classes (1):** ProductionTrainingExecutor\n**Functions (1):** main\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nself.logger.info(f\"Training samples: {X_train.shape[0]:,} (expected: ~472,432 for 80% split)\")\n\nself.logger.info(f\"Memory usage: {X_train.nbytes / 1024**2:.1f} MB\")\n\n# ROOT FIX: Validate data size expectations\n\nf\"(difference: {abs(X_train.shape[0] - expected_training_size):,} samples)\"\n\nself.logger.info(f\"Training data size within expected range: {X_train.shape[0]:,} samples\")\n\n\nself.logger.info(f\"Validation samples: {X_val.shape[0]:,}\")\n\n\"training_samples\": int(X_train.shape[0]),\n\n\"validation_samples\": int(X_val.shape[0]) if val_data else 0,\n\nExamples:\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "deployment_guide missing required section: Monitoring"
      ]
    },
    {
      "module": "independent_core.test_brain_proof_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_brain_proof_integration.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.test_brain_proof_integration",
        "developer_guide": "# Developer Guide: independent_core.test_brain_proof_integration\n\n## Overview\n\nTest script for Brain-Proof system integration.\nValidates that the Brain system correctly integrates with the proof system components.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_brain_proof_integration.py`\n\n## Dependencies\n\n- pathlib\n- numpy\n- brain\n- sys\n- typing\n- training_manager\n- traceback\n- datetime\n- json\n\n## Code Structure\n\n- **Total Lines:** 267\n- **Code Lines:** 192\n- **Comment Lines:** 26\n\n",
        "integration_guide": "\n# independent_core.test_brain_proof_integration\n\nTest script for Brain-Proof system integration.\nValidates that the Brain system correctly integrates with the proof system components.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/test_brain_proof_integration.py\n- **Total Classes:** 0\n- **Total Functions:** 2\n- **Dependencies:** pathlib, numpy, brain, sys, typing, training_manager, traceback, datetime, json\n\n## Contents\n**Functions (2):** test_brain_proof_integration, main\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nnum_samples = 100\n\n# IEEE fraud detection features (simplified)\n\nX_fraud = np.random.randn(num_samples, 339)  # V1-V339 features\n\ny_fraud = np.random.choice([0, 1], size=num_samples, p=[0.8, 0.2])  # 20% fraud rate\n\n\nprint(f\"✓ Generated synthetic fraud data: {X_fraud.shape} samples\")\n\nprint(\"\\n🎯 KEY CAPABILITIES DEMONSTRATED:\")\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.performance_benchmarking",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/performance_benchmarking.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.performance_benchmarking\n\nAPI endpoints for independent_core.performance_benchmarking\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //benchmark/state/persistence\n\n#### POST //benchmark/state/persistence\n\nBenchmark state persistence performance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//benchmark/state/persistence\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//benchmark/state/persistence\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /export/results\n\n#### POST /export/results\n\nExport benchmark results to file\n\n**Parameters:**\n\n- **filepath** (query) *required*: str - Parameter: filepath\n- **format** (query) *required*: str - Parameter: format\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/results?filepath=example_filepath&format=example_format\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/results\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n    \"format\": \"example_format\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/performance/summary\n\n#### GET /get/performance/summary\n\nGet comprehensive performance summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.performance_benchmarking\",\n    \"description\": \"API endpoints for independent_core.performance_benchmarking\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//benchmark/state/persistence\": {\n      \"post\": {\n        \"summary\": \"Benchmark state persistence performance\",\n        \"description\": \"Benchmark state persistence performance\",\n        \"operationId\": \"_benchmark_state_persistence\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/summary\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive performance summary\",\n        \"description\": \"Get comprehensive performance summary\",\n        \"operationId\": \"get_performance_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/export/results\": {\n      \"post\": {\n        \"summary\": \"Export benchmark results to file\",\n        \"description\": \"Export benchmark results to file\",\n        \"operationId\": \"export_results\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: filepath\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"format\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: format\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.performance_benchmarking\n\n## Overview\n\nPerformance Benchmarking and Monitoring System\nComprehensive performance analysis for compression systems and Brain components\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/performance_benchmarking.py`\n\n## Dependencies\n\n- independent_core.compression_systems.padic\n- GPUtil\n- numpy\n- logging\n- independent_core.compression_systems.sheaf\n- contextlib\n- statistics\n- typing\n- collections\n- independent_core.compression_systems.tensor_decomposition\n- traceback\n- gc\n- psutil\n- threading\n- dataclasses\n- json\n- datetime\n- time\n\n## Code Structure\n\n- **Total Lines:** 871\n- **Code Lines:** 636\n- **Comment Lines:** 48\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.performance_benchmarking\n\nPerformance Benchmarking and Monitoring System\nComprehensive performance analysis for compression systems and Brain components\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/performance_benchmarking.py\n- **Total Classes:** 4\n- **Total Functions:** 3\n- **Dependencies:** independent_core.compression_systems.padic, GPUtil, numpy, logging, independent_core.compression_systems.sheaf, contextlib, statistics, typing, collections, independent_core.compression_systems.tensor_decomposition, traceback, gc, psutil, threading, dataclasses, json, datetime, time\n\n## Contents\n**Classes (4):** BenchmarkResult, PerformanceMetrics, ResourceMonitor, PerformanceBenchmarker\n**Functions (3):** quick_benchmark, compare_performance, simulate_training_session\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\ncpu_usage_percent: float\n\nmemory_usage_mb: float\n\ngpu_usage_percent: float = 0.0\n\navg_cpu_usage: float = 0.0\n\navg_memory_usage: float = 0.0\n\navg_gpu_usage: float = 0.0\n\n\"\"\"Monitors system resource usage during benchmarks\"\"\"\n\n\ncpu_usage = [data['cpu'] for data in self._resource_data]\n\nmemory_usage = [data['memory'] for data in self._resource_data]\n\ngpu_usage = [data['gpu'] for data in self._resource_data if 'gpu' in data]\n\n'avg_cpu_percent': statistics.mean(cpu_usage) if cpu_usage else 0.0,\n\n'max_cpu_percent': max(cpu_usage) if cpu_usage else 0.0,\n\n'avg_memory_mb': statistics.mean(memory_usage) if memory_usage else 0.0,\n\n'max_memory_mb': max(memory_usage) if memory_usage else 0.0,\n\n'sample_count': len(self._resource_data)\n\nif gpu_usage:\n\n'avg_gpu_percent': statistics.mean(gpu_usage),\n\n'max_gpu_percent': max(gpu_usage),\n\n# Calculate resource usage\n\ncpu_usage = resource_stats.get('avg_cpu_percent', 0.0)\n\nmemory_usage = resource_stats.get('avg_memory_mb', start_memory)\n\ngpu_usage = resource_stats.get('avg_gpu_percent', 0.0)\n\ncpu_usage_percent=cpu_usage,\n\nmemory_usage_mb=memory_usage,\n\ngpu_usage_percent=gpu_usage,\n\n# Update resource usage\n\nmetrics.avg_cpu_usage = statistics.mean([r.cpu_usage_percent for r in successful_results])\n\nmetrics.avg_memory_usage = statistics.mean([r.memory_usage_mb for r in successful_results])\n\nmetrics.avg_gpu_usage = statistics.mean([r.gpu_usage_percent for r in successful_results])\n\n# Add resource usage summary\n\nsummary['resource_usage'] = {\n\n'avg_cpu_percent': statistics.mean([r.cpu_usage_percent for r in successful_results]),\n\n'avg_memory_mb': statistics.mean([r.memory_usage_mb for r in successful_results]),\n\n'avg_gpu_percent': statistics.mean([r.gpu_usage_percent for r in successful_results]),\n\n'max_memory_mb': max([r.memory_usage_mb for r in successful_results])\n\n# Resource usage summary\n\nif 'resource_usage' in summary:\n\nusage = summary['resource_usage']\n\n\"Resource Usage:\",\n\nf\"  Average CPU: {usage['avg_cpu_percent']:.1f}%\",\n\nf\"  Average Memory: {usage['avg_memory_mb']:.1f} MB\",\n\nf\"  Average GPU: {usage['avg_gpu_percent']:.1f}%\",\n\nf\"  Peak Memory: {usage['max_memory_mb']:.1f} MB\",\n\nf\"  CPU Usage: {metrics['avg_cpu_usage']:.1f}%\",\n\nf\"  Memory Usage: {metrics['avg_memory_usage']:.1f} MB\",\n",
        "architecture": "# Architecture: independent_core.performance_benchmarking\n\nPerformance Benchmarking and Monitoring System\nComprehensive performance analysis for compression systems and Brain components\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 3\n- **Dependencies:** 18\n\n## Class Hierarchy\n\n- **BenchmarkResult**\n  - Methods: 0\n  - Complexity: 12\n- **PerformanceMetrics**\n  - Methods: 0\n  - Complexity: 15\n- **ResourceMonitor**\n  - Methods: 4\n  - Complexity: 22\n- **PerformanceBenchmarker**\n  - Methods: 21\n  - Complexity: 108\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.production_deployment_config",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_deployment_config.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_deployment_config\n\nAPI endpoints for independent_core.production_deployment_config\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //load/deployment/configurations\n\n#### POST //load/deployment/configurations\n\nLoad existing deployment configurations.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/deployment/configurations\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/deployment/configurations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/deployment/config\n\n#### POST //save/deployment/config\n\nSave deployment configuration to file.\n\n**Parameters:**\n\n- **environment** (query) *required*: DeploymentEnvironment - Parameter: environment\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/deployment/config?environment=example_environment&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/deployment/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"environment\": \"example_environment\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/deployment/config\n\n#### POST /create/deployment/config\n\nCreate deployment configuration for environment.\n\n**Parameters:**\n\n- **environment** (query) *required*: DeploymentEnvironment - Parameter: environment\n- **deployment_strategy** (query) *required*: DeploymentStrategy - Parameter: deployment_strategy\n- **resource_config** (query) *required*: string - Parameter: resource_config\n- **scaling_config** (query) *required*: string - Parameter: scaling_config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/deployment/config?environment=example_environment&deployment_strategy=example_deployment_strategy&resource_config=example_resource_config&scaling_config=example_scaling_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/deployment/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"environment\": \"example_environment\",\n    \"deployment_strategy\": \"example_deployment_strategy\",\n    \"resource_config\": \"example_resource_config\",\n    \"scaling_config\": \"example_scaling_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/deployment/config/manager\n\n#### POST /create/deployment/config/manager\n\nFactory function to create a DeploymentConfigManager instance.\n\n**Parameters:**\n\n- **config_dir** (query) *required*: str - Parameter: config_dir\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/deployment/config/manager?config_dir=example_config_dir\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/deployment/config/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_dir\": \"example_config_dir\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /deploy/to/environment\n\n#### POST /deploy/to/environment\n\nDeploy to specified environment.\n\n**Parameters:**\n\n- **environment** (query) *required*: DeploymentEnvironment - Parameter: environment\n- **deployment_config** (query) *required*: string - Parameter: deployment_config\n- **validate** (query) *required*: bool - Parameter: validate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/deploy/to/environment?environment=example_environment&deployment_config=example_deployment_config&validate=example_validate\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/deploy/to/environment\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"environment\": \"example_environment\",\n    \"deployment_config\": \"example_deployment_config\",\n    \"validate\": \"example_validate\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/deployment/analytics\n\n#### GET /get/deployment/analytics\n\nGet deployment analytics across all environments.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/deployment/analytics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/deployment/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/deployment/status\n\n#### GET /get/deployment/status\n\nGet deployment status for environment or all environments.\n\n**Parameters:**\n\n- **environment** (query) *required*: string - Parameter: environment\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/deployment/status?environment=example_environment\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/deployment/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"environment\": \"example_environment\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_deployment_config\",\n    \"description\": \"API endpoints for independent_core.production_deployment_config\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/deployment/config/manager\": {\n      \"post\": {\n        \"summary\": \"Factory function to create a DeploymentConfigManager instance.\",\n        \"description\": \"Factory function to create a DeploymentConfigManager instance.\",\n        \"operationId\": \"create_deployment_config_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_dir\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_dir\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/deployment/config\": {\n      \"post\": {\n        \"summary\": \"Create deployment configuration for environment.\",\n        \"description\": \"Create deployment configuration for environment.\",\n        \"operationId\": \"create_deployment_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"environment\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: environment\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DeploymentEnvironment\"\n            }\n          },\n          {\n            \"name\": \"deployment_strategy\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: deployment_strategy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DeploymentStrategy\"\n            }\n          },\n          {\n            \"name\": \"resource_config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: resource_config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"scaling_config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: scaling_config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/deploy/to/environment\": {\n      \"post\": {\n        \"summary\": \"Deploy to specified environment.\",\n        \"description\": \"Deploy to specified environment.\",\n        \"operationId\": \"deploy_to_environment\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"environment\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: environment\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DeploymentEnvironment\"\n            }\n          },\n          {\n            \"name\": \"deployment_config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: deployment_config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"validate\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: validate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/deployment/status\": {\n      \"get\": {\n        \"summary\": \"Get deployment status for environment or all environments.\",\n        \"description\": \"Get deployment status for environment or all environments.\",\n        \"operationId\": \"get_deployment_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"environment\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: environment\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/deployment/analytics\": {\n      \"get\": {\n        \"summary\": \"Get deployment analytics across all environments.\",\n        \"description\": \"Get deployment analytics across all environments.\",\n        \"operationId\": \"get_deployment_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_deployments\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_deployments\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"deployment_environments\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"deployment_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_deployments\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"deployment_success_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"average_deployment_time\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//load/deployment/configurations\": {\n      \"post\": {\n        \"summary\": \"Load existing deployment configurations.\",\n        \"description\": \"Load existing deployment configurations.\",\n        \"operationId\": \"_load_deployment_configurations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/deployment/config\": {\n      \"post\": {\n        \"summary\": \"Save deployment configuration to file.\",\n        \"description\": \"Save deployment configuration to file.\",\n        \"operationId\": \"_save_deployment_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"environment\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: environment\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DeploymentEnvironment\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_deployment_config\n\n## Overview\n\nProduction Deployment Configuration - Production deployment configuration and orchestration\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production deployment configuration and orchestration\ncapabilities, including environment-specific deployment strategies, resource management,\nscaling configuration, load balancing, health checks, and rollback strategies.\n\nKey Features:\n- Environment-specific deployment configuration (dev, staging, production)\n- Deployment strategy management with rollout configurations\n- Resource allocation and scaling configuration\n- Load balancing configuration for production workloads\n- Health check configuration and monitoring\n- Rollback configuration for automatic recovery\n- Deployment validation and readiness checks\n- Configuration templating for different environments\n- Integration with existing production configuration systems\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll deployment operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_deployment_config.py`\n\n## Dependencies\n\n- pathlib\n- socket\n- threading\n- datetime\n- json\n- time\n- contextlib\n- yaml\n- enum\n- copy\n- uuid\n- traceback\n- subprocess\n- shutil\n- gac_system.gac_config\n- jinja2\n- typing\n- tempfile\n- psutil\n- production_training_execution\n- logging\n- production_config_manager\n- dataclasses\n- os\n\n## Code Structure\n\n- **Total Lines:** 1271\n- **Code Lines:** 934\n- **Comment Lines:** 100\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "configuration_guide": "\n# independent_core.production_deployment_config\n\nProduction Deployment Configuration - Production deployment configuration and orchestration\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production deployment configuration and orchestration\ncapabilities, including environment-specific deployment strategies, resource management,\nscaling configuration, load balancing, health checks, and rollback strategies.\n\nKey Features:\n- Environment-specific deployment configuration (dev, staging, production)\n- Deployment strategy management with rollout configurations\n- Resource allocation and scaling configuration\n- Load balancing configuration for production workloads\n- Health check configuration and monitoring\n- Rollback configuration for automatic recovery\n- Deployment validation and readiness checks\n- Configuration templating for different environments\n- Integration with existing production configuration systems\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll deployment operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_deployment_config.py\n- **Total Classes:** 17\n- **Total Functions:** 1\n- **Dependencies:** pathlib, socket, threading, datetime, json, time, contextlib, yaml, enum, copy, uuid, traceback, subprocess, shutil, gac_system.gac_config, jinja2, typing, tempfile, psutil, production_training_execution, logging, production_config_manager, dataclasses, os\n\n## Contents\n**Classes (17):** DeploymentEnvironment, DeploymentStrategy, ScalingStrategy, LoadBalancingAlgorithm, HealthCheckType, RollbackTrigger, ResourceConfig, ScalingConfig, LoadBalancingConfig, HealthCheckConfig, RollbackConfig, DeploymentStrategyConfig, DeploymentValidation, DeploymentTemplate, DeploymentOrchestrator, TemplateRenderer, DeploymentConfigManager\n**Functions (1):** create_deployment_config_manager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: DeploymentConfigManager\nFunction: create_deployment_config_manager\nFunction: initialize_deployment_config_manager\n\n## Examples\n# Example usage\n\n# Initialize with sample integrations\n",
        "deployment_guide": "\n# independent_core.production_deployment_config\n\nProduction Deployment Configuration - Production deployment configuration and orchestration\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production deployment configuration and orchestration\ncapabilities, including environment-specific deployment strategies, resource management,\nscaling configuration, load balancing, health checks, and rollback strategies.\n\nKey Features:\n- Environment-specific deployment configuration (dev, staging, production)\n- Deployment strategy management with rollout configurations\n- Resource allocation and scaling configuration\n- Load balancing configuration for production workloads\n- Health check configuration and monitoring\n- Rollback configuration for automatic recovery\n- Deployment validation and readiness checks\n- Configuration templating for different environments\n- Integration with existing production configuration systems\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll deployment operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_deployment_config.py\n- **Total Classes:** 17\n- **Total Functions:** 1\n- **Dependencies:** pathlib, socket, threading, datetime, json, time, contextlib, yaml, enum, copy, uuid, traceback, subprocess, shutil, gac_system.gac_config, jinja2, typing, tempfile, psutil, production_training_execution, logging, production_config_manager, dataclasses, os\n\n## Contents\n**Classes (17):** DeploymentEnvironment, DeploymentStrategy, ScalingStrategy, LoadBalancingAlgorithm, HealthCheckType, RollbackTrigger, ResourceConfig, ScalingConfig, LoadBalancingConfig, HealthCheckConfig, RollbackConfig, DeploymentStrategyConfig, DeploymentValidation, DeploymentTemplate, DeploymentOrchestrator, TemplateRenderer, DeploymentConfigManager\n**Functions (1):** create_deployment_config_manager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: DeploymentConfigManager\nFunction: create_deployment_config_manager\nFunction: initialize_deployment_config_manager\n\n## Examples\n# Example usage\n\n# Initialize with sample integrations\n",
        "architecture": "# Architecture: independent_core.production_deployment_config\n\nProduction Deployment Configuration - Production deployment configuration and orchestration\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production deployment configuration and orchestration\ncapabilities, including environment-specific deployment strategies, resource management,\nscaling configuration, load balancing, health checks, and rollback strategies.\n\nKey Features:\n- Environment-specific deployment configuration (dev, staging, production)\n- Deployment strategy management with rollout configurations\n- Resource allocation and scaling configuration\n- Load balancing configuration for production workloads\n- Health check configuration and monitoring\n- Rollback configuration for automatic recovery\n- Deployment validation and readiness checks\n- Configuration templating for different environments\n- Integration with existing production configuration systems\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll deployment operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 17\n- **Functions:** 1\n- **Dependencies:** 24\n\n## Class Hierarchy\n\n- **DeploymentEnvironment** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **DeploymentStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **ScalingStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **LoadBalancingAlgorithm** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **HealthCheckType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **RollbackTrigger** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **ResourceConfig**\n  - Methods: 0\n  - Complexity: 26\n- **ScalingConfig**\n  - Methods: 0\n  - Complexity: 21\n- **LoadBalancingConfig**\n  - Methods: 0\n  - Complexity: 26\n- **HealthCheckConfig**\n  - Methods: 0\n  - Complexity: 25\n- **RollbackConfig**\n  - Methods: 0\n  - Complexity: 18\n- **DeploymentStrategyConfig**\n  - Methods: 0\n  - Complexity: 21\n- **DeploymentValidation**\n  - Methods: 0\n  - Complexity: 12\n- **DeploymentTemplate**\n  - Methods: 0\n  - Complexity: 13\n- **DeploymentOrchestrator**\n  - Methods: 16\n  - Complexity: 79\n- **TemplateRenderer**\n  - Methods: 3\n  - Complexity: 11\n- **DeploymentConfigManager**\n  - Methods: 26\n  - Complexity: 122\n## Integration Points\n\n- Class: DeploymentConfigManager\n- Function: create_deployment_config_manager\n- Function: initialize_deployment_config_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "configuration_guide missing required section: Overview",
        "configuration_guide missing required section: Details",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.production_security_hardening",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_hardening.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_security_hardening\n\nAPI endpoints for independent_core.production_security_hardening\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //load/builtin/rules\n\n#### POST //load/builtin/rules\n\nLoad built-in security hardening rules.\n\n🔒 Authentication required\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000//load/builtin/rules\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/builtin/rules\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //load/configuration\n\n#### POST //load/configuration\n\nLoad hardening configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/configuration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //load/hardening/rules\n\n#### POST //load/hardening/rules\n\nLoad hardening rules from definitions.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/hardening/rules\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/hardening/rules\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/execution/results\n\n#### POST //save/execution/results\n\nSave execution results to storage.\n\n**Parameters:**\n\n- **results** (query) *required*: string - Parameter: results\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/execution/results?results=example_results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/execution/results\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"results\": \"example_results\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /add/custom/rule\n\n#### POST /add/custom/rule\n\nAdd a custom hardening rule.\n\n**Parameters:**\n\n- **rule** (query) *required*: SecurityHardeningRule - Parameter: rule\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/add/custom/rule?rule=example_rule\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/add/custom/rule\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"rule\": \"example_rule\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /assess/compliance\n\n#### POST /assess/compliance\n\nAssess compliance against a specific standard.\n\n**Parameters:**\n\n- **standard** (query) *required*: ComplianceStandard - Parameter: standard\n- **hardening_results** (query) *required*: string - Parameter: hardening_results\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/assess/compliance?standard=example_standard&hardening_results=example_hardening_results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/assess/compliance\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"standard\": \"example_standard\",\n    \"hardening_results\": \"example_hardening_results\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/baseline\n\n#### POST /create/baseline\n\nCreate a new security baseline.\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n- **hardening_level** (query) *required*: HardeningLevel - Parameter: hardening_level\n- **rules** (query) *required*: string - Parameter: rules\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/baseline?name=example_name&hardening_level=example_hardening_level&rules=example_rules\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/baseline\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n    \"hardening_level\": \"example_hardening_level\",\n    \"rules\": \"example_rules\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/active/baseline\n\n#### GET /get/active/baseline\n\nGet the active baseline for a name.\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/active/baseline?name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/active/baseline\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/applicable/rules\n\n#### GET /get/applicable/rules\n\nGet applicable hardening rules based on criteria.\n\n**Parameters:**\n\n- **hardening_level** (query) *required*: string - Parameter: hardening_level\n- **categories** (query) *required*: string - Parameter: categories\n- **compliance_standards** (query) *required*: string - Parameter: compliance_standards\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/applicable/rules?hardening_level=example_hardening_level&categories=example_categories&compliance_standards=example_compliance_standards\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/applicable/rules\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"hardening_level\": \"example_hardening_level\",\n    \"categories\": \"example_categories\",\n    \"compliance_standards\": \"example_compliance_standards\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/baseline\n\n#### GET /get/baseline\n\nGet a security baseline by ID.\n\n**Parameters:**\n\n- **baseline_id** (query) *required*: str - Parameter: baseline_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/baseline?baseline_id=example_baseline_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/baseline\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"baseline_id\": \"example_baseline_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/compliance/status\n\n#### GET /get/compliance/status\n\nGet overall compliance status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/compliance/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/compliance/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/hardening/status\n\n#### GET /get/hardening/status\n\nGet current hardening system status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hardening/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hardening/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_security_hardening\",\n    \"description\": \"API endpoints for independent_core.production_security_hardening\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/baseline\": {\n      \"post\": {\n        \"summary\": \"Create a new security baseline.\",\n        \"description\": \"Create a new security baseline.\",\n        \"operationId\": \"create_baseline\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"hardening_level\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: hardening_level\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"HardeningLevel\"\n            }\n          },\n          {\n            \"name\": \"rules\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: rules\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/baseline\": {\n      \"get\": {\n        \"summary\": \"Get a security baseline by ID.\",\n        \"description\": \"Get a security baseline by ID.\",\n        \"operationId\": \"get_baseline\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"baseline_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: baseline_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/active/baseline\": {\n      \"get\": {\n        \"summary\": \"Get the active baseline for a name.\",\n        \"description\": \"Get the active baseline for a name.\",\n        \"operationId\": \"get_active_baseline\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/configuration\": {\n      \"post\": {\n        \"summary\": \"Load hardening configuration.\",\n        \"description\": \"Load hardening configuration.\",\n        \"operationId\": \"_load_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/hardening/rules\": {\n      \"post\": {\n        \"summary\": \"Load hardening rules from definitions.\",\n        \"description\": \"Load hardening rules from definitions.\",\n        \"operationId\": \"_load_hardening_rules\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/builtin/rules\": {\n      \"post\": {\n        \"summary\": \"Load built-in security hardening rules.\",\n        \"description\": \"Load built-in security hardening rules.\",\n        \"operationId\": \"_load_builtin_rules\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"/add/custom/rule\": {\n      \"post\": {\n        \"summary\": \"Add a custom hardening rule.\",\n        \"description\": \"Add a custom hardening rule.\",\n        \"operationId\": \"add_custom_rule\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"rule\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: rule\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SecurityHardeningRule\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/applicable/rules\": {\n      \"get\": {\n        \"summary\": \"Get applicable hardening rules based on criteria.\",\n        \"description\": \"Get applicable hardening rules based on criteria.\",\n        \"operationId\": \"get_applicable_rules\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"hardening_level\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: hardening_level\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"categories\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: categories\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"compliance_standards\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: compliance_standards\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//save/execution/results\": {\n      \"post\": {\n        \"summary\": \"Save execution results to storage.\",\n        \"description\": \"Save execution results to storage.\",\n        \"operationId\": \"_save_execution_results\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"results\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: results\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/hardening/status\": {\n      \"get\": {\n        \"summary\": \"Get current hardening system status.\",\n        \"description\": \"Get current hardening system status.\",\n        \"operationId\": \"get_hardening_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"hardening_level\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"enabled_categories\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_rules\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"executed_rules\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"successful_rules\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"failed_rules\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"storage_path\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"running\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/assess/compliance\": {\n      \"post\": {\n        \"summary\": \"Assess compliance against a specific standard.\",\n        \"description\": \"Assess compliance against a specific standard.\",\n        \"operationId\": \"assess_compliance\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"standard\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: standard\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ComplianceStandard\"\n            }\n          },\n          {\n            \"name\": \"hardening_results\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: hardening_results\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"standard\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compliance_score\": {\n                      \"type\": \"number\"\n                    },\n                    \"total_requirements\": {\n                      \"type\": \"number\"\n                    },\n                    \"met_requirements\": {\n                      \"type\": \"number\"\n                    },\n                    \"assessment_results\": {\n                      \"type\": \"array\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/compliance/status\": {\n      \"get\": {\n        \"summary\": \"Get overall compliance status.\",\n        \"description\": \"Get overall compliance status.\",\n        \"operationId\": \"get_compliance_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_requirements\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"standards_supported\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"assessments_completed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"storage_path\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_security_hardening\n\n## Overview\n\nProduction Security Hardening - Production security hardening and compliance system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security hardening and compliance management\ncapabilities, including automated hardening rules, compliance checking, security baseline\nestablishment, vulnerability assessment, and security policy enforcement.\n\nKey Features:\n- Multi-level security hardening (BASIC, STANDARD, ENHANCED, MAXIMUM, COMPLIANCE)\n- Comprehensive compliance management against industry standards\n- Automated hardening rules with system configuration\n- Security baseline establishment and maintenance\n- Vulnerability assessment and automated mitigation  \n- Security policy enforcement with real-time monitoring\n- Configuration hardening for all system components\n- Access control hardening with least privilege principles\n- Network security hardening with traffic segmentation\n- Application security hardening with secure coding practices\n- Database security hardening with encryption and access control\n- Infrastructure security hardening with secure deployment\n- Security testing with automated scanning and validation\n- Security training and awareness program management\n- Incident response planning and automated procedures\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security hardening operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_hardening.py`\n\n## Dependencies\n\n- pathlib\n- socket\n- statistics\n- platform\n- threading\n- datetime\n- json\n- time\n- enum\n- uuid\n- traceback\n- subprocess\n- shutil\n- re\n- typing\n- production_security_config\n- tempfile\n- hashlib\n- ssl\n- concurrent.futures\n- logging\n- production_config_manager\n- production_monitoring_system\n- base64\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 1473\n- **Code Lines:** 1231\n- **Comment Lines:** 65\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "security_guide": "\n# independent_core.production_security_hardening\n\nProduction Security Hardening - Production security hardening and compliance system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security hardening and compliance management\ncapabilities, including automated hardening rules, compliance checking, security baseline\nestablishment, vulnerability assessment, and security policy enforcement.\n\nKey Features:\n- Multi-level security hardening (BASIC, STANDARD, ENHANCED, MAXIMUM, COMPLIANCE)\n- Comprehensive compliance management against industry standards\n- Automated hardening rules with system configuration\n- Security baseline establishment and maintenance\n- Vulnerability assessment and automated mitigation  \n- Security policy enforcement with real-time monitoring\n- Configuration hardening for all system components\n- Access control hardening with least privilege principles\n- Network security hardening with traffic segmentation\n- Application security hardening with secure coding practices\n- Database security hardening with encryption and access control\n- Infrastructure security hardening with secure deployment\n- Security testing with automated scanning and validation\n- Security training and awareness program management\n- Incident response planning and automated procedures\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security hardening operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_hardening.py\n- **Total Classes:** 12\n- **Total Functions:** 3\n- **Dependencies:** pathlib, socket, statistics, platform, threading, datetime, json, time, enum, uuid, traceback, subprocess, shutil, re, typing, production_security_config, tempfile, hashlib, ssl, concurrent.futures, logging, production_config_manager, production_monitoring_system, base64, dataclasses, collections, os\n\n## Contents\n**Classes (12):** HardeningLevel, HardeningCategory, HardeningStatus, VulnerabilityLevel, RemediationType, SecurityHardeningRule, ComplianceRequirement, HardeningResult, Vulnerability, SecurityBaselineManager, SecurityHardeningManager, ComplianceManager\n**Functions (3):** integrate_with_security_config, integrate_with_monitoring_system, collect_hardening_metrics\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: SecurityBaselineManager\nClass: SecurityHardeningManager\nClass: ComplianceManager\n\n## Examples\n\"Check IPv6 usage\",\n",
        "deployment_guide": "\n# independent_core.production_security_hardening\n\nProduction Security Hardening - Production security hardening and compliance system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security hardening and compliance management\ncapabilities, including automated hardening rules, compliance checking, security baseline\nestablishment, vulnerability assessment, and security policy enforcement.\n\nKey Features:\n- Multi-level security hardening (BASIC, STANDARD, ENHANCED, MAXIMUM, COMPLIANCE)\n- Comprehensive compliance management against industry standards\n- Automated hardening rules with system configuration\n- Security baseline establishment and maintenance\n- Vulnerability assessment and automated mitigation  \n- Security policy enforcement with real-time monitoring\n- Configuration hardening for all system components\n- Access control hardening with least privilege principles\n- Network security hardening with traffic segmentation\n- Application security hardening with secure coding practices\n- Database security hardening with encryption and access control\n- Infrastructure security hardening with secure deployment\n- Security testing with automated scanning and validation\n- Security training and awareness program management\n- Incident response planning and automated procedures\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security hardening operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_hardening.py\n- **Total Classes:** 12\n- **Total Functions:** 3\n- **Dependencies:** pathlib, socket, statistics, platform, threading, datetime, json, time, enum, uuid, traceback, subprocess, shutil, re, typing, production_security_config, tempfile, hashlib, ssl, concurrent.futures, logging, production_config_manager, production_monitoring_system, base64, dataclasses, collections, os\n\n## Contents\n**Classes (12):** HardeningLevel, HardeningCategory, HardeningStatus, VulnerabilityLevel, RemediationType, SecurityHardeningRule, ComplianceRequirement, HardeningResult, Vulnerability, SecurityBaselineManager, SecurityHardeningManager, ComplianceManager\n**Functions (3):** integrate_with_security_config, integrate_with_monitoring_system, collect_hardening_metrics\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: SecurityBaselineManager\nClass: SecurityHardeningManager\nClass: ComplianceManager\n\n## Examples\n\"Check IPv6 usage\",\n",
        "architecture": "# Architecture: independent_core.production_security_hardening\n\nProduction Security Hardening - Production security hardening and compliance system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security hardening and compliance management\ncapabilities, including automated hardening rules, compliance checking, security baseline\nestablishment, vulnerability assessment, and security policy enforcement.\n\nKey Features:\n- Multi-level security hardening (BASIC, STANDARD, ENHANCED, MAXIMUM, COMPLIANCE)\n- Comprehensive compliance management against industry standards\n- Automated hardening rules with system configuration\n- Security baseline establishment and maintenance\n- Vulnerability assessment and automated mitigation  \n- Security policy enforcement with real-time monitoring\n- Configuration hardening for all system components\n- Access control hardening with least privilege principles\n- Network security hardening with traffic segmentation\n- Application security hardening with secure coding practices\n- Database security hardening with encryption and access control\n- Infrastructure security hardening with secure deployment\n- Security testing with automated scanning and validation\n- Security training and awareness program management\n- Incident response planning and automated procedures\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security hardening operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 12\n- **Functions:** 3\n- **Dependencies:** 27\n\n## Class Hierarchy\n\n- **HardeningLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **HardeningCategory** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 11\n- **HardeningStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **VulnerabilityLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **RemediationType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **SecurityHardeningRule**\n  - Methods: 1\n  - Complexity: 21\n- **ComplianceRequirement**\n  - Methods: 1\n  - Complexity: 18\n- **HardeningResult**\n  - Methods: 1\n  - Complexity: 16\n- **Vulnerability**\n  - Methods: 1\n  - Complexity: 23\n- **SecurityBaselineManager**\n  - Methods: 5\n  - Complexity: 22\n- **SecurityHardeningManager**\n  - Methods: 15\n  - Complexity: 111\n- **ComplianceManager**\n  - Methods: 5\n  - Complexity: 39\n## Integration Points\n\n- Class: SecurityBaselineManager\n- Class: SecurityHardeningManager\n- Class: ComplianceManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "security_guide missing required section: Overview",
        "security_guide missing required section: Details",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.documentation_generator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/documentation_generator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.documentation_generator\n\nAPI endpoints for independent_core.documentation_generator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/supported/formats\n\n#### GET /get/supported/formats\n\nGet list of supported output formats\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/supported/formats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/supported/formats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.documentation_generator\",\n    \"description\": \"API endpoints for independent_core.documentation_generator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/supported/formats\": {\n      \"get\": {\n        \"summary\": \"Get list of supported output formats\",\n        \"description\": \"Get list of supported output formats\",\n        \"operationId\": \"get_supported_formats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.documentation_generator\n\n## Overview\n\nDocumentation Generator - Automated Multi-Format Documentation Generation\n\nAdvanced automated documentation generation system with multi-format output support\nfor comprehensive documentation of all 186 Python files in Saraphis Independent Core.\n\nSupports HTML, PDF, Markdown, RST, JSON output with sophisticated templating and styling.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/documentation_generator.py`\n\n## Dependencies\n\n- pathlib\n- shutil\n- concurrent.futures\n- logging\n- importlib.util\n- enum\n- typing\n- weasyprint\n- tempfile\n- asyncio\n- comprehensive_documentation\n- base64\n- datetime\n- subprocess\n- dataclasses\n- json\n- os\n\n## Code Structure\n\n- **Total Lines:** 939\n- **Code Lines:** 752\n- **Comment Lines:** 34\n\n## Complexity Indicators\n\n- High class count\n- Async programming\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.documentation_generator\n\nDocumentation Generator - Automated Multi-Format Documentation Generation\n\nAdvanced automated documentation generation system with multi-format output support\nfor comprehensive documentation of all 186 Python files in Saraphis Independent Core.\n\nSupports HTML, PDF, Markdown, RST, JSON output with sophisticated templating and styling.\n\n## Components Overview\n\n- **Classes:** 10\n- **Functions:** 0\n- **Dependencies:** 17\n\n## Class Hierarchy\n\n- **GeneratorType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **OutputFormat** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **DocumentationTheme** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **GenerationConfig**\n  - Methods: 0\n  - Complexity: 11\n- **GenerationResult**\n  - Methods: 0\n  - Complexity: 9\n- **HTMLGenerator**\n  - Methods: 10\n  - Complexity: 57\n- **PDFGenerator**\n  - Methods: 1\n  - Complexity: 9\n- **MarkdownGenerator**\n  - Methods: 3\n  - Complexity: 31\n- **JSONGenerator**\n  - Methods: 2\n  - Complexity: 13\n- **DocumentationGenerator**\n  - Methods: 3\n  - Complexity: 22\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_error_recovery",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_error_recovery.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.test_error_recovery\n\nAPI endpoints for independent_core.test_error_recovery\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/cached/result\n\n#### GET /get/cached/result\n\nGet cached result as fallback\n\n**Parameters:**\n\n- **key** (query) *required*: str - Parameter: key\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/cached/result?key=example_key\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/cached/result\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key\": \"example_key\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/degraded/service/result\n\n#### GET /get/degraded/service/result\n\nProvide degraded service result when main service fails\n\n**Parameters:**\n\n- **transaction** (query) *required*: string - Parameter: transaction\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/degraded/service/result?transaction=example_transaction\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/degraded/service/result\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"transaction\": \"example_transaction\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/static/rule/result\n\n#### GET /get/static/rule/result\n\nProvide static rule-based result as last resort\n\n**Parameters:**\n\n- **transaction** (query) *required*: string - Parameter: transaction\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/static/rule/result?transaction=example_transaction\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/static/rule/result\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"transaction\": \"example_transaction\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /main\n\n#### POST /main\n\nMain entry point for standalone testing\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/main\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/main\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.test_error_recovery\",\n    \"description\": \"API endpoints for independent_core.test_error_recovery\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/main\": {\n      \"post\": {\n        \"summary\": \"Main entry point for standalone testing\",\n        \"description\": \"Main entry point for standalone testing\",\n        \"operationId\": \"main\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/cached/result\": {\n      \"get\": {\n        \"summary\": \"Get cached result as fallback\",\n        \"description\": \"Get cached result as fallback\",\n        \"operationId\": \"get_cached_result\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/degraded/service/result\": {\n      \"get\": {\n        \"summary\": \"Provide degraded service result when main service fails\",\n        \"description\": \"Provide degraded service result when main service fails\",\n        \"operationId\": \"get_degraded_service_result\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"transaction\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: transaction\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"fraud_probability\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"risk_score\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"decision\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"confidence\": {\n                      \"type\": \"number\"\n                    },\n                    \"fallback_mode\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"processing_time_ms\": {\n                      \"type\": \"number\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/static/rule/result\": {\n      \"get\": {\n        \"summary\": \"Provide static rule-based result as last resort\",\n        \"description\": \"Provide static rule-based result as last resort\",\n        \"operationId\": \"get_static_rule_result\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"transaction\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: transaction\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"fraud_probability\": {\n                      \"type\": \"number\"\n                    },\n                    \"risk_score\": {\n                      \"type\": \"number\"\n                    },\n                    \"decision\": {\n                      \"type\": \"string\"\n                    },\n                    \"confidence\": {\n                      \"type\": \"number\"\n                    },\n                    \"static_fallback\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"processing_time_ms\": {\n                      \"type\": \"number\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.test_error_recovery\n\n## Overview\n\nError Recovery and Resilience Testing for Proof System Integration\nComprehensive testing of error handling, fault tolerance, and system recovery capabilities\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_error_recovery.py`\n\n## Dependencies\n\n- proof_system.proof_integration_manager\n- gc\n- threading\n- datetime\n- json\n- contextlib\n- time\n- proof_system.cryptographic_engine\n- traceback\n- training_manager\n- argparse\n- multiprocessing\n- sys\n- proof_system.ml_based_engine\n- typing\n- proof_system.algebraic_rule_enforcer\n- unittest.mock\n- random\n- proof_system.confidence_generator\n- signal\n- concurrent.futures\n- brain\n- logging\n- proof_system.rule_based_engine\n- asyncio\n- dataclasses\n- os\n\n## Code Structure\n\n- **Total Lines:** 1633\n- **Code Lines:** 1250\n- **Comment Lines:** 95\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.test_error_recovery\n\nError Recovery and Resilience Testing for Proof System Integration\nComprehensive testing of error handling, fault tolerance, and system recovery capabilities\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 5\n- **Dependencies:** 27\n\n## Class Hierarchy\n\n- **ErrorScenario**\n  - Methods: 0\n  - Complexity: 8\n- **RecoveryTestResult**\n  - Methods: 0\n  - Complexity: 11\n- **ErrorInjector**\n  - Methods: 6\n  - Complexity: 25\n- **CircuitBreaker**\n  - Methods: 5\n  - Complexity: 19\n- **RetryMechanism**\n  - Methods: 2\n  - Complexity: 11\n- **FallbackProvider**\n  - Methods: 5\n  - Complexity: 19\n- **ErrorRecoveryTests**\n  - Methods: 59\n  - Complexity: 240\n## Integration Points\n\n- Function: get_degraded_service_result\n- Function: _initialize_proof_manager\n- Function: _initialize_training_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_mathematical_properties",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_mathematical_properties.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.test_mathematical_properties",
        "developer_guide": "# Developer Guide: independent_core.test_mathematical_properties\n\n## Overview\n\nComprehensive Mathematical Property Tests\nTests mathematical correctness and algebraic properties of compression systems\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_mathematical_properties.py`\n\n## Dependencies\n\n- numpy\n- pytest\n- logging\n- independent_core.compression_systems.sheaf\n- independent_core.compression_systems.tensor_decomposition\n- typing\n- warnings\n- independent_core.compression_systems.service_interfaces.service_interfaces_core\n- traceback\n- independent_core.proof_system.algebraic_rule_enforcer\n- dataclasses\n- independent_core.compression_systems.padic\n- time\n\n## Code Structure\n\n- **Total Lines:** 825\n- **Code Lines:** 607\n- **Comment Lines:** 69\n\n## Complexity Indicators\n\n- High function count\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.domain_state",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/domain_state.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.domain_state\n\nAPI endpoints for independent_core.domain_state\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //load/existing/states\n\n#### POST //load/existing/states\n\nLoad existing domain states from storage.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/existing/states\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/existing/states\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/checkpoint\n\n#### POST /create/checkpoint\n\nCreate a checkpoint of current state.\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n- **metadata** (query) *required*: string - Parameter: metadata\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/checkpoint?name=example_name&metadata=example_metadata\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n    \"metadata\": \"example_metadata\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST /create/checkpoint\n\nCreate a named checkpoint for domain state.\n\nArgs:\n    domain_name: Name of the domain\n    checkpoint_name: Name for the checkpoint\n    metadata: Optional metadata to store with checkpoint\n    \nReturns:\n    True if checkpoint created successfully, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **checkpoint_name** (query) *required*: str - Name for the checkpoint\n- **metadata** (query) *required*: string - Optional metadata to store with checkpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/checkpoint?domain_name=example_domain_name&checkpoint_name=example_checkpoint_name&metadata=example_metadata\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"checkpoint_name\": \"example_checkpoint_name\",\n    \"metadata\": \"example_metadata\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /export/all/states\n\n#### POST /export/all/states\n\nExport all domain states to specified directory.\n\n**Parameters:**\n\n- **export_path** (query) *required*: Path - Parameter: export_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/all/states?export_path=example_export_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/all/states\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"export_path\": \"example_export_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/domain/state\n\n#### GET /get/domain/state\n\nGet domain's current state.\n\nArgs:\n    domain_name: Name of the domain\n    state_type: Optional specific state type to retrieve\n    \nReturns:\n    Complete DomainState or specific state component if state_type specified\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **state_type** (query) *required*: string - Optional specific state type to retrieve\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/state?domain_name=example_domain_name&state_type=example_state_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"state_type\": \"example_state_type\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/state/by/type\n\n#### GET /get/state/by/type\n\nGet state data by type.\n\n**Parameters:**\n\n- **state_type** (query) *required*: StateType - Parameter: state_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/state/by/type?state_type=example_state_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/state/by/type\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"state_type\": \"example_state_type\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/state/statistics\n\n#### GET /get/state/statistics\n\nGet comprehensive statistics about domain state.\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/state/statistics?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/state/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/state/versions\n\n#### GET /get/state/versions\n\nGet list of saved state versions for a domain.\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/state/versions?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/state/versions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /load/domain/state\n\n#### POST /load/domain/state\n\nLoad domain state from file.\n\nArgs:\n    domain_name: Name of the domain\n    filepath: Optional custom filepath (uses default if None)\n    \nReturns:\n    True if load successful, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **filepath** (query) *required*: string - Optional custom filepath (uses default if None)\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/domain/state?domain_name=example_domain_name&filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/domain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /reset/domain/state\n\n#### POST /reset/domain/state\n\nReset domain to initial state.\n\nArgs:\n    domain_name: Name of the domain\n    preserve_config: Whether to preserve configuration\n    \nReturns:\n    True if reset successful, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **preserve_config** (query) *required*: bool - Whether to preserve configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/reset/domain/state?domain_name=example_domain_name&preserve_config=example_preserve_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/reset/domain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"preserve_config\": \"example_preserve_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /restore/checkpoint\n\n#### POST /restore/checkpoint\n\nRestore domain state from checkpoint.\n\nArgs:\n    domain_name: Name of the domain\n    checkpoint_name: Name of checkpoint to restore\n    \nReturns:\n    True if restore successful, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **checkpoint_name** (query) *required*: str - Name of checkpoint to restore\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/restore/checkpoint?domain_name=example_domain_name&checkpoint_name=example_checkpoint_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/restore/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"checkpoint_name\": \"example_checkpoint_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/domain/state\n\n#### POST /save/domain/state\n\nPersist domain state to file.\n\nArgs:\n    domain_name: Name of the domain\n    filepath: Optional custom filepath (uses default if None)\n    \nReturns:\n    True if save successful, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **filepath** (query) *required*: string - Optional custom filepath (uses default if None)\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/domain/state?domain_name=example_domain_name&filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/domain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/domain/state\n\n#### PUT /update/domain/state\n\nUpdate domain state with new data.\n\nArgs:\n    domain_name: Name of the domain\n    state_update: Dictionary with state updates\n    update_type: Type of update operation\n    \nReturns:\n    True if update successful, False otherwise\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the domain\n- **state_update** (query) *required*: string - Dictionary with state updates\n- **update_type** (query) *required*: StateUpdateType - Type of update operation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/domain/state?domain_name=example_domain_name&state_update=example_state_update&update_type=example_update_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/domain/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"state_update\": \"example_state_update\",\n    \"update_type\": \"example_update_type\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/state/by/type\n\n#### PUT /update/state/by/type\n\nUpdate state data by type.\n\n**Parameters:**\n\n- **state_type** (query) *required*: StateType - Parameter: state_type\n- **data** (body) *required*: Any - Parameter: data\n- **update_type** (query) *required*: StateUpdateType - Parameter: update_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000/update/state/by/type?state_type=example_state_type&update_type=example_update_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/state/by/type\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nparams = {\n    \"state_type\": \"example_state_type\",\n    \"update_type\": \"example_update_type\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.domain_state\",\n    \"description\": \"API endpoints for independent_core.domain_state\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/state/by/type\": {\n      \"get\": {\n        \"summary\": \"Get state data by type.\",\n        \"description\": \"Get state data by type.\",\n        \"operationId\": \"get_state_by_type\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"state_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: state_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"StateType\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/state/by/type\": {\n      \"put\": {\n        \"summary\": \"Update state data by type.\",\n        \"description\": \"Update state data by type.\",\n        \"operationId\": \"update_state_by_type\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"state_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: state_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"StateType\"\n            }\n          },\n          {\n            \"name\": \"update_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: update_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"StateUpdateType\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"data\": {\n                    \"type\": \"Any\",\n                    \"description\": \"Parameter: data\"\n                  }\n                },\n                \"required\": [\n                  \"data\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/create/checkpoint\": {\n      \"post\": {\n        \"summary\": \"Create a named checkpoint for domain state.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    checkpoint_name: Name for the checkpoint\\n    metadata: Optional metadata to store with checkpoint\\n    \\nReturns:\\n    True if checkpoint created successfully, False otherwise\",\n        \"description\": \"Create a named checkpoint for domain state.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    checkpoint_name: Name for the checkpoint\\n    metadata: Optional metadata to store with checkpoint\\n    \\nReturns:\\n    True if checkpoint created successfully, False otherwise\",\n        \"operationId\": \"create_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"checkpoint_name\",\n            \"in\": \"query\",\n            \"description\": \"Name for the checkpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"metadata\",\n            \"in\": \"query\",\n            \"description\": \"Optional metadata to store with checkpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/existing/states\": {\n      \"post\": {\n        \"summary\": \"Load existing domain states from storage.\",\n        \"description\": \"Load existing domain states from storage.\",\n        \"operationId\": \"_load_existing_states\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/domain/state\": {\n      \"get\": {\n        \"summary\": \"Get domain's current state.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    state_type: Optional specific state type to retrieve\\n    \\nReturns:\\n    Complete DomainState or specific state component if state_type specified\",\n        \"description\": \"Get domain's current state.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    state_type: Optional specific state type to retrieve\\n    \\nReturns:\\n    Complete DomainState or specific state component if state_type specified\",\n        \"operationId\": \"get_domain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"state_type\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific state type to retrieve\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/domain/state\": {\n      \"put\": {\n        \"summary\": \"Update domain state with new data.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    state_update: Dictionary with state updates\\n    update_type: Type of update operation\\n    \\nReturns:\\n    True if update successful, False otherwise\",\n        \"description\": \"Update domain state with new data.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    state_update: Dictionary with state updates\\n    update_type: Type of update operation\\n    \\nReturns:\\n    True if update successful, False otherwise\",\n        \"operationId\": \"update_domain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"state_update\",\n            \"in\": \"query\",\n            \"description\": \"Dictionary with state updates\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"update_type\",\n            \"in\": \"query\",\n            \"description\": \"Type of update operation\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"StateUpdateType\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/save/domain/state\": {\n      \"post\": {\n        \"summary\": \"Persist domain state to file.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    filepath: Optional custom filepath (uses default if None)\\n    \\nReturns:\\n    True if save successful, False otherwise\",\n        \"description\": \"Persist domain state to file.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    filepath: Optional custom filepath (uses default if None)\\n    \\nReturns:\\n    True if save successful, False otherwise\",\n        \"operationId\": \"save_domain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Optional custom filepath (uses default if None)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/load/domain/state\": {\n      \"post\": {\n        \"summary\": \"Load domain state from file.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    filepath: Optional custom filepath (uses default if None)\\n    \\nReturns:\\n    True if load successful, False otherwise\",\n        \"description\": \"Load domain state from file.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    filepath: Optional custom filepath (uses default if None)\\n    \\nReturns:\\n    True if load successful, False otherwise\",\n        \"operationId\": \"load_domain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Optional custom filepath (uses default if None)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/reset/domain/state\": {\n      \"post\": {\n        \"summary\": \"Reset domain to initial state.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    preserve_config: Whether to preserve configuration\\n    \\nReturns:\\n    True if reset successful, False otherwise\",\n        \"description\": \"Reset domain to initial state.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    preserve_config: Whether to preserve configuration\\n    \\nReturns:\\n    True if reset successful, False otherwise\",\n        \"operationId\": \"reset_domain_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"preserve_config\",\n            \"in\": \"query\",\n            \"description\": \"Whether to preserve configuration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/restore/checkpoint\": {\n      \"post\": {\n        \"summary\": \"Restore domain state from checkpoint.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    checkpoint_name: Name of checkpoint to restore\\n    \\nReturns:\\n    True if restore successful, False otherwise\",\n        \"description\": \"Restore domain state from checkpoint.\\n\\nArgs:\\n    domain_name: Name of the domain\\n    checkpoint_name: Name of checkpoint to restore\\n    \\nReturns:\\n    True if restore successful, False otherwise\",\n        \"operationId\": \"restore_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"checkpoint_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of checkpoint to restore\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/state/versions\": {\n      \"get\": {\n        \"summary\": \"Get list of saved state versions for a domain.\",\n        \"description\": \"Get list of saved state versions for a domain.\",\n        \"operationId\": \"get_state_versions\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/state/statistics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive statistics about domain state.\",\n        \"description\": \"Get comprehensive statistics about domain state.\",\n        \"operationId\": \"get_state_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/export/all/states\": {\n      \"post\": {\n        \"summary\": \"Export all domain states to specified directory.\",\n        \"description\": \"Export all domain states to specified directory.\",\n        \"operationId\": \"export_all_states\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"export_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: export_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.domain_state\n\n## Overview\n\nDomain State Manager for Universal AI Core Brain.\nManages per-domain state including learning progress, model parameters, and performance metrics.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/domain_state.py`\n\n## Dependencies\n\n- pathlib\n- numpy\n- logging\n- enum\n- typing\n- copy\n- pickle\n- hashlib\n- datetime\n- threading\n- dataclasses\n- json\n- re\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 838\n- **Code Lines:** 649\n- **Comment Lines:** 56\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.domain_state\n\nDomain State Manager for Universal AI Core Brain.\nManages per-domain state including learning progress, model parameters, and performance metrics.\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **TensorJSONEncoder**\n  - Methods: 1\n  - Complexity: 7\n- **StateType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **StateUpdateType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **StateVersion**\n  - Methods: 1\n  - Complexity: 10\n- **DomainState**\n  - Methods: 5\n  - Complexity: 54\n- **DomainStateManager**\n  - Methods: 16\n  - Complexity: 101\n## Integration Points\n\n- Class: DomainStateManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_integration_scenarios",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_integration_scenarios.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.test_integration_scenarios\n\nAPI endpoints for independent_core.test_integration_scenarios\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /main\n\n#### POST /main\n\nMain entry point for standalone testing\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/main\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/main\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/real/time/monitoring\n\n#### POST /test/real/time/monitoring\n\nTest real-time monitoring and alerting capabilities\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/real/time/monitoring\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/real/time/monitoring\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.test_integration_scenarios\",\n    \"description\": \"API endpoints for independent_core.test_integration_scenarios\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/main\": {\n      \"post\": {\n        \"summary\": \"Main entry point for standalone testing\",\n        \"description\": \"Main entry point for standalone testing\",\n        \"operationId\": \"main\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/real/time/monitoring\": {\n      \"post\": {\n        \"summary\": \"Test real-time monitoring and alerting capabilities\",\n        \"description\": \"Test real-time monitoring and alerting capabilities\",\n        \"operationId\": \"test_real_time_monitoring\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.test_integration_scenarios\n\n## Overview\n\nAdvanced Integration Scenarios for Proof System Testing\nTests complex end-to-end scenarios, cross-system integration, and production simulation\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_integration_scenarios.py`\n\n## Dependencies\n\n- proof_system.proof_integration_manager\n- threading\n- datetime\n- json\n- time\n- proof_system.cryptographic_engine\n- training_manager\n- argparse\n- multiprocessing\n- sys\n- proof_system.ml_based_engine\n- typing\n- proof_system.algebraic_rule_enforcer\n- psutil\n- unittest.mock\n- random\n- proof_system.confidence_generator\n- concurrent.futures\n- brain\n- logging\n- proof_system.rule_based_engine\n- asyncio\n- unittest\n- dataclasses\n- os\n\n## Code Structure\n\n- **Total Lines:** 1658\n- **Code Lines:** 1251\n- **Comment Lines:** 104\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.test_integration_scenarios\n\nAdvanced Integration Scenarios for Proof System Testing\nTests complex end-to-end scenarios, cross-system integration, and production simulation\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/test_integration_scenarios.py\n- **Total Classes:** 5\n- **Total Functions:** 2\n- **Dependencies:** proof_system.proof_integration_manager, threading, datetime, json, time, proof_system.cryptographic_engine, training_manager, argparse, multiprocessing, sys, proof_system.ml_based_engine, typing, proof_system.algebraic_rule_enforcer, psutil, unittest.mock, random, proof_system.confidence_generator, concurrent.futures, brain, logging, proof_system.rule_based_engine, asyncio, unittest, dataclasses, os\n\n## Contents\n**Classes (5):** IntegrationTestResult, TransactionBatch, MockDataGenerator, SystemStateMonitor, AdvancedIntegrationScenarios\n**Functions (2):** main, stress_worker\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: _initialize_training_manager\nFunction: _initialize_proof_manager\n\n## Examples\nsamples = []\n\n\nsample = {\n\nsamples.append(sample)\n\n\n# Keep only last 1000 samples\n\nif len(samples) > 1000:\n\nsamples = samples[-1000:]\n\n\nif samples:\n\n'total_samples': len(samples),\n\n'duration_seconds': samples[-1]['timestamp'] - samples[0]['timestamp'],\n\n'avg': sum(s['cpu_percent'] for s in samples) / len(samples),\n\n'max': max(s['cpu_percent'] for s in samples),\n\n'min': min(s['cpu_percent'] for s in samples)\n\n'avg_percent': sum(s['memory_percent'] for s in samples) / len(samples),\n\n'max_percent': max(s['memory_percent'] for s in samples),\n\n'avg_used_mb': sum(s['memory_used_mb'] for s in samples) / len(samples),\n\n'max_used_mb': max(s['memory_used_mb'] for s in samples)\n\n'brain_results': brain_results[:5],  # Sample results\n\n'proof_results': proof_results[:5],  # Sample results\n\n'final_decisions': final_decisions[:5]  # Sample results\n\n'integration_samples': integration_results[:3]\n\n'sample_events': events[:3],\n\n'sample_results': processed_events[:3],\n\n'data_collection_rate': system_metrics.get('total_samples', 0) / system_metrics.get('duration_seconds', 1)\n\nif system_metrics.get('total_samples', 0) > 0:\n\nmonitoring_score = min(1.0, system_metrics['total_samples'] / 100)\n\n# Efficient usage: not too low (underutilized) or too high (overloaded)\n",
        "architecture": "# Architecture: independent_core.test_integration_scenarios\n\nAdvanced Integration Scenarios for Proof System Testing\nTests complex end-to-end scenarios, cross-system integration, and production simulation\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 2\n- **Dependencies:** 25\n\n## Class Hierarchy\n\n- **IntegrationTestResult**\n  - Methods: 0\n  - Complexity: 8\n- **TransactionBatch**\n  - Methods: 0\n  - Complexity: 5\n- **MockDataGenerator**\n  - Methods: 3\n  - Complexity: 11\n- **SystemStateMonitor**\n  - Methods: 4\n  - Complexity: 18\n- **AdvancedIntegrationScenarios**\n  - Methods: 25\n  - Complexity: 176\n## Integration Points\n\n- Function: _initialize_training_manager\n- Function: _initialize_proof_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.production_security_enforcer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_enforcer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_security_enforcer\n\nAPI endpoints for independent_core.production_security_enforcer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //check/policy/violation\n\n#### POST //check/policy/violation\n\nCheck if request violates a specific policy.\n\n**Parameters:**\n\n- **request_context** (query) *required*: string - Parameter: request_context\n- **policy** (query) *required*: SecurityPolicy - Parameter: policy\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//check/policy/violation?request_context=example_request_context&policy=example_policy\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//check/policy/violation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request_context\": \"example_request_context\",\n    \"policy\": \"example_policy\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //evaluate/condition\n\n#### POST //evaluate/condition\n\nEvaluate a policy condition against request context.\n\n**Parameters:**\n\n- **request_context** (query) *required*: string - Parameter: request_context\n- **condition** (query) *required*: string - Parameter: condition\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//evaluate/condition?request_context=example_request_context&condition=example_condition\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//evaluate/condition\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request_context\": \"example_request_context\",\n    \"condition\": \"example_condition\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //load/configuration\n\n#### POST //load/configuration\n\nLoad enforcer configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/configuration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //load/security/policies\n\n#### POST //load/security/policies\n\nLoad security policies and enforcement rules.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/security/policies\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/security/policies\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //log/security/event\n\n#### POST //log/security/event\n\nLog security event to security log.\n\n**Parameters:**\n\n- **violation** (query) *required*: PolicyViolation - Parameter: violation\n- **policy** (query) *required*: SecurityPolicy - Parameter: policy\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//log/security/event?violation=example_violation&policy=example_policy\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//log/security/event\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"violation\": \"example_violation\",\n    \"policy\": \"example_policy\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //save/custom/policies\n\n#### POST //save/custom/policies\n\nSave custom policies to file.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/custom/policies\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/custom/policies\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/violation\n\n#### POST //save/violation\n\nSave violation to storage.\n\n**Parameters:**\n\n- **violation** (query) *required*: PolicyViolation - Parameter: violation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/violation?violation=example_violation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/violation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"violation\": \"example_violation\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/policies/from/findings\n\n#### POST /create/policies/from/findings\n\nAPI endpoint: create_policies_from_findings\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/policies/from/findings\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/policies/from/findings\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /evaluate/access/request\n\n#### POST /evaluate/access/request\n\nEvaluate access request.\n\n**Parameters:**\n\n- **user_id** (path) *required*: str - Parameter: user_id\n- **resource** (query) *required*: str - Parameter: resource\n- **action** (query) *required*: str - Parameter: action\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/evaluate/access/request?resource=example_resource&action=example_action\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/evaluate/access/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"resource\": \"example_resource\",\n    \"action\": \"example_action\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /evaluate/request\n\n#### POST /evaluate/request\n\nEvaluate a request against security policies.\n\n**Parameters:**\n\n- **request_context** (query) *required*: string - Parameter: request_context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/evaluate/request?request_context=example_request_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/evaluate/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request_context\": \"example_request_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/enforcement/status\n\n#### GET /get/enforcement/status\n\nGet current enforcement system status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/enforcement/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/enforcement/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_security_enforcer\",\n    \"description\": \"API endpoints for independent_core.production_security_enforcer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//load/configuration\": {\n      \"post\": {\n        \"summary\": \"Load enforcer configuration.\",\n        \"description\": \"Load enforcer configuration.\",\n        \"operationId\": \"_load_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/security/policies\": {\n      \"post\": {\n        \"summary\": \"Load security policies and enforcement rules.\",\n        \"description\": \"Load security policies and enforcement rules.\",\n        \"operationId\": \"_load_security_policies\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/custom/policies\": {\n      \"post\": {\n        \"summary\": \"Save custom policies to file.\",\n        \"description\": \"Save custom policies to file.\",\n        \"operationId\": \"_save_custom_policies\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//log/security/event\": {\n      \"post\": {\n        \"summary\": \"Log security event to security log.\",\n        \"description\": \"Log security event to security log.\",\n        \"operationId\": \"_log_security_event\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"violation\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: violation\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"PolicyViolation\"\n            }\n          },\n          {\n            \"name\": \"policy\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: policy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SecurityPolicy\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/violation\": {\n      \"post\": {\n        \"summary\": \"Save violation to storage.\",\n        \"description\": \"Save violation to storage.\",\n        \"operationId\": \"_save_violation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"violation\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: violation\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"PolicyViolation\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/evaluate/request\": {\n      \"post\": {\n        \"summary\": \"Evaluate a request against security policies.\",\n        \"description\": \"Evaluate a request against security policies.\",\n        \"operationId\": \"evaluate_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request_context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request_context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"allowed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"violations\": {\n                      \"type\": \"array\"\n                    },\n                    \"actions_taken\": {\n                      \"type\": \"array\"\n                    },\n                    \"policies_evaluated\": {\n                      \"type\": \"array\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//check/policy/violation\": {\n      \"post\": {\n        \"summary\": \"Check if request violates a specific policy.\",\n        \"description\": \"Check if request violates a specific policy.\",\n        \"operationId\": \"_check_policy_violation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request_context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request_context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"policy\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: policy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SecurityPolicy\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//evaluate/condition\": {\n      \"post\": {\n        \"summary\": \"Evaluate a policy condition against request context.\",\n        \"description\": \"Evaluate a policy condition against request context.\",\n        \"operationId\": \"_evaluate_condition\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request_context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request_context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"condition\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: condition\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/enforcement/status\": {\n      \"get\": {\n        \"summary\": \"Get current enforcement system status.\",\n        \"description\": \"Get current enforcement system status.\",\n        \"operationId\": \"get_enforcement_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"running\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_policies\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"enabled_policies\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_violations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_violations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"blocked_ips\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"blocked_users\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"quarantined_files\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"enforcement_threads\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"storage_path\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/evaluate/access/request\": {\n      \"post\": {\n        \"summary\": \"Evaluate access request.\",\n        \"description\": \"Evaluate access request.\",\n        \"operationId\": \"evaluate_access_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"user_id\",\n            \"in\": \"path\",\n            \"description\": \"Parameter: user_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"resource\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: resource\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"action\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: action\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/policies/from/findings\": {\n      \"post\": {\n        \"summary\": \"API endpoint: create_policies_from_findings\",\n        \"description\": \"API endpoint: create_policies_from_findings\",\n        \"operationId\": \"create_policies_from_findings\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_security_enforcer\n\n## Overview\n\nProduction Security Enforcer - Production security policy enforcement system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security policy enforcement capabilities,\nincluding real-time policy monitoring, automated enforcement actions, threat prevention,\naccess control enforcement, data protection, network security, and application security.\n\nKey Features:\n- Multi-level enforcement (MONITOR, WARN, BLOCK, QUARANTINE, TERMINATE)\n- Multi-type policy enforcement (ACCESS_CONTROL, DATA_PROTECTION, NETWORK_SECURITY, APPLICATION_SECURITY)\n- Real-time policy enforcement with automated monitoring\n- Dynamic access control with role-based and attribute-based authorization\n- Data protection with encryption, masking, and DLP capabilities\n- Network security with traffic filtering and intrusion prevention\n- Application security with input validation and output encoding\n- Threat prevention with automated blocking and quarantine\n- Incident response with automated containment actions\n- Policy management with version control and audit trails\n- Compliance enforcement with regulatory requirement mapping\n- Security automation with orchestrated response workflows\n- Policy analytics with performance metrics and reporting\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security enforcement operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_security_enforcer.py`\n\n## Dependencies\n\n- pathlib\n- socket\n- ipaddress\n- statistics\n- threading\n- datetime\n- json\n- time\n- production_security_hardening\n- production_security_auditor\n- enum\n- uuid\n- traceback\n- re\n- typing\n- production_security_config\n- tempfile\n- hashlib\n- concurrent.futures\n- logging\n- production_monitoring_system\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 1295\n- **Code Lines:** 1023\n- **Comment Lines:** 66\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "security_guide": "\n# independent_core.production_security_enforcer\n\nProduction Security Enforcer - Production security policy enforcement system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security policy enforcement capabilities,\nincluding real-time policy monitoring, automated enforcement actions, threat prevention,\naccess control enforcement, data protection, network security, and application security.\n\nKey Features:\n- Multi-level enforcement (MONITOR, WARN, BLOCK, QUARANTINE, TERMINATE)\n- Multi-type policy enforcement (ACCESS_CONTROL, DATA_PROTECTION, NETWORK_SECURITY, APPLICATION_SECURITY)\n- Real-time policy enforcement with automated monitoring\n- Dynamic access control with role-based and attribute-based authorization\n- Data protection with encryption, masking, and DLP capabilities\n- Network security with traffic filtering and intrusion prevention\n- Application security with input validation and output encoding\n- Threat prevention with automated blocking and quarantine\n- Incident response with automated containment actions\n- Policy management with version control and audit trails\n- Compliance enforcement with regulatory requirement mapping\n- Security automation with orchestrated response workflows\n- Policy analytics with performance metrics and reporting\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security enforcement operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_enforcer.py\n- **Total Classes:** 12\n- **Total Functions:** 4\n- **Dependencies:** pathlib, socket, ipaddress, statistics, threading, datetime, json, time, production_security_hardening, production_security_auditor, enum, uuid, traceback, re, typing, production_security_config, tempfile, hashlib, concurrent.futures, logging, production_monitoring_system, dataclasses, collections, os\n\n## Contents\n**Classes (12):** EnforcementLevel, PolicyType, EnforcementAction, ViolationSeverity, SecurityPolicy, PolicyViolation, EnforcementRule, SecurityEnforcer, AccessControlEnforcer, DataProtectionEnforcer, NetworkSecurityEnforcer, ApplicationSecurityEnforcer\n**Functions (4):** integrate_with_monitoring_system, integrate_with_audit_system, collect_enforcement_metrics, create_policies_from_findings\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\n\"\"\"Simulate violation detection (for demonstration).\"\"\"\n\n# Return False to avoid constant violations in demonstration\n\nsource_ip=\"192.168.1.100\",  # Example IP\n",
        "deployment_guide": "\n# independent_core.production_security_enforcer\n\nProduction Security Enforcer - Production security policy enforcement system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security policy enforcement capabilities,\nincluding real-time policy monitoring, automated enforcement actions, threat prevention,\naccess control enforcement, data protection, network security, and application security.\n\nKey Features:\n- Multi-level enforcement (MONITOR, WARN, BLOCK, QUARANTINE, TERMINATE)\n- Multi-type policy enforcement (ACCESS_CONTROL, DATA_PROTECTION, NETWORK_SECURITY, APPLICATION_SECURITY)\n- Real-time policy enforcement with automated monitoring\n- Dynamic access control with role-based and attribute-based authorization\n- Data protection with encryption, masking, and DLP capabilities\n- Network security with traffic filtering and intrusion prevention\n- Application security with input validation and output encoding\n- Threat prevention with automated blocking and quarantine\n- Incident response with automated containment actions\n- Policy management with version control and audit trails\n- Compliance enforcement with regulatory requirement mapping\n- Security automation with orchestrated response workflows\n- Policy analytics with performance metrics and reporting\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security enforcement operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_security_enforcer.py\n- **Total Classes:** 12\n- **Total Functions:** 4\n- **Dependencies:** pathlib, socket, ipaddress, statistics, threading, datetime, json, time, production_security_hardening, production_security_auditor, enum, uuid, traceback, re, typing, production_security_config, tempfile, hashlib, concurrent.futures, logging, production_monitoring_system, dataclasses, collections, os\n\n## Contents\n**Classes (12):** EnforcementLevel, PolicyType, EnforcementAction, ViolationSeverity, SecurityPolicy, PolicyViolation, EnforcementRule, SecurityEnforcer, AccessControlEnforcer, DataProtectionEnforcer, NetworkSecurityEnforcer, ApplicationSecurityEnforcer\n**Functions (4):** integrate_with_monitoring_system, integrate_with_audit_system, collect_enforcement_metrics, create_policies_from_findings\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\n\"\"\"Simulate violation detection (for demonstration).\"\"\"\n\n# Return False to avoid constant violations in demonstration\n\nsource_ip=\"192.168.1.100\",  # Example IP\n",
        "architecture": "# Architecture: independent_core.production_security_enforcer\n\nProduction Security Enforcer - Production security policy enforcement system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production security policy enforcement capabilities,\nincluding real-time policy monitoring, automated enforcement actions, threat prevention,\naccess control enforcement, data protection, network security, and application security.\n\nKey Features:\n- Multi-level enforcement (MONITOR, WARN, BLOCK, QUARANTINE, TERMINATE)\n- Multi-type policy enforcement (ACCESS_CONTROL, DATA_PROTECTION, NETWORK_SECURITY, APPLICATION_SECURITY)\n- Real-time policy enforcement with automated monitoring\n- Dynamic access control with role-based and attribute-based authorization\n- Data protection with encryption, masking, and DLP capabilities\n- Network security with traffic filtering and intrusion prevention\n- Application security with input validation and output encoding\n- Threat prevention with automated blocking and quarantine\n- Incident response with automated containment actions\n- Policy management with version control and audit trails\n- Compliance enforcement with regulatory requirement mapping\n- Security automation with orchestrated response workflows\n- Policy analytics with performance metrics and reporting\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll security enforcement operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 12\n- **Functions:** 4\n- **Dependencies:** 24\n\n## Class Hierarchy\n\n- **EnforcementLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **PolicyType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 10\n- **EnforcementAction** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 12\n- **ViolationSeverity** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **SecurityPolicy**\n  - Methods: 1\n  - Complexity: 19\n- **PolicyViolation**\n  - Methods: 1\n  - Complexity: 19\n- **EnforcementRule**\n  - Methods: 1\n  - Complexity: 14\n- **SecurityEnforcer**\n  - Methods: 26\n  - Complexity: 139\n- **AccessControlEnforcer**\n  - Methods: 4\n  - Complexity: 14\n- **DataProtectionEnforcer**\n  - Methods: 6\n  - Complexity: 24\n- **NetworkSecurityEnforcer**\n  - Methods: 6\n  - Complexity: 19\n- **ApplicationSecurityEnforcer**\n  - Methods: 6\n  - Complexity: 25\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "security_guide missing required section: Overview",
        "security_guide missing required section: Details",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.config_manager",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/config_manager.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.config_manager\n\nAPI endpoints for independent_core.config_manager\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //parse/env/value\n\n#### POST //parse/env/value\n\nParse environment variable value to appropriate type\n\n**Parameters:**\n\n- **value** (query) *required*: str - Parameter: value\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//parse/env/value?value=example_value\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//parse/env/value\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"value\": \"example_value\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/config/manager\n\n#### POST /create/config/manager\n\nCreate configuration manager with defaults\n\nArgs:\n    config_dir: Configuration directory\n    environment: Environment name\n    \nReturns:\n    Configured ConfigManager instance\n\n**Parameters:**\n\n- **config_dir** (query) *required*: str - Configuration directory\n- **environment** (query) *required*: str - Environment name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/config/manager?config_dir=example_config_dir&environment=example_environment\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/config/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_dir\": \"example_config_dir\",\n    \"environment\": \"example_environment\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/default/config\n\n#### POST /create/default/config\n\nCreate default configuration file if it doesn't exist\n\nArgs:\n    config_name: Name of configuration\n    template: Default configuration template\n    \nReturns:\n    True if created or exists, False on error\n\n**Parameters:**\n\n- **config_name** (query) *required*: str - Name of configuration\n- **template** (query) *required*: string - Default configuration template\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/default/config?config_name=example_config_name&template=example_template\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/default/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_name\": \"example_config_name\",\n    \"template\": \"example_template\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/config\n\n#### GET /get/config\n\nGet configuration from cache or load if not cached\n\nArgs:\n    config_name: Name of configuration\n    default: Default value if config not found\n    \nReturns:\n    Configuration dictionary\n\n**Parameters:**\n\n- **config_name** (query) *required*: str - Name of configuration\n- **default** (query) *required*: string - Default value if config not found\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/config?config_name=example_config_name&default=example_default\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_name\": \"example_config_name\",\n    \"default\": \"example_default\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/environment\n\n#### GET /get/environment\n\nGet current environment\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/environment\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/environment\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/setting\n\n#### GET /get/setting\n\nGet specific setting from configuration\n\nArgs:\n    config_name: Name of configuration\n    setting_path: Dot-separated path to setting (e.g., \"database.host\")\n    default: Default value if setting not found\n    \nReturns:\n    Setting value or default\n\n**Parameters:**\n\n- **config_name** (query) *required*: str - Name of configuration\n- **setting_path** (query) *required*: str - Dot-separated path to setting (e.g., \"database.host\")\n- **default** (query) *required*: Any - Default value if setting not found\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/setting?config_name=example_config_name&setting_path=example_setting_path&default=example_default\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/setting\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_name\": \"example_config_name\",\n    \"setting_path\": \"example_setting_path\",\n    \"default\": \"example_default\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /list/configs\n\n#### POST /list/configs\n\nList all available configurations\n\nReturns:\n    List of configuration names\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/list/configs\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/list/configs\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /load/config\n\n#### POST /load/config\n\nLoad configuration from file\n\nArgs:\n    config_name: Name of configuration to load\n    required: Whether configuration is required\n    \nReturns:\n    Configuration dictionary or None\n\n**Parameters:**\n\n- **config_name** (query) *required*: str - Name of configuration to load\n- **required** (query) *required*: bool - Whether configuration is required\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/config?config_name=example_config_name&required=example_required\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_name\": \"example_config_name\",\n    \"required\": \"example_required\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/config\n\n#### POST /save/config\n\nSave configuration to file\n\nArgs:\n    config_name: Name of configuration\n    config_data: Configuration data to save\n    to_environment: Save to environment-specific directory\n    \nReturns:\n    True if successful, False otherwise\n\n**Parameters:**\n\n- **config_name** (query) *required*: str - Name of configuration\n- **config_data** (query) *required*: string - Configuration data to save\n- **to_environment** (query) *required*: bool - Save to environment-specific directory\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/config?config_name=example_config_name&config_data=example_config_data&to_environment=example_to_environment\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_name\": \"example_config_name\",\n    \"config_data\": \"example_config_data\",\n    \"to_environment\": \"example_to_environment\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /set/setting\n\n#### POST /set/setting\n\nSet specific setting in configuration\n\nArgs:\n    config_name: Name of configuration\n    setting_path: Dot-separated path to setting\n    value: Value to set\n    save_immediately: Whether to save changes immediately\n    \nReturns:\n    True if successful, False otherwise\n\n**Parameters:**\n\n- **config_name** (query) *required*: str - Name of configuration\n- **setting_path** (query) *required*: str - Dot-separated path to setting\n- **value** (query) *required*: Any - Value to set\n- **save_immediately** (query) *required*: bool - Whether to save changes immediately\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/set/setting?config_name=example_config_name&setting_path=example_setting_path&value=example_value&save_immediately=example_save_immediately\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/set/setting\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_name\": \"example_config_name\",\n    \"setting_path\": \"example_setting_path\",\n    \"value\": \"example_value\",\n    \"save_immediately\": \"example_save_immediately\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/config\n\n#### PUT /update/config\n\nUpdate configuration with new values\n\nArgs:\n    config_name: Name of configuration\n    updates: Updates to apply\n    save_immediately: Whether to save changes immediately\n    \nReturns:\n    True if successful, False otherwise\n\n**Parameters:**\n\n- **config_name** (query) *required*: str - Name of configuration\n- **updates** (query) *required*: string - Updates to apply\n- **save_immediately** (query) *required*: bool - Whether to save changes immediately\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/config?config_name=example_config_name&updates=example_updates&save_immediately=example_save_immediately\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_name\": \"example_config_name\",\n    \"updates\": \"example_updates\",\n    \"save_immediately\": \"example_save_immediately\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.config_manager\",\n    \"description\": \"API endpoints for independent_core.config_manager\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/config/manager\": {\n      \"post\": {\n        \"summary\": \"Create configuration manager with defaults\\n\\nArgs:\\n    config_dir: Configuration directory\\n    environment: Environment name\\n    \\nReturns:\\n    Configured ConfigManager instance\",\n        \"description\": \"Create configuration manager with defaults\\n\\nArgs:\\n    config_dir: Configuration directory\\n    environment: Environment name\\n    \\nReturns:\\n    Configured ConfigManager instance\",\n        \"operationId\": \"create_config_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_dir\",\n            \"in\": \"query\",\n            \"description\": \"Configuration directory\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"environment\",\n            \"in\": \"query\",\n            \"description\": \"Environment name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/load/config\": {\n      \"post\": {\n        \"summary\": \"Load configuration from file\\n\\nArgs:\\n    config_name: Name of configuration to load\\n    required: Whether configuration is required\\n    \\nReturns:\\n    Configuration dictionary or None\",\n        \"description\": \"Load configuration from file\\n\\nArgs:\\n    config_name: Name of configuration to load\\n    required: Whether configuration is required\\n    \\nReturns:\\n    Configuration dictionary or None\",\n        \"operationId\": \"load_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of configuration to load\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"required\",\n            \"in\": \"query\",\n            \"description\": \"Whether configuration is required\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/save/config\": {\n      \"post\": {\n        \"summary\": \"Save configuration to file\\n\\nArgs:\\n    config_name: Name of configuration\\n    config_data: Configuration data to save\\n    to_environment: Save to environment-specific directory\\n    \\nReturns:\\n    True if successful, False otherwise\",\n        \"description\": \"Save configuration to file\\n\\nArgs:\\n    config_name: Name of configuration\\n    config_data: Configuration data to save\\n    to_environment: Save to environment-specific directory\\n    \\nReturns:\\n    True if successful, False otherwise\",\n        \"operationId\": \"save_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of configuration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"config_data\",\n            \"in\": \"query\",\n            \"description\": \"Configuration data to save\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"to_environment\",\n            \"in\": \"query\",\n            \"description\": \"Save to environment-specific directory\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/config\": {\n      \"get\": {\n        \"summary\": \"Get configuration from cache or load if not cached\\n\\nArgs:\\n    config_name: Name of configuration\\n    default: Default value if config not found\\n    \\nReturns:\\n    Configuration dictionary\",\n        \"description\": \"Get configuration from cache or load if not cached\\n\\nArgs:\\n    config_name: Name of configuration\\n    default: Default value if config not found\\n    \\nReturns:\\n    Configuration dictionary\",\n        \"operationId\": \"get_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of configuration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"default\",\n            \"in\": \"query\",\n            \"description\": \"Default value if config not found\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/config\": {\n      \"put\": {\n        \"summary\": \"Update configuration with new values\\n\\nArgs:\\n    config_name: Name of configuration\\n    updates: Updates to apply\\n    save_immediately: Whether to save changes immediately\\n    \\nReturns:\\n    True if successful, False otherwise\",\n        \"description\": \"Update configuration with new values\\n\\nArgs:\\n    config_name: Name of configuration\\n    updates: Updates to apply\\n    save_immediately: Whether to save changes immediately\\n    \\nReturns:\\n    True if successful, False otherwise\",\n        \"operationId\": \"update_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of configuration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"updates\",\n            \"in\": \"query\",\n            \"description\": \"Updates to apply\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"save_immediately\",\n            \"in\": \"query\",\n            \"description\": \"Whether to save changes immediately\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/setting\": {\n      \"get\": {\n        \"summary\": \"Get specific setting from configuration\\n\\nArgs:\\n    config_name: Name of configuration\\n    setting_path: Dot-separated path to setting (e.g., \\\"database.host\\\")\\n    default: Default value if setting not found\\n    \\nReturns:\\n    Setting value or default\",\n        \"description\": \"Get specific setting from configuration\\n\\nArgs:\\n    config_name: Name of configuration\\n    setting_path: Dot-separated path to setting (e.g., \\\"database.host\\\")\\n    default: Default value if setting not found\\n    \\nReturns:\\n    Setting value or default\",\n        \"operationId\": \"get_setting\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of configuration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"setting_path\",\n            \"in\": \"query\",\n            \"description\": \"Dot-separated path to setting (e.g., \\\"database.host\\\")\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"default\",\n            \"in\": \"query\",\n            \"description\": \"Default value if setting not found\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/set/setting\": {\n      \"post\": {\n        \"summary\": \"Set specific setting in configuration\\n\\nArgs:\\n    config_name: Name of configuration\\n    setting_path: Dot-separated path to setting\\n    value: Value to set\\n    save_immediately: Whether to save changes immediately\\n    \\nReturns:\\n    True if successful, False otherwise\",\n        \"description\": \"Set specific setting in configuration\\n\\nArgs:\\n    config_name: Name of configuration\\n    setting_path: Dot-separated path to setting\\n    value: Value to set\\n    save_immediately: Whether to save changes immediately\\n    \\nReturns:\\n    True if successful, False otherwise\",\n        \"operationId\": \"set_setting\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of configuration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"setting_path\",\n            \"in\": \"query\",\n            \"description\": \"Dot-separated path to setting\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"value\",\n            \"in\": \"query\",\n            \"description\": \"Value to set\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"save_immediately\",\n            \"in\": \"query\",\n            \"description\": \"Whether to save changes immediately\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/list/configs\": {\n      \"post\": {\n        \"summary\": \"List all available configurations\\n\\nReturns:\\n    List of configuration names\",\n        \"description\": \"List all available configurations\\n\\nReturns:\\n    List of configuration names\",\n        \"operationId\": \"list_configs\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//parse/env/value\": {\n      \"post\": {\n        \"summary\": \"Parse environment variable value to appropriate type\",\n        \"description\": \"Parse environment variable value to appropriate type\",\n        \"operationId\": \"_parse_env_value\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"value\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: value\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/environment\": {\n      \"get\": {\n        \"summary\": \"Get current environment\",\n        \"description\": \"Get current environment\",\n        \"operationId\": \"get_environment\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/default/config\": {\n      \"post\": {\n        \"summary\": \"Create default configuration file if it doesn't exist\\n\\nArgs:\\n    config_name: Name of configuration\\n    template: Default configuration template\\n    \\nReturns:\\n    True if created or exists, False on error\",\n        \"description\": \"Create default configuration file if it doesn't exist\\n\\nArgs:\\n    config_name: Name of configuration\\n    template: Default configuration template\\n    \\nReturns:\\n    True if created or exists, False on error\",\n        \"operationId\": \"create_default_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of configuration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"template\",\n            \"in\": \"query\",\n            \"description\": \"Default configuration template\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.config_manager\n\n## Overview\n\nBasic Configuration Manager for Independent Core\nMinimal but functional configuration management system\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/config_manager.py`\n\n## Dependencies\n\n- pathlib\n- logging\n- typing\n- dataclasses\n- json\n- os\n\n## Code Structure\n\n- **Total Lines:** 456\n- **Code Lines:** 329\n- **Comment Lines:** 32\n\n## Complexity Indicators\n\n- Decorators used\n\n",
        "configuration_guide": "\n# independent_core.config_manager\n\nBasic Configuration Manager for Independent Core\nMinimal but functional configuration management system\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/config_manager.py\n- **Total Classes:** 2\n- **Total Functions:** 1\n- **Dependencies:** pathlib, logging, typing, dataclasses, json, os\n\n## Contents\n**Classes (2):** ConfigManagerSettings, ConfigManager\n**Functions (1):** create_config_manager\n\n## Configuration\n- **DEFAULT_CONFIGS**: `{` (string)\n\n## Integration Points\nClass: ConfigManagerSettings\nClass: ConfigManager\nFunction: create_config_manager\n\n## Examples\n'cpu_usage': 80.0,\n\n'memory_usage': 85.0\n\n# Example usage\n",
        "integration_guide": "\n# independent_core.config_manager\n\nBasic Configuration Manager for Independent Core\nMinimal but functional configuration management system\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/config_manager.py\n- **Total Classes:** 2\n- **Total Functions:** 1\n- **Dependencies:** pathlib, logging, typing, dataclasses, json, os\n\n## Contents\n**Classes (2):** ConfigManagerSettings, ConfigManager\n**Functions (1):** create_config_manager\n\n## Configuration\n- **DEFAULT_CONFIGS**: `{` (string)\n\n## Integration Points\nClass: ConfigManagerSettings\nClass: ConfigManager\nFunction: create_config_manager\n\n## Examples\n'cpu_usage': 80.0,\n\n'memory_usage': 85.0\n\n# Example usage\n",
        "architecture": "# Architecture: independent_core.config_manager\n\nBasic Configuration Manager for Independent Core\nMinimal but functional configuration management system\n\n## Components Overview\n\n- **Classes:** 2\n- **Functions:** 1\n- **Dependencies:** 6\n\n## Class Hierarchy\n\n- **ConfigManagerSettings**\n  - Methods: 0\n  - Complexity: 5\n- **ConfigManager**\n  - Methods: 17\n  - Complexity: 84\n## Integration Points\n\n- Class: ConfigManagerSettings\n- Class: ConfigManager\n- Function: create_config_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "configuration_guide missing required section: Overview",
        "configuration_guide missing required section: Details",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.production_telemetry",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_telemetry.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_telemetry\n\nAPI endpoints for independent_core.production_telemetry\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //export/csv\n\n#### POST //export/csv\n\nExport data as CSV.\n\n**Parameters:**\n\n- **data_points** (query) *required*: string - Parameter: data_points\n- **config** (query) *required*: TelemetryExportConfig - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//export/csv?data_points=example_data_points&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//export/csv\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"data_points\": \"example_data_points\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //export/json\n\n#### POST //export/json\n\nExport data as JSON.\n\n**Parameters:**\n\n- **data_points** (query) *required*: string - Parameter: data_points\n- **config** (query) *required*: TelemetryExportConfig - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//export/json?data_points=example_data_points&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//export/json\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"data_points\": \"example_data_points\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //load/config\n\n#### POST //load/config\n\nLoad configuration from file.\n\n**Parameters:**\n\n- **config_path** (query) *required*: str - Parameter: config_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/config?config_path=example_config_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_path\": \"example_config_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //load/stored/data\n\n#### POST //load/stored/data\n\nLoad stored telemetry data.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/stored/data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/stored/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //store/data\n\n#### POST //store/data\n\nStore telemetry data points.\n\n**Parameters:**\n\n- **data_points** (query) *required*: string - Parameter: data_points\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//store/data?data_points=example_data_points\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//store/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"data_points\": \"example_data_points\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /collect\n\n#### POST /collect\n\nAPI endpoint: collect\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/collect\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/collect\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /export/data\n\n#### POST /export/data\n\nExport telemetry data using specified configuration.\n\n**Parameters:**\n\n- **data_points** (query) *required*: string - Parameter: data_points\n- **config_name** (query) *required*: str - Parameter: config_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/data?data_points=example_data_points&config_name=example_config_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"data_points\": \"example_data_points\",\n    \"config_name\": \"example_config_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/collector/info\n\n#### GET /get/collector/info\n\nGet collector information.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/collector/info\n\nGet system collector information.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/collector/info\n\nGet application collector information.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/collector/info\n\nAPI endpoint: get_collector_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/collector/info\n\nAPI endpoint: get_collector_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/collector/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/collector/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/telemetry/metrics\n\n#### GET /get/telemetry/metrics\n\nGet telemetry system metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/telemetry/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/telemetry/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/telemetry/status\n\n#### GET /get/telemetry/status\n\nGet current telemetry system status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/telemetry/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/telemetry/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /integrate/with/config/manager\n\n#### POST /integrate/with/config/manager\n\nIntegrate telemetry with production config manager.\n\n**Parameters:**\n\n- **telemetry_manager** (query) *required*: TelemetryManager - Parameter: telemetry_manager\n- **config_manager** (query) *required*: string - Parameter: config_manager\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/integrate/with/config/manager?telemetry_manager=example_telemetry_manager&config_manager=example_config_manager\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/integrate/with/config/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"telemetry_manager\": \"example_telemetry_manager\",\n    \"config_manager\": \"example_config_manager\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /remove/collector\n\n#### DELETE /remove/collector\n\nRemove a telemetry collector.\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/collector?name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/collector\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_telemetry\",\n    \"description\": \"API endpoints for independent_core.production_telemetry\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/integrate/with/config/manager\": {\n      \"post\": {\n        \"summary\": \"Integrate telemetry with production config manager.\",\n        \"description\": \"Integrate telemetry with production config manager.\",\n        \"operationId\": \"integrate_with_config_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"telemetry_manager\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: telemetry_manager\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"TelemetryManager\"\n            }\n          },\n          {\n            \"name\": \"config_manager\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_manager\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"type\": {\n                      \"type\": \"string\"\n                    },\n                    \"integration_type\": {\n                      \"type\": \"string\"\n                    },\n                    \"capabilities\": {\n                      \"type\": \"array\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/collector/info\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_collector_info\",\n        \"description\": \"API endpoint: get_collector_info\",\n        \"operationId\": \"get_collector_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"type\": {\n                      \"type\": \"string\"\n                    },\n                    \"integration_type\": {\n                      \"type\": \"string\"\n                    },\n                    \"capabilities\": {\n                      \"type\": \"array\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/export/data\": {\n      \"post\": {\n        \"summary\": \"Export telemetry data using specified configuration.\",\n        \"description\": \"Export telemetry data using specified configuration.\",\n        \"operationId\": \"export_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"data_points\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: data_points\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"config_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//export/json\": {\n      \"post\": {\n        \"summary\": \"Export data as JSON.\",\n        \"description\": \"Export data as JSON.\",\n        \"operationId\": \"_export_json\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"data_points\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: data_points\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"TelemetryExportConfig\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//export/csv\": {\n      \"post\": {\n        \"summary\": \"Export data as CSV.\",\n        \"description\": \"Export data as CSV.\",\n        \"operationId\": \"_export_csv\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"data_points\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: data_points\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"TelemetryExportConfig\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/config\": {\n      \"post\": {\n        \"summary\": \"Load configuration from file.\",\n        \"description\": \"Load configuration from file.\",\n        \"operationId\": \"_load_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/remove/collector\": {\n      \"delete\": {\n        \"summary\": \"Remove a telemetry collector.\",\n        \"description\": \"Remove a telemetry collector.\",\n        \"operationId\": \"remove_collector\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//store/data\": {\n      \"post\": {\n        \"summary\": \"Store telemetry data points.\",\n        \"description\": \"Store telemetry data points.\",\n        \"operationId\": \"_store_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"data_points\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: data_points\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/stored/data\": {\n      \"post\": {\n        \"summary\": \"Load stored telemetry data.\",\n        \"description\": \"Load stored telemetry data.\",\n        \"operationId\": \"_load_stored_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/telemetry/status\": {\n      \"get\": {\n        \"summary\": \"Get current telemetry system status.\",\n        \"description\": \"Get current telemetry system status.\",\n        \"operationId\": \"get_telemetry_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"running\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"telemetry_level\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"collection_interval\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"batch_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"storage_path\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"collectors\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"queue_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"export_configs\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"retention_configs\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/telemetry/metrics\": {\n      \"get\": {\n        \"summary\": \"Get telemetry system metrics.\",\n        \"description\": \"Get telemetry system metrics.\",\n        \"operationId\": \"get_telemetry_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/collect\": {\n      \"post\": {\n        \"summary\": \"API endpoint: collect\",\n        \"description\": \"API endpoint: collect\",\n        \"operationId\": \"collect\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_telemetry\n\n## Overview\n\nProduction Telemetry Collection and Processing System\nProvides comprehensive telemetry data collection, processing, export, and retention for production environments.\nNO FALLBACKS - HARD FAILURES ONLY architecture.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_telemetry.py`\n\n## Dependencies\n\n- pathlib\n- threading\n- datetime\n- json\n- time\n- enum\n- shutil\n- typing\n- abc\n- pickle\n- hashlib\n- psutil\n- queue\n- concurrent.futures\n- logging\n- asyncio\n- production_monitoring_system\n- production_config_manager\n- csv\n- dataclasses\n- os\n\n## Code Structure\n\n- **Total Lines:** 1120\n- **Code Lines:** 840\n- **Comment Lines:** 66\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "deployment_guide": "\n# independent_core.production_telemetry\n\nProduction Telemetry Collection and Processing System\nProvides comprehensive telemetry data collection, processing, export, and retention for production environments.\nNO FALLBACKS - HARD FAILURES ONLY architecture.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_telemetry.py\n- **Total Classes:** 16\n- **Total Functions:** 2\n- **Dependencies:** pathlib, threading, datetime, json, time, enum, shutil, typing, abc, pickle, hashlib, psutil, queue, concurrent.futures, logging, asyncio, production_monitoring_system, production_config_manager, csv, dataclasses, os\n\n## Contents\n**Classes (16):** TelemetryDataType, TelemetryExportFormat, TelemetryLevel, RetentionPolicy, TelemetryDataPoint, TelemetryExportConfig, TelemetryRetentionConfig, TelemetryCollector, SystemTelemetryCollector, ApplicationTelemetryCollector, TelemetryProcessor, TelemetryExporter, TelemetryRetentionManager, TelemetryManager, MonitoringTelemetryCollector, ConfigTelemetryCollector\n**Functions (2):** integrate_with_monitoring_system, integrate_with_config_manager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: TelemetryProcessor\nClass: TelemetryRetentionManager\nClass: TelemetryManager\nFunction: integrate_with_config_manager\nFunction: start_cleanup_service\nFunction: stop_cleanup_service\n\n## Examples\ndisk_usage = psutil.disk_usage('/')\n\n'total': disk_usage.total,\n\n'used': disk_usage.used,\n\n'free': disk_usage.free,\n\n'percent': (disk_usage.used / disk_usage.total) * 100\n\n# Example transformations\n\n'storage_usage': self._get_storage_usage(),\n\ndef _get_storage_usage(self) -> Dict[str, Any]:\n\n\"\"\"Get storage usage statistics.\"\"\"\n\nlogging.error(f\"Failed to get storage usage: {e}\")\n",
        "architecture": "# Architecture: independent_core.production_telemetry\n\nProduction Telemetry Collection and Processing System\nProvides comprehensive telemetry data collection, processing, export, and retention for production environments.\nNO FALLBACKS - HARD FAILURES ONLY architecture.\n\n## Components Overview\n\n- **Classes:** 16\n- **Functions:** 2\n- **Dependencies:** 21\n\n## Class Hierarchy\n\n- **TelemetryDataType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **TelemetryExportFormat** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **TelemetryLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **RetentionPolicy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **TelemetryDataPoint**\n  - Methods: 1\n  - Complexity: 13\n- **TelemetryExportConfig**\n  - Methods: 0\n  - Complexity: 9\n- **TelemetryRetentionConfig**\n  - Methods: 0\n  - Complexity: 8\n- **TelemetryCollector** (inherits from ABC)\n  - Methods: 2\n  - Complexity: 7\n- **SystemTelemetryCollector** (inherits from TelemetryCollector)\n  - Methods: 3\n  - Complexity: 10\n- **ApplicationTelemetryCollector** (inherits from TelemetryCollector)\n  - Methods: 4\n  - Complexity: 14\n- **TelemetryProcessor**\n  - Methods: 5\n  - Complexity: 20\n- **TelemetryExporter**\n  - Methods: 8\n  - Complexity: 48\n- **TelemetryRetentionManager**\n  - Methods: 7\n  - Complexity: 35\n- **TelemetryManager**\n  - Methods: 15\n  - Complexity: 91\n- **MonitoringTelemetryCollector** (inherits from TelemetryCollector)\n  - Methods: 3\n  - Complexity: 10\n- **ConfigTelemetryCollector** (inherits from TelemetryCollector)\n  - Methods: 3\n  - Complexity: 10\n## Integration Points\n\n- Class: TelemetryProcessor\n- Class: TelemetryRetentionManager\n- Class: TelemetryManager\n- Function: integrate_with_config_manager\n- Function: start_cleanup_service\n- Function: stop_cleanup_service\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.enhanced_fraud_core_exceptions",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/enhanced_fraud_core_exceptions.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.enhanced_fraud_core_exceptions",
        "developer_guide": "# Developer Guide: independent_core.enhanced_fraud_core_exceptions\n\n## Overview\n\nContains 4 classes: EnhancedFraudCoreException, FraudDataError, FraudValidationError, FraudProcessingError. Contains 1 functions: __init__\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/enhanced_fraud_core_exceptions.py`\n\n## Code Structure\n\n- **Total Lines:** 8\n- **Code Lines:** 7\n- **Comment Lines:** 0\n\n",
        "architecture": "# Architecture: independent_core.enhanced_fraud_core_exceptions\n\nContains 4 classes: EnhancedFraudCoreException, FraudDataError, FraudValidationError, FraudProcessingError. Contains 1 functions: __init__\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 0\n- **Dependencies:** 0\n\n## Class Hierarchy\n\n- **EnhancedFraudCoreException** (inherits from Exception)\n  - Methods: 0\n  - Complexity: 1\n- **FraudDataError** (inherits from Exception)\n  - Methods: 1\n  - Complexity: 3\n- **FraudValidationError** (inherits from Exception)\n  - Methods: 0\n  - Complexity: 1\n- **FraudProcessingError** (inherits from Exception)\n  - Methods: 0\n  - Complexity: 1\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.domain_hybrid_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/domain_hybrid_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.domain_hybrid_integration\n\nAPI endpoints for independent_core.domain_hybrid_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/domain/analytics\n\n#### GET /get/domain/analytics\n\nGet comprehensive domain analytics.\n\nArgs:\n    domain_name: Optional specific domain for detailed analytics\n    \nReturns:\n    Domain analytics results\n    \nRaises:\n    ValueError: If domain name is invalid\n    RuntimeError: If analytics retrieval fails\n\n**Parameters:**\n\n- **domain_name** (query) *required*: string - Optional specific domain for detailed analytics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/analytics?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/integration/status\n\n#### GET /get/integration/status\n\nGet current integration status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /handle/domain/errors\n\n#### POST /handle/domain/errors\n\nHandle domain errors and attempt recovery.\n\nArgs:\n    domain_name: Domain identifier\n    error: Domain error that occurred\n    \nReturns:\n    Error handling results\n    \nRaises:\n    ValueError: If domain is invalid\n    RuntimeError: If error handling fails\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Domain identifier\n- **error** (query) *required*: Exception - Domain error that occurred\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/domain/errors?domain_name=example_domain_name&error=example_error\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/domain/errors\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"error\": \"example_error\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.domain_hybrid_integration\",\n    \"description\": \"API endpoints for independent_core.domain_hybrid_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/handle/domain/errors\": {\n      \"post\": {\n        \"summary\": \"Handle domain errors and attempt recovery.\\n\\nArgs:\\n    domain_name: Domain identifier\\n    error: Domain error that occurred\\n    \\nReturns:\\n    Error handling results\\n    \\nRaises:\\n    ValueError: If domain is invalid\\n    RuntimeError: If error handling fails\",\n        \"description\": \"Handle domain errors and attempt recovery.\\n\\nArgs:\\n    domain_name: Domain identifier\\n    error: Domain error that occurred\\n    \\nReturns:\\n    Error handling results\\n    \\nRaises:\\n    ValueError: If domain is invalid\\n    RuntimeError: If error handling fails\",\n        \"operationId\": \"handle_domain_errors\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Domain identifier\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Domain error that occurred\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/domain/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive domain analytics.\\n\\nArgs:\\n    domain_name: Optional specific domain for detailed analytics\\n    \\nReturns:\\n    Domain analytics results\\n    \\nRaises:\\n    ValueError: If domain name is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"description\": \"Get comprehensive domain analytics.\\n\\nArgs:\\n    domain_name: Optional specific domain for detailed analytics\\n    \\nReturns:\\n    Domain analytics results\\n    \\nRaises:\\n    ValueError: If domain name is invalid\\n    RuntimeError: If analytics retrieval fails\",\n        \"operationId\": \"get_domain_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific domain for detailed analytics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"global_analytics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_domains\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance_baselines\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_baselines\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_performance\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_compressions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_optimizations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_health\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recommendations\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/integration/status\": {\n      \"get\": {\n        \"summary\": \"Get current integration status\",\n        \"description\": \"Get current integration status\",\n        \"operationId\": \"get_integration_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"integration_state\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_domains\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error_recovery_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_health\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_compression_strategies\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.domain_hybrid_integration\n\n## Overview\n\nDomain Hybrid Integration - Main orchestrator for domain-hybrid integration\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/domain_hybrid_integration.py`\n\n## Dependencies\n\n- gc\n- threading\n- json\n- datetime\n- time\n- numpy\n- enum\n- torch\n- compression_systems.padic.hybrid_padic_compressor\n- compression_systems.padic.dynamic_switching_manager\n- pynvml\n- typing\n- hashlib\n- psutil\n- domain_registry\n- compression_systems.padic.direction_manager\n- logging\n- compression_systems.padic.hybrid_bounding_engine\n- domain_router\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1255\n- **Code Lines:** 954\n- **Comment Lines:** 80\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.domain_hybrid_integration\n\nDomain Hybrid Integration - Main orchestrator for domain-hybrid integration\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/domain_hybrid_integration.py\n- **Total Classes:** 7\n- **Total Functions:** 0\n- **Dependencies:** gc, threading, json, datetime, time, numpy, enum, torch, compression_systems.padic.hybrid_padic_compressor, compression_systems.padic.dynamic_switching_manager, pynvml, typing, hashlib, psutil, domain_registry, compression_systems.padic.direction_manager, logging, compression_systems.padic.hybrid_bounding_engine, domain_router, dataclasses, collections\n\n## Contents\n**Classes (7):** DomainIntegrationMode, DomainCompressionStrategy, DomainIntegrationState, DomainHybridConfig, DomainMetrics, DomainAnalytics, DomainHybridIntegration\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\npeak_memory_usage_gb: float = 0.0\n\naverage_memory_usage_gb: float = 0.0\n\ngpu_memory_usage_gb: float = 0.0\n\n# Compression metrics\n\n'memory_usage_gb': 2.0,\n\nmemory_usage = psutil.virtual_memory().used / (1024**3)  # GB\n\ngpu_memory_usage = 0.0\n\ngpu_memory_usage = gpu_memory_info.used / (1024**3)  # GB\n\n'memory_usage_gb': memory_usage,\n\n'gpu_memory_usage_gb': gpu_memory_usage,\n\ndomain_metrics.peak_memory_usage_gb = max(\n\ndomain_metrics.peak_memory_usage_gb,\n\ncurrent_metrics.get('memory_usage_gb', 0.0)\n\n# Update GPU memory usage\n\ndomain_metrics.gpu_memory_usage_gb = current_metrics.get('gpu_memory_usage_gb', 0.0)\n\n# Update averages (simple moving average)\n\ndomain_metrics.average_memory_usage_gb = (\n\n(domain_metrics.average_memory_usage_gb * (operations - 1) +\n\ncurrent_metrics.get('memory_usage_gb', 0.0)) / operations\n\nmemory_values = [m['current_metrics'].get('memory_usage_gb', 0) for m in recent_metrics]\n\nmemory_usage = current_metrics.get('memory_usage_gb', 0.0)\n\nif memory_usage > self.config.memory_threshold_gb:\n\nalerts.append(f\"High memory usage for domain {domain_name}: {memory_usage:.1f}GB > {self.config.memory_threshold_gb}GB\")\n\n\nif current_metrics.get('memory_usage_gb', 0) > self.config.memory_threshold_gb * 0.8:\n\nrecommendations.append(f\"Memory usage approaching threshold for domain {domain_name} - enable memory optimization\")\n\n\n'peak_memory_usage_gb': domain_metrics.peak_memory_usage_gb,\n\n'average_memory_usage_gb': domain_metrics.average_memory_usage_gb,\n\ntotal_memory_usage = 0\n\ntotal_memory_usage += domain_metrics.average_memory_usage_gb\n\nself.domain_analytics.average_memory_savings = total_memory_usage / num_domains\n",
        "architecture": "# Architecture: independent_core.domain_hybrid_integration\n\nDomain Hybrid Integration - Main orchestrator for domain-hybrid integration\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 21\n\n## Class Hierarchy\n\n- **DomainIntegrationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **DomainCompressionStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **DomainIntegrationState** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **DomainHybridConfig**\n  - Methods: 1\n  - Complexity: 27\n- **DomainMetrics**\n  - Methods: 1\n  - Complexity: 29\n- **DomainAnalytics**\n  - Methods: 0\n  - Complexity: 20\n- **DomainHybridIntegration**\n  - Methods: 39\n  - Complexity: 191\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.run_part2_tests",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/run_part2_tests.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.run_part2_tests\n\nAPI endpoints for independent_core.run_part2_tests\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //load/part1/results\n\n#### POST //load/part1/results\n\nLoad Part 1 results to check prerequisites\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/part1/results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/part1/results\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //save/results\n\n#### POST //save/results\n\nSave test results to file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/results\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /main\n\n#### POST /main\n\nMain entry point\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/main\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/main\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.run_part2_tests\",\n    \"description\": \"API endpoints for independent_core.run_part2_tests\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/main\": {\n      \"post\": {\n        \"summary\": \"Main entry point\",\n        \"description\": \"Main entry point\",\n        \"operationId\": \"main\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/part1/results\": {\n      \"post\": {\n        \"summary\": \"Load Part 1 results to check prerequisites\",\n        \"description\": \"Load Part 1 results to check prerequisites\",\n        \"operationId\": \"_load_part1_results\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//save/results\": {\n      \"post\": {\n        \"summary\": \"Save test results to file\",\n        \"description\": \"Save test results to file\",\n        \"operationId\": \"_save_results\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.run_part2_tests\n\n## Overview\n\nTest Runner for Part 2: Advanced Testing\nExecutes advanced integration, performance, and error recovery tests\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/run_part2_tests.py`\n\n## Dependencies\n\n- multiprocessing\n- test_error_recovery\n- os\n- sys\n- concurrent.futures\n- logging\n- run_part1_tests\n- typing\n- test_performance_validation\n- glob\n- datetime\n- json\n- test_integration_scenarios\n- argparse\n- time\n\n## Code Structure\n\n- **Total Lines:** 574\n- **Code Lines:** 420\n- **Comment Lines:** 50\n\n## Complexity Indicators\n\n- Concurrency\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing"
      ]
    },
    {
      "module": "independent_core.gpu_memory_optimizer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gpu_memory_optimizer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gpu_memory_optimizer\n\nAPI endpoints for independent_core.gpu_memory_optimizer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/gpu/memory/report\n\n#### GET /get/gpu/memory/report\n\nGenerate comprehensive GPU memory usage report.\n\nReturns:\n    Dictionary containing detailed GPU memory analysis\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/gpu/memory/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/gpu/memory/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gpu_memory_optimizer\",\n    \"description\": \"API endpoints for independent_core.gpu_memory_optimizer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/gpu/memory/report\": {\n      \"get\": {\n        \"summary\": \"Generate comprehensive GPU memory usage report.\\n\\nReturns:\\n    Dictionary containing detailed GPU memory analysis\",\n        \"description\": \"Generate comprehensive GPU memory usage report.\\n\\nReturns:\\n    Dictionary containing detailed GPU memory analysis\",\n        \"operationId\": \"get_gpu_memory_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_summary\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_devices\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"total_memory_gb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"total_allocated_gb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"overall_utilization_percent\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"optimization_strategy\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"device_reports\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"memory_threshold_percent\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"fragmentation_threshold\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"stream_pool_size\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"memory_pooling_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"auto_optimization_enabled\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gpu_memory_optimizer\n\n## Overview\n\nGeneral GPU memory optimization for Saraphis Brain system.\nProvides system-wide GPU memory management separate from compression-specific GPU optimization.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gpu_memory_optimizer.py`\n\n## Dependencies\n\n- numpy\n- logging\n- torch.cuda\n- contextlib\n- enum\n- typing\n- warnings\n- torch\n- asyncio\n- traceback\n- gc\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 952\n- **Code Lines:** 737\n- **Comment Lines:** 51\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.gpu_memory_optimizer\n\nGeneral GPU memory optimization for Saraphis Brain system.\nProvides system-wide GPU memory management separate from compression-specific GPU optimization.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **GPUOptimizationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **GPUMemoryState** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **GPUMemorySnapshot**\n  - Methods: 0\n  - Complexity: 11\n- **GPUAllocationRecord**\n  - Methods: 0\n  - Complexity: 13\n- **StreamOptimizationResult**\n  - Methods: 0\n  - Complexity: 7\n- **GPUFragmentationReport**\n  - Methods: 0\n  - Complexity: 8\n- **GeneralGPUMemoryOptimizer**\n  - Methods: 27\n  - Complexity: 183\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.progress_tracker",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/progress_tracker.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.progress_tracker\n\nAPI endpoints for independent_core.progress_tracker\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/console/dashboard\n\n#### POST /create/console/dashboard\n\nCreate a console dashboard for training monitoring.\n\n**Parameters:**\n\n- **tracker** (query) *required*: ProgressTracker - Parameter: tracker\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/console/dashboard?tracker=example_tracker\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/console/dashboard\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"tracker\": \"example_tracker\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/progress/bar\n\n#### POST /create/progress/bar\n\nCreate a progress bar for training.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/progress/bar\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/progress/bar\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/alerts\n\n#### GET /get/alerts\n\nGet training alerts.\n\n**Parameters:**\n\n- **severity** (query) *required*: string - Parameter: severity\n- **unresolved_only** (query) *required*: bool - Parameter: unresolved_only\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/alerts?severity=example_severity&unresolved_only=example_unresolved_only\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/alerts\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"severity\": \"example_severity\",\n    \"unresolved_only\": \"example_unresolved_only\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/current/metrics\n\n#### GET /get/current/metrics\n\nGet current resource metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/current/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/current/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/current/progress\n\n#### GET /get/current/progress\n\nGet current training progress.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/current/progress\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/current/progress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/metrics/history\n\n#### GET /get/metrics/history\n\nGet metrics history.\n\n**Parameters:**\n\n- **metric_name** (query) *required*: string - Parameter: metric_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metrics/history?metric_name=example_metric_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metrics/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"metric_name\": \"example_metric_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/progress/percentage\n\n#### GET /get/progress/percentage\n\nGet overall progress percentage.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/progress/percentage\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/progress/percentage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /save/progress\n\n#### POST /save/progress\n\nSave progress data to file.\n\n**Parameters:**\n\n- **save_path** (query) *required*: Path - Parameter: save_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/progress?save_path=example_save_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/progress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"save_path\": \"example_save_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /stop\n\n#### POST /stop\n\nStop progress tracking.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/stop\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/stop\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /update/batch\n\n#### PUT /update/batch\n\nUpdate metrics for current batch.\n\nArgs:\n    metrics: Dictionary of metric values\n\n**Parameters:**\n\n- **metrics** (query) *required*: string - Dictionary of metric values\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/batch?metrics=example_metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/batch\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"metrics\": \"example_metrics\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.progress_tracker\",\n    \"description\": \"API endpoints for independent_core.progress_tracker\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/console/dashboard\": {\n      \"post\": {\n        \"summary\": \"Create a console dashboard for training monitoring.\",\n        \"description\": \"Create a console dashboard for training monitoring.\",\n        \"operationId\": \"create_console_dashboard\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"tracker\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: tracker\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ProgressTracker\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/progress/percentage\": {\n      \"get\": {\n        \"summary\": \"Get overall progress percentage.\",\n        \"description\": \"Get overall progress percentage.\",\n        \"operationId\": \"get_progress_percentage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/batch\": {\n      \"put\": {\n        \"summary\": \"Update metrics for current batch.\\n\\nArgs:\\n    metrics: Dictionary of metric values\",\n        \"description\": \"Update metrics for current batch.\\n\\nArgs:\\n    metrics: Dictionary of metric values\",\n        \"operationId\": \"update_batch\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"metrics\",\n            \"in\": \"query\",\n            \"description\": \"Dictionary of metric values\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/current/progress\": {\n      \"get\": {\n        \"summary\": \"Get current training progress.\",\n        \"description\": \"Get current training progress.\",\n        \"operationId\": \"get_current_progress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/metrics/history\": {\n      \"get\": {\n        \"summary\": \"Get metrics history.\",\n        \"description\": \"Get metrics history.\",\n        \"operationId\": \"get_metrics_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"metric_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metric_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/alerts\": {\n      \"get\": {\n        \"summary\": \"Get training alerts.\",\n        \"description\": \"Get training alerts.\",\n        \"operationId\": \"get_alerts\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"severity\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: severity\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"unresolved_only\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: unresolved_only\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/progress/bar\": {\n      \"post\": {\n        \"summary\": \"Create a progress bar for training.\",\n        \"description\": \"Create a progress bar for training.\",\n        \"operationId\": \"create_progress_bar\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/save/progress\": {\n      \"post\": {\n        \"summary\": \"Save progress data to file.\",\n        \"description\": \"Save progress data to file.\",\n        \"operationId\": \"save_progress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"save_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: save_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/stop\": {\n      \"post\": {\n        \"summary\": \"Stop progress tracking.\",\n        \"description\": \"Stop progress tracking.\",\n        \"operationId\": \"stop\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/current/metrics\": {\n      \"get\": {\n        \"summary\": \"Get current resource metrics.\",\n        \"description\": \"Get current resource metrics.\",\n        \"operationId\": \"get_current_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.progress_tracker\n\n## Overview\n\nReal-time Progress Tracking System for Saraphis AI Training.\nProvides comprehensive monitoring, alerting, and visualization capabilities.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/progress_tracker.py`\n\n## Dependencies\n\n- pathlib\n- matplotlib\n- threading\n- datetime\n- json\n- time\n- tqdm\n- numpy\n- enum\n- matplotlib.figure\n- matplotlib.pyplot\n- typing\n- warnings\n- psutil\n- GPUtil\n- logging\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 1108\n- **Code Lines:** 841\n- **Comment Lines:** 80\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.progress_tracker\n\nReal-time Progress Tracking System for Saraphis AI Training.\nProvides comprehensive monitoring, alerting, and visualization capabilities.\n\n## Components Overview\n\n- **Classes:** 9\n- **Functions:** 1\n- **Dependencies:** 19\n\n## Class Hierarchy\n\n- **AlertSeverity** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **MetricType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 12\n- **ProgressMetrics**\n  - Methods: 2\n  - Complexity: 28\n- **TrainingAlert**\n  - Methods: 1\n  - Complexity: 13\n- **ProgressTracker**\n  - Methods: 34\n  - Complexity: 167\n- **ResourceMonitor**\n  - Methods: 3\n  - Complexity: 14\n- **ProgressBar**\n  - Methods: 4\n  - Complexity: 18\n- **ConsoleDashboard**\n  - Methods: 5\n  - Complexity: 32\n- **nullcontext**\n  - Methods: 2\n  - Complexity: 7\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.dependency_checker",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/dependency_checker.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.dependency_checker\n\nAPI endpoints for independent_core.dependency_checker\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /decode\n\n#### POST /decode\n\nDecode JWT token with fallback implementation.\n\n🔒 Authentication required\n\n**Parameters:**\n\n- **token** (query) *required*: str - Parameter: token\n- **key** (query) *required*: str - Parameter: key\n- **algorithms** (query) *required*: list - Parameter: algorithms\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000/decode?token=example_token&key=example_key&algorithms=example_algorithms\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/decode\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"token\": \"example_token\",\n    \"key\": \"example_key\",\n    \"algorithms\": \"example_algorithms\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /encode\n\n#### POST /encode\n\nEncode JWT token with fallback implementation.\n\n🔒 Authentication required\n\n**Parameters:**\n\n- **payload** (body) *required*: string - Parameter: payload\n- **key** (query) *required*: str - Parameter: key\n- **algorithm** (query) *required*: str - Parameter: algorithm\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" -d '{\"payload\": \"example_payload\"}' \"http://localhost:8000/encode?key=example_key&algorithm=example_algorithm\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/encode\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\ndata = {\n    \"payload\": \"example_payload\",\n}\n\nparams = {\n    \"key\": \"example_key\",\n    \"algorithm\": \"example_algorithm\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/dependency/status\n\n#### GET /get/dependency/status\n\nGet dependency availability status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/dependency/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/dependency/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/dependency/status\n\nGet status of all dependencies.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/dependency/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/dependency/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.dependency_checker\",\n    \"description\": \"API endpoints for independent_core.dependency_checker\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/dependency/status\": {\n      \"get\": {\n        \"summary\": \"Get status of all dependencies.\",\n        \"description\": \"Get status of all dependencies.\",\n        \"operationId\": \"get_dependency_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/encode\": {\n      \"post\": {\n        \"summary\": \"Encode JWT token with fallback implementation.\",\n        \"description\": \"Encode JWT token with fallback implementation.\",\n        \"operationId\": \"encode\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"algorithm\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: algorithm\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"payload\": {\n                    \"type\": \"string\",\n                    \"description\": \"Parameter: payload\"\n                  }\n                },\n                \"required\": [\n                  \"payload\"\n                ]\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"/decode\": {\n      \"post\": {\n        \"summary\": \"Decode JWT token with fallback implementation.\",\n        \"description\": \"Decode JWT token with fallback implementation.\",\n        \"operationId\": \"decode\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"token\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: token\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"algorithms\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: algorithms\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"list\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.dependency_checker\n\n## Overview\n\nSmart dependency management system with graceful fallbacks.\nProvides fallback implementations for missing modules like JWT and TOML.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/dependency_checker.py`\n\n## Dependencies\n\n- jwt\n- yaml\n- sys\n- logging\n- time\n- typing\n- cryptography.fernet\n- toml\n- base64\n- hashlib\n- fastapi\n- json\n- os\n\n## Code Structure\n\n- **Total Lines:** 403\n- **Code Lines:** 296\n- **Comment Lines:** 35\n\n## Complexity Indicators\n\n- High class count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.dependency_checker\n\nSmart dependency management system with graceful fallbacks.\nProvides fallback implementations for missing modules like JWT and TOML.\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 2\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **DependencyManager**\n  - Methods: 5\n  - Complexity: 20\n- **JWTFallback**\n  - Methods: 2\n  - Complexity: 12\n- **TOMLFallback**\n  - Methods: 4\n  - Complexity: 43\n- **ModuleProxy**\n  - Methods: 2\n  - Complexity: 8\n- **YAMLFallback**\n  - Methods: 2\n  - Complexity: 18\n- **EncryptionFallback**\n  - Methods: 3\n  - Complexity: 10\n## Integration Points\n\n- Class: DependencyManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.comprehensive_documentation",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/comprehensive_documentation.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.comprehensive_documentation",
        "developer_guide": "# Developer Guide: independent_core.comprehensive_documentation\n\n## Overview\n\nComprehensive Documentation Content and Structure Management\n\nAdvanced documentation content generation, template management, and structure \norganization for the Saraphis Independent Core system.\n\nHandles all 186 Python files with sophisticated content analysis and generation.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/comprehensive_documentation.py`\n\n## Dependencies\n\n- pathlib\n- inspect\n- textwrap\n- sys\n- importlib.util\n- enum\n- typing\n- datetime\n- ast\n- dataclasses\n- json\n- re\n- os\n\n## Code Structure\n\n- **Total Lines:** 935\n- **Code Lines:** 713\n- **Comment Lines:** 27\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.comprehensive_documentation\n\nComprehensive Documentation Content and Structure Management\n\nAdvanced documentation content generation, template management, and structure \norganization for the Saraphis Independent Core system.\n\nHandles all 186 Python files with sophisticated content analysis and generation.\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **ContentType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 11\n- **DocumentationTemplate** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **ContentSection**\n  - Methods: 0\n  - Complexity: 6\n- **DocumentationStructure**\n  - Methods: 0\n  - Complexity: 12\n- **SourceCodeAnalyzer**\n  - Methods: 27\n  - Complexity: 184\n- **TemplateManager**\n  - Methods: 3\n  - Complexity: 10\n- **DocumentationContent**\n  - Methods: 14\n  - Complexity: 84\n## Integration Points\n\n- Class: TemplateManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.brain_gac_coordinator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/brain_gac_coordinator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.brain_gac_coordinator\n\nAPI endpoints for independent_core.brain_gac_coordinator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //initialize/performance/baselines\n\n#### POST //initialize/performance/baselines\n\nInitialize performance baselines\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/performance/baselines\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/performance/baselines\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/coordination/analytics\n\n#### GET /get/coordination/analytics\n\nGet comprehensive coordination analytics.\n\nReturns:\n    Coordination analytics data\n    \nRaises:\n    RuntimeError: If analytics generation fails\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/coordination/analytics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/coordination/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/coordination/status\n\n#### GET /get/coordination/status\n\nGet current coordination status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/coordination/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/coordination/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.brain_gac_coordinator\",\n    \"description\": \"API endpoints for independent_core.brain_gac_coordinator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/coordination/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive coordination analytics.\\n\\nReturns:\\n    Coordination analytics data\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"description\": \"Get comprehensive coordination analytics.\\n\\nReturns:\\n    Coordination analytics data\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"operationId\": \"get_coordination_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/performance/baselines\": {\n      \"post\": {\n        \"summary\": \"Initialize performance baselines\",\n        \"description\": \"Initialize performance baselines\",\n        \"operationId\": \"_initialize_performance_baselines\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/coordination/status\": {\n      \"get\": {\n        \"summary\": \"Get current coordination status\",\n        \"description\": \"Get current coordination status\",\n        \"operationId\": \"get_coordination_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"coordination_mode\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_sessions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_coordinations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"successful_coordinations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"failed_coordinations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"coordination_efficiency\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"resource_allocation\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_optimization\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.brain_gac_coordinator\n\n## Overview\n\nBrain-GAC Coordinator - Coordination between Brain and GAC operations  \nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/brain_gac_coordinator.py`\n\n## Dependencies\n\n- threading\n- datetime\n- time\n- numpy\n- math\n- gac_system.direction_state\n- enum\n- torch\n- compression_systems.padic.hybrid_padic_compressor\n- compression_systems.padic.dynamic_switching_manager\n- gac_system.gac_components\n- typing\n- gac_system.gac_types\n- brain\n- concurrent.futures\n- compression_systems.padic.direction_manager\n- logging\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1695\n- **Code Lines:** 1221\n- **Comment Lines:** 154\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.brain_gac_coordinator\n\nBrain-GAC Coordinator - Coordination between Brain and GAC operations  \nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 19\n\n## Class Hierarchy\n\n- **CoordinationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **SessionCoordinationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **ResourceCoordinationLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **TrainingSessionConfig**\n  - Methods: 1\n  - Complexity: 17\n- **CoordinationResult**\n  - Methods: 1\n  - Complexity: 16\n- **CoordinationAnalytics**\n  - Methods: 0\n  - Complexity: 14\n- **BrainGACCoordinatorConfig**\n  - Methods: 1\n  - Complexity: 33\n- **BrainGACCoordinator**\n  - Methods: 62\n  - Complexity: 344\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.production_monitoring_system",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/production_monitoring_system.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.production_monitoring_system\n\nAPI endpoints for independent_core.production_monitoring_system\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **config** (query) *required*: MonitoringConfiguration - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //check/metrics/for/alerts\n\n#### POST //check/metrics/for/alerts\n\nCheck metrics for alert conditions.\n\n**Parameters:**\n\n- **metrics** (query) *required*: string - Parameter: metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//check/metrics/for/alerts?metrics=example_metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//check/metrics/for/alerts\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"metrics\": \"example_metrics\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //integrate/production/config\n\n#### POST //integrate/production/config\n\nIntegrate with production configuration manager.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//integrate/production/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//integrate/production/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /collect/application/metrics\n\n#### POST /collect/application/metrics\n\nCollect application performance metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/collect/application/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/collect/application/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/production/monitoring/system\n\n#### POST /create/production/monitoring/system\n\nFactory function to create a ProductionMonitoringSystem instance.\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/production/monitoring/system?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/production/monitoring/system\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/alerts\n\n#### GET /get/alerts\n\nGet alerts with optional filtering.\n\n**Parameters:**\n\n- **severity** (query) *required*: string - Parameter: severity\n- **component** (query) *required*: string - Parameter: component\n- **resolved** (query) *required*: string - Parameter: resolved\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/alerts?severity=example_severity&component=example_component&resolved=example_resolved\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/alerts\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"severity\": \"example_severity\",\n    \"component\": \"example_component\",\n    \"resolved\": \"example_resolved\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/health/status\n\n#### GET /get/health/status\n\nGet overall health status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/health/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/health/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/metrics\n\n#### GET /get/metrics\n\nGet metrics with optional filtering.\n\n**Parameters:**\n\n- **component** (query) *required*: string - Parameter: component\n- **metric_name** (query) *required*: string - Parameter: metric_name\n- **time_range_minutes** (query) *required*: int - Parameter: time_range_minutes\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metrics?component=example_component&metric_name=example_metric_name&time_range_minutes=example_time_range_minutes\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"component\": \"example_component\",\n    \"metric_name\": \"example_metric_name\",\n    \"time_range_minutes\": \"example_time_range_minutes\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/monitoring/status\n\n#### GET /get/monitoring/status\n\nGet current monitoring status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/monitoring/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/monitoring/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /record/request\n\n#### POST /record/request\n\nRecord application request metrics.\n\n**Parameters:**\n\n- **response_time_ms** (query) *required*: float - Parameter: response_time_ms\n- **status_code** (query) *required*: int - Parameter: status_code\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/record/request?response_time_ms=example_response_time_ms&status_code=example_status_code\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/record/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response_time_ms\": \"example_response_time_ms\",\n    \"status_code\": \"example_status_code\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.production_monitoring_system\",\n    \"description\": \"API endpoints for independent_core.production_monitoring_system\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/production/monitoring/system\": {\n      \"post\": {\n        \"summary\": \"Factory function to create a ProductionMonitoringSystem instance.\",\n        \"description\": \"Factory function to create a ProductionMonitoringSystem instance.\",\n        \"operationId\": \"create_production_monitoring_system\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MonitoringConfiguration\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/collect/application/metrics\": {\n      \"post\": {\n        \"summary\": \"Collect application performance metrics.\",\n        \"description\": \"Collect application performance metrics.\",\n        \"operationId\": \"collect_application_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/record/request\": {\n      \"post\": {\n        \"summary\": \"Record application request metrics.\",\n        \"description\": \"Record application request metrics.\",\n        \"operationId\": \"record_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response_time_ms\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response_time_ms\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"status_code\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: status_code\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/monitoring/status\": {\n      \"get\": {\n        \"summary\": \"Get current monitoring status.\",\n        \"description\": \"Get current monitoring status.\",\n        \"operationId\": \"get_monitoring_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_level\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"enabled_components\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"uptime_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metrics_collected\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"alerts_generated\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"health_checks_performed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_alerts\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_threads\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_alerts\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_health_checks\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/metrics\": {\n      \"get\": {\n        \"summary\": \"Get metrics with optional filtering.\",\n        \"description\": \"Get metrics with optional filtering.\",\n        \"operationId\": \"get_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"component\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: component\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"metric_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metric_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"time_range_minutes\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: time_range_minutes\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/alerts\": {\n      \"get\": {\n        \"summary\": \"Get alerts with optional filtering.\",\n        \"description\": \"Get alerts with optional filtering.\",\n        \"operationId\": \"get_alerts\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"severity\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: severity\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"component\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: component\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"resolved\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: resolved\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/health/status\": {\n      \"get\": {\n        \"summary\": \"Get overall health status.\",\n        \"description\": \"Get overall health status.\",\n        \"operationId\": \"get_health_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"overall_status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"components\": {\n                      \"type\": \"object\",\n                      \"properties\": {}\n                    },\n                    \"last_check\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//check/metrics/for/alerts\": {\n      \"post\": {\n        \"summary\": \"Check metrics for alert conditions.\",\n        \"description\": \"Check metrics for alert conditions.\",\n        \"operationId\": \"_check_metrics_for_alerts\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"metrics\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//integrate/production/config\": {\n      \"post\": {\n        \"summary\": \"Integrate with production configuration manager.\",\n        \"description\": \"Integrate with production configuration manager.\",\n        \"operationId\": \"_integrate_production_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.production_monitoring_system\n\n## Overview\n\nProduction Monitoring System - Comprehensive production monitoring system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production monitoring capabilities including\nreal-time system monitoring, application monitoring, database monitoring,\nnetwork monitoring, security monitoring, and alert management.\n\nKey Features:\n- Multi-level monitoring (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Multi-component monitoring (SYSTEM, APPLICATION, DATABASE, NETWORK, SECURITY)\n- Real-time monitoring with configurable intervals\n- Alert management with severity levels and escalation\n- Health check system with automatic failure detection\n- Performance tracking with historical data\n- Resource monitoring (CPU, memory, disk, network, GPU)\n- Application monitoring (response times, throughput, errors)\n- Database monitoring (connections, queries, performance)\n- Network monitoring (latency, bandwidth, connectivity)\n- Security monitoring (authentication, authorization, threats)\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll monitoring operations must succeed or fail explicitly with detailed error information.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/production_monitoring_system.py`\n\n## Dependencies\n\n- pathlib\n- socket\n- statistics\n- threading\n- json\n- datetime\n- time\n- contextlib\n- numpy\n- enum\n- uuid\n- traceback\n- subprocess\n- pynvml\n- typing\n- compression_systems.padic.hybrid_performance_monitor\n- sqlite3\n- psutil\n- aiohttp\n- logging\n- progress_tracker\n- asyncio\n- production_config_manager\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 1567\n- **Code Lines:** 1241\n- **Comment Lines:** 78\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "deployment_guide": "\n# independent_core.production_monitoring_system\n\nProduction Monitoring System - Comprehensive production monitoring system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production monitoring capabilities including\nreal-time system monitoring, application monitoring, database monitoring,\nnetwork monitoring, security monitoring, and alert management.\n\nKey Features:\n- Multi-level monitoring (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Multi-component monitoring (SYSTEM, APPLICATION, DATABASE, NETWORK, SECURITY)\n- Real-time monitoring with configurable intervals\n- Alert management with severity levels and escalation\n- Health check system with automatic failure detection\n- Performance tracking with historical data\n- Resource monitoring (CPU, memory, disk, network, GPU)\n- Application monitoring (response times, throughput, errors)\n- Database monitoring (connections, queries, performance)\n- Network monitoring (latency, bandwidth, connectivity)\n- Security monitoring (authentication, authorization, threats)\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll monitoring operations must succeed or fail explicitly with detailed error information.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/production_monitoring_system.py\n- **Total Classes:** 15\n- **Total Functions:** 1\n- **Dependencies:** pathlib, socket, statistics, threading, json, datetime, time, contextlib, numpy, enum, uuid, traceback, subprocess, pynvml, typing, compression_systems.padic.hybrid_performance_monitor, sqlite3, psutil, aiohttp, logging, progress_tracker, asyncio, production_config_manager, dataclasses, collections, os\n\n## Contents\n**Classes (15):** ProductionMonitoringLevel, MonitoringComponent, MonitoringStatus, AlertSeverity, HealthStatus, ProductionMetric, ProductionAlert, ProductionHealthCheck, MonitoringConfiguration, SystemMonitor, ApplicationMonitor, DatabaseMonitor, NetworkMonitor, SecurityMonitor, ProductionMonitoringSystem\n**Functions (1):** create_production_monitoring_system\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nmetric_name=\"cpu_usage_percent\",\n\nmetric_name=\"memory_usage_percent\",\n\nmetric_name=\"swap_usage_percent\",\n\ndisk_usage = psutil.disk_usage('/')\n\nmetric_name=\"disk_usage_percent\",\n\nmetric_value=(disk_usage.used / disk_usage.total) * 100,\n\nmetric_value=disk_usage.free / (1024**3),\n\nmetric_name=f\"gpu_{i}_memory_usage_percent\",\n\ncpu_message = f\"CPU usage: {cpu_percent:.1f}%\"\n\n\ncpu_message = f\"High CPU usage: {cpu_percent:.1f}% > {self.config.cpu_threshold_percent}%\"\n\n\nmemory_message = f\"Memory usage: {memory.percent:.1f}%\"\n\n\nmemory_message = f\"High memory usage: {memory.percent:.1f}% > {self.config.memory_threshold_percent}%\"\n\n\ndisk_usage = psutil.disk_usage('/')\n\ndisk_percent = (disk_usage.used / disk_usage.total) * 100\n\ndisk_message = f\"Disk usage: {disk_percent:.1f}%\"\n\n\ndisk_message = f\"High disk usage: {disk_percent:.1f}% > {self.config.disk_threshold_percent}%\"\n\n\nif metric.metric_name == \"cpu_usage_percent\" and isinstance(metric.metric_value, (int, float)):\n\nmessage=f\"CPU usage {metric.metric_value:.1f}% exceeds threshold {self.config.cpu_threshold_percent}%\",\n\nelif metric.metric_name == \"memory_usage_percent\" and isinstance(metric.metric_value, (int, float)):\n\nmessage=f\"Memory usage {metric.metric_value:.1f}% exceeds threshold {self.config.memory_threshold_percent}%\",\n\nelif metric.metric_name == \"disk_usage_percent\" and isinstance(metric.metric_value, (int, float)):\n\nmessage=f\"Disk usage {metric.metric_value:.1f}% exceeds threshold {self.config.disk_threshold_percent}%\",\n\n# Example usage\n",
        "architecture": "# Architecture: independent_core.production_monitoring_system\n\nProduction Monitoring System - Comprehensive production monitoring system\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module provides comprehensive production monitoring capabilities including\nreal-time system monitoring, application monitoring, database monitoring,\nnetwork monitoring, security monitoring, and alert management.\n\nKey Features:\n- Multi-level monitoring (BASIC, STANDARD, ENHANCED, COMPREHENSIVE)\n- Multi-component monitoring (SYSTEM, APPLICATION, DATABASE, NETWORK, SECURITY)\n- Real-time monitoring with configurable intervals\n- Alert management with severity levels and escalation\n- Health check system with automatic failure detection\n- Performance tracking with historical data\n- Resource monitoring (CPU, memory, disk, network, GPU)\n- Application monitoring (response times, throughput, errors)\n- Database monitoring (connections, queries, performance)\n- Network monitoring (latency, bandwidth, connectivity)\n- Security monitoring (authentication, authorization, threats)\n\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\nAll monitoring operations must succeed or fail explicitly with detailed error information.\n\n## Components Overview\n\n- **Classes:** 15\n- **Functions:** 1\n- **Dependencies:** 26\n\n## Class Hierarchy\n\n- **ProductionMonitoringLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **MonitoringComponent** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **MonitoringStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **AlertSeverity** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **HealthStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **ProductionMetric**\n  - Methods: 1\n  - Complexity: 15\n- **ProductionAlert**\n  - Methods: 1\n  - Complexity: 21\n- **ProductionHealthCheck**\n  - Methods: 1\n  - Complexity: 17\n- **MonitoringConfiguration**\n  - Methods: 0\n  - Complexity: 25\n- **SystemMonitor**\n  - Methods: 3\n  - Complexity: 17\n- **ApplicationMonitor**\n  - Methods: 3\n  - Complexity: 12\n- **DatabaseMonitor**\n  - Methods: 2\n  - Complexity: 9\n- **NetworkMonitor**\n  - Methods: 3\n  - Complexity: 12\n- **SecurityMonitor**\n  - Methods: 2\n  - Complexity: 7\n- **ProductionMonitoringSystem**\n  - Methods: 23\n  - Complexity: 153\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "deployment_guide missing required section: Prerequisites",
        "deployment_guide missing required section: Installation",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.brain_gac_optimizer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/brain_gac_optimizer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.brain_gac_optimizer\n\nAPI endpoints for independent_core.brain_gac_optimizer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/optimization/analytics\n\n#### GET /get/optimization/analytics\n\nGet comprehensive optimization analytics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimization/analytics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimization/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/optimization/recommendations\n\n#### GET /get/optimization/recommendations\n\nAPI endpoint: get_optimization_recommendations\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimization/recommendations\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimization/recommendations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/summary\n\n#### GET /get/performance/summary\n\nAPI endpoint: get_performance_summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.brain_gac_optimizer\",\n    \"description\": \"API endpoints for independent_core.brain_gac_optimizer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/optimization/recommendations\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_optimization_recommendations\",\n        \"description\": \"API endpoint: get_optimization_recommendations\",\n        \"operationId\": \"get_optimization_recommendations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/performance/summary\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_performance_summary\",\n        \"description\": \"API endpoint: get_performance_summary\",\n        \"operationId\": \"get_performance_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/optimization/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive optimization analytics\",\n        \"description\": \"Get comprehensive optimization analytics\",\n        \"operationId\": \"get_optimization_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"summary\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recommendations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"current_config\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"strategy\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"level\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"mode\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"optimization_interval\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"thresholds\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"performance\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"memory\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"gradient\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"resource\": {\n                              \"type\": \"unknown\"\n                            }\n                          }\n                        }\n                      }\n                    },\n                    \"system_status\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"is_running\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"active_optimizations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"queued_optimizations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"thread_pool_active\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"performance_metrics\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.brain_gac_optimizer\n\n## Overview\n\nBrain-GAC Optimizer: Performance optimization for Brain-GAC integration\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/brain_gac_optimizer.py`\n\n## Dependencies\n\n- numpy\n- concurrent.futures\n- logging\n- enum\n- typing\n- gc\n- hashlib\n- psutil\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 903\n- **Code Lines:** 664\n- **Comment Lines:** 54\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.brain_gac_optimizer\n\nBrain-GAC Optimizer: Performance optimization for Brain-GAC integration\nArchitecture: NO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **OptimizationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **OptimizationLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **OptimizationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **OptimizationConfig**\n  - Methods: 0\n  - Complexity: 15\n- **OptimizationMetrics**\n  - Methods: 0\n  - Complexity: 24\n- **OptimizationResult**\n  - Methods: 0\n  - Complexity: 6\n- **OptimizationAnalytics**\n  - Methods: 6\n  - Complexity: 34\n- **BrainGACOptimizer**\n  - Methods: 26\n  - Complexity: 130\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.memory_optimizer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/memory_optimizer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.memory_optimizer\n\nAPI endpoints for independent_core.memory_optimizer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/memory/report\n\n#### GET /get/memory/report\n\nGenerate comprehensive memory usage report.\n\nReturns:\n    Dictionary containing detailed memory analysis\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/memory/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/memory/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.memory_optimizer\",\n    \"description\": \"API endpoints for independent_core.memory_optimizer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/memory/report\": {\n      \"get\": {\n        \"summary\": \"Generate comprehensive memory usage report.\\n\\nReturns:\\n    Dictionary containing detailed memory analysis\",\n        \"description\": \"Generate comprehensive memory usage report.\\n\\nReturns:\\n    Dictionary containing detailed memory analysis\",\n        \"operationId\": \"get_memory_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_memory\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"component_summary\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"leak_summary\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_summary\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"gc_statistics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"collections_gen0\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"collections_gen1\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"collections_gen2\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"total_time_spent\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"objects_collected\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"memory_freed_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_collection_time\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"optimization_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"historical_trends\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"optimization_strategy\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"tracking_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"leak_detection_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"memory_threshold_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"leak_threshold_mb_per_hour\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.memory_optimizer\n\n## Overview\n\nMemory usage optimization and management for Saraphis Brain system.\nProvides comprehensive memory tracking, leak detection, garbage collection optimization, and cache management.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/memory_optimizer.py`\n\n## Dependencies\n\n- numpy\n- tracemalloc\n- sys\n- logging\n- datetime\n- contextlib\n- enum\n- typing\n- warnings\n- ctypes\n- gc\n- psutil\n- threading\n- dataclasses\n- weakref\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 885\n- **Code Lines:** 664\n- **Comment Lines:** 64\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.memory_optimizer\n\nMemory usage optimization and management for Saraphis Brain system.\nProvides comprehensive memory tracking, leak detection, garbage collection optimization, and cache management.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 17\n\n## Class Hierarchy\n\n- **MemoryOptimizationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **MemoryLeakSeverity** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **MemorySnapshot**\n  - Methods: 0\n  - Complexity: 12\n- **MemoryLeakReport**\n  - Methods: 0\n  - Complexity: 11\n- **CacheMetrics**\n  - Methods: 0\n  - Complexity: 10\n- **GarbageCollectionStats**\n  - Methods: 0\n  - Complexity: 9\n- **MemoryOptimizer**\n  - Methods: 22\n  - Complexity: 153\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.performance_optimizer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/performance_optimizer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.performance_optimizer\n\nAPI endpoints for independent_core.performance_optimizer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/average/cpu\n\n#### GET /get/average/cpu\n\nGet average CPU usage over monitoring period\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/average/cpu\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/average/cpu\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/average/memory\n\n#### GET /get/average/memory\n\nGet average memory usage over monitoring period\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/average/memory\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/average/memory\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/report\n\n#### GET /get/performance/report\n\nGenerate comprehensive performance report.\n\nReturns:\n    Dictionary containing detailed performance analysis\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.performance_optimizer\",\n    \"description\": \"API endpoints for independent_core.performance_optimizer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/performance/report\": {\n      \"get\": {\n        \"summary\": \"Generate comprehensive performance report.\\n\\nReturns:\\n    Dictionary containing detailed performance analysis\",\n        \"description\": \"Generate comprehensive performance report.\\n\\nReturns:\\n    Dictionary containing detailed performance analysis\",\n        \"operationId\": \"get_performance_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"operation_statistics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"bottleneck_summary\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_recommendations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"optimization_strategy\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"profiling_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"bottleneck_threshold\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"profile_history_size\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/average/cpu\": {\n      \"get\": {\n        \"summary\": \"Get average CPU usage over monitoring period\",\n        \"description\": \"Get average CPU usage over monitoring period\",\n        \"operationId\": \"get_average_cpu\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/average/memory\": {\n      \"get\": {\n        \"summary\": \"Get average memory usage over monitoring period\",\n        \"description\": \"Get average memory usage over monitoring period\",\n        \"operationId\": \"get_average_memory\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.performance_optimizer\n\n## Overview\n\nMain performance optimization orchestrator for Saraphis Brain system.\nProvides comprehensive performance profiling, bottleneck detection, and optimization strategy coordination.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/performance_optimizer.py`\n\n## Dependencies\n\n- functools\n- numpy\n- sys\n- logging\n- datetime\n- contextlib\n- enum\n- typing\n- traceback\n- asyncio\n- torch\n- gc\n- psutil\n- threading\n- dataclasses\n- weakref\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 924\n- **Code Lines:** 709\n- **Comment Lines:** 46\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Async programming\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.performance_optimizer\n\nMain performance optimization orchestrator for Saraphis Brain system.\nProvides comprehensive performance profiling, bottleneck detection, and optimization strategy coordination.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/performance_optimizer.py\n- **Total Classes:** 7\n- **Total Functions:** 0\n- **Dependencies:** functools, numpy, sys, logging, datetime, contextlib, enum, typing, traceback, asyncio, torch, gc, psutil, threading, dataclasses, weakref, collections, time\n\n## Contents\n**Classes (7):** OptimizationStrategy, BottleneckType, OperationProfile, BottleneckReport, OptimizationRecommendation, PerformanceOptimizer, SystemMonitor\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\ncpu_usage: float\n\nmemory_usage: float\n\ngpu_usage: float = 0.0\n\ncpu_usage=0.0,\n\nmemory_usage=0.0,\n\nprofile.gpu_usage = final_gpu_memory - initial_gpu_memory\n\n\nprofile.cpu_usage = final_cpu - initial_cpu\n\nprofile.memory_usage = final_memory - initial_memory\n\n# Store profile data\n\nf\"memory={profile.memory_usage / 1024 / 1024:.2f}MB, \"\n\ncpu_usage=0.0,\n\nmemory_usage=0.0,\n\nprofile.memory_usage = psutil.virtual_memory().used - initial_memory\n\n\nif len(profiles) < 10:  # Require minimum samples\n\nmemory_usages = [p.memory_usage for p in profiles if p.success]\n\ncpu_usages = [p.cpu_usage for p in profiles if p.success]\n\n\navg_memory = np.mean(memory_usages)\n\navg_cpu = np.mean(cpu_usages)\n\n# Determine bottleneck type\n\nelif avg_cpu > 80:  # > 80% CPU usage\n\nrisks.append(\"Memory usage pattern changes\")\n\nmemory_usages = [p.memory_usage for p in profiles if p.success]\n\n'avg_memory_usage': np.mean(memory_usages),\n\n'total_memory_usage': np.sum(memory_usages)\n\n'cpu_usage': psutil.cpu_percent(interval=1),\n\n'memory_usage': psutil.virtual_memory().percent,\n\n'disk_usage': psutil.disk_usage('/').percent,\n\ncpu_usage = psutil.cpu_percent()\n\nmemory_usage = psutil.virtual_memory().percent\n\n\nif cpu_usage > 95:\n\nself.logger.warning(f\"Critical CPU usage detected: {cpu_usage}%\")\n\n\nif memory_usage > 90:\n\nself.logger.warning(f\"Critical memory usage detected: {memory_usage}%\")\n\n# Check for operations taking too long\n\n\"\"\"Get average CPU usage over monitoring period\"\"\"\n\n\"\"\"Get average memory usage over monitoring period\"\"\"\n",
        "architecture": "# Architecture: independent_core.performance_optimizer\n\nMain performance optimization orchestrator for Saraphis Brain system.\nProvides comprehensive performance profiling, bottleneck detection, and optimization strategy coordination.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 18\n\n## Class Hierarchy\n\n- **OptimizationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **BottleneckType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **OperationProfile**\n  - Methods: 0\n  - Complexity: 14\n- **BottleneckReport**\n  - Methods: 0\n  - Complexity: 11\n- **OptimizationRecommendation**\n  - Methods: 0\n  - Complexity: 10\n- **PerformanceOptimizer**\n  - Methods: 25\n  - Complexity: 163\n- **SystemMonitor**\n  - Methods: 4\n  - Complexity: 14\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.brain_core",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/brain_core.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.brain_core\n\nAPI endpoints for independent_core.brain_core\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //cleanup/old/checkpoints\n\n#### POST //cleanup/old/checkpoints\n\nClean up old checkpoints, keeping only the most recent ones.\n\nArgs:\n    checkpoint_dir: Directory containing checkpoints\n    keep_count: Number of checkpoints to keep\n\n**Parameters:**\n\n- **checkpoint_dir** (query) *required*: Path - Directory containing checkpoints\n- **keep_count** (query) *required*: int - Number of checkpoints to keep\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//cleanup/old/checkpoints?checkpoint_dir=example_checkpoint_dir&keep_count=example_keep_count\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//cleanup/old/checkpoints\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"checkpoint_dir\": \"example_checkpoint_dir\",\n    \"keep_count\": \"example_keep_count\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //deep/copy/state\n\n#### POST //deep/copy/state\n\nCreate a deep copy of the state.\n\nArgs:\n    state: State to copy\n    \nReturns:\n    Deep copy of the state\n\n**Parameters:**\n\n- **state** (query) *required*: string - State to copy\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//deep/copy/state?state=example_state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//deep/copy/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"state\": \"example_state\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //estimate/memory/usage\n\n#### POST //estimate/memory/usage\n\nEstimate memory usage of shared state in bytes.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//estimate/memory/usage\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//estimate/memory/usage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //generate/cache/key\n\n#### POST //generate/cache/key\n\nGenerate cache key for prediction.\n\n**Parameters:**\n\n- **validated_input** (query) *required*: Any - Parameter: validated_input\n- **domain** (query) *required*: string - Parameter: domain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/cache/key?validated_input=example_validated_input&domain=example_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/cache/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"validated_input\": \"example_validated_input\",\n    \"domain\": \"example_domain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //load/persisted/knowledge\n\n#### POST //load/persisted/knowledge\n\nLoad persisted knowledge from disk.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/persisted/knowledge\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/persisted/knowledge\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //persist/knowledge\n\n#### POST //persist/knowledge\n\nPersist current knowledge state to disk.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//persist/knowledge\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//persist/knowledge\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //select/domain\n\n#### POST //select/domain\n\nSelect the most appropriate domain for prediction.\n\n**Parameters:**\n\n- **validated_input** (query) *required*: Any - Parameter: validated_input\n- **requested_domain** (query) *required*: string - Parameter: requested_domain\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//select/domain?validated_input=example_validated_input&requested_domain=example_requested_domain&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//select/domain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"validated_input\": \"example_validated_input\",\n    \"requested_domain\": \"example_requested_domain\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //serialize/state\n\n#### POST //serialize/state\n\nSerialize complete brain state for persistence.\n\nReturns:\n    Dictionary containing serialized brain state\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//serialize/state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//serialize/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //validate/and/sanitize/input\n\n#### POST //validate/and/sanitize/input\n\nValidate and sanitize input data.\n\nArgs:\n    input_data: Raw input data\n    \nReturns:\n    Tuple of (validated_input, input_type)\n    \nRaises:\n    ValueError: If input is invalid\n\n**Parameters:**\n\n- **input_data** (query) *required*: Any - Raw input data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/and/sanitize/input?input_data=example_input_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/and/sanitize/input\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/knowledge/entry\n\n#### POST //validate/knowledge/entry\n\nValidate a knowledge entry before adding to the store.\n\nArgs:\n    key: Knowledge key\n    entry: Knowledge entry to validate\n    \nReturns:\n    True if valid, False otherwise\n\n**Parameters:**\n\n- **key** (query) *required*: str - Knowledge key\n- **entry** (query) *required*: string - Knowledge entry to validate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/knowledge/entry?key=example_key&entry=example_entry\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/knowledge/entry\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key\": \"example_key\",\n    \"entry\": \"example_entry\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/checkpoint\n\n#### POST /create/checkpoint\n\nCreate a checkpoint of current brain state.\n\nArgs:\n    checkpoint_name: Optional name for checkpoint. If None, timestamp is used.\n    \nReturns:\n    Path to checkpoint file if successful, None otherwise\n\n**Parameters:**\n\n- **checkpoint_name** (query) *required*: string - Optional name for checkpoint. If None, timestamp is used.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/checkpoint?checkpoint_name=example_checkpoint_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"checkpoint_name\": \"example_checkpoint_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /enable/auto/backup\n\n#### POST /enable/auto/backup\n\nEnable automatic state backup at specified intervals.\n\nArgs:\n    interval_seconds: Backup interval in seconds (default: 1 hour)\n    backup_path: Optional custom backup path. If None, uses default location.\n    \nReturns:\n    True if auto-backup was enabled successfully\n\n**Parameters:**\n\n- **interval_seconds** (query) *required*: int - Backup interval in seconds (default: 1 hour)\n- **backup_path** (query) *required*: string - Optional custom backup path. If None, uses default location.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/enable/auto/backup?interval_seconds=example_interval_seconds&backup_path=example_backup_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/enable/auto/backup\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"interval_seconds\": \"example_interval_seconds\",\n    \"backup_path\": \"example_backup_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /export/state\n\n#### POST /export/state\n\nExport brain state in specified format.\n\nArgs:\n    format: Export format ('json', 'pickle', 'yaml')\n    include_cache: Whether to include cache in export\n    \nReturns:\n    Exported state data or None on failure\n\n**Parameters:**\n\n- **format** (query) *required*: str - Export format ('json', 'pickle', 'yaml')\n- **include_cache** (query) *required*: bool - Whether to include cache in export\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/state?format=example_format&include_cache=example_include_cache\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"format\": \"example_format\",\n    \"include_cache\": \"example_include_cache\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/backup/status\n\n#### GET /get/backup/status\n\nGet current backup status information.\n\nReturns:\n    Dictionary containing backup status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/backup/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/backup/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/confidence/score\n\n#### GET /get/confidence/score\n\nGet confidence score for a prediction.\n\nArgs:\n    prediction_data: Dictionary containing prediction information\n\nReturns:\n    Confidence score between 0 and 1\n\n**Parameters:**\n\n- **prediction_data** (query) *required*: string - Dictionary containing prediction information\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/confidence/score?prediction_data=example_prediction_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/confidence/score\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"prediction_data\": \"example_prediction_data\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/config\n\n#### GET /get/config\n\nGet current brain configuration as a dictionary.\n\nReturns:\n    Dictionary representation of current configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/shared/knowledge\n\n#### GET /get/shared/knowledge\n\nRetrieve shared knowledge by key.\n\nArgs:\n    key: Knowledge identifier\n    domain: Optional domain to search in. If None, searches all domains\n    \nReturns:\n    Knowledge entry with metadata, or None if not found\n\n**Parameters:**\n\n- **key** (query) *required*: str - Knowledge identifier\n- **domain** (query) *required*: string - Optional domain to search in. If None, searches all domains\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/shared/knowledge?key=example_key&domain=example_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/shared/knowledge\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key\": \"example_key\",\n    \"domain\": \"example_domain\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/shared/state\n\n#### GET /get/shared/state\n\nGet current shared knowledge state.\n\nReturns:\n    Dict containing shared state across all domains\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/shared/state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/shared/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/state/summary\n\n#### GET /get/state/summary\n\nGet a summary of current brain state without full serialization.\n\nReturns:\n    Dictionary containing state summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/state/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/state/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/statistics\n\n#### GET /get/statistics\n\nGet statistics about the Brain Core state.\n\nReturns:\n    Dictionary with state statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/uncertainty/statistics\n\n#### GET /get/uncertainty/statistics\n\nGet statistics about uncertainty tracking.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/uncertainty/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/uncertainty/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /import/state\n\n#### POST /import/state\n\nImport brain state from specified format.\n\nArgs:\n    data: State data to import\n    format: Import format ('json', 'pickle', 'yaml', 'dict')\n    \nReturns:\n    True if import was successful\n\n**Parameters:**\n\n- **data** (body) *required*: string - State data to import\n- **format** (query) *required*: str - Import format ('json', 'pickle', 'yaml', 'dict')\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000/import/state?format=example_format\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/import/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nparams = {\n    \"format\": \"example_format\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /list/checkpoints\n\n#### POST /list/checkpoints\n\nList available checkpoints.\n\nReturns:\n    List of checkpoint information dictionaries\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/list/checkpoints\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/list/checkpoints\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /load/state\n\n#### POST /load/state\n\nLoad complete brain state from disk including all knowledge, uncertainty models, and configuration.\n\nArgs:\n    filepath: Path to the state file to load\n    \nReturns:\n    True if load was successful, False otherwise\n\n**Parameters:**\n\n- **filepath** (query) *required*: string - Path to the state file to load\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/state?filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /predict\n\n#### POST /predict\n\nMake a prediction using the brain's reasoning capabilities.\n\nArgs:\n    input_data: Input data for prediction (can be dict, list, numpy array, or primitive)\n    domain: Optional domain hint for specialized processing\n    \nReturns:\n    PredictionResult with prediction details and metadata\n    \nRaises:\n    ValueError: If input_data is invalid\n    RuntimeError: If prediction fails\n\n**Parameters:**\n\n- **input_data** (query) *required*: Any - Input data for prediction (can be dict, list, numpy array, or primitive)\n- **domain** (query) *required*: string - Optional domain hint for specialized processing\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/predict?input_data=example_input_data&domain=example_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/predict\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n    \"domain\": \"example_domain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /reset/state\n\n#### POST /reset/state\n\nReset brain to initial state.\n\nArgs:\n    preserve_config: Whether to preserve current configuration\n\n**Parameters:**\n\n- **preserve_config** (query) *required*: bool - Whether to preserve current configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/reset/state?preserve_config=example_preserve_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/reset/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"preserve_config\": \"example_preserve_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/state\n\n#### POST /save/state\n\nSave complete brain state to disk including all knowledge, uncertainty models, and configuration.\n\nArgs:\n    filepath: Path where to save the state file\n    \nReturns:\n    True if save was successful, False otherwise\n\n**Parameters:**\n\n- **filepath** (query) *required*: string - Path where to save the state file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/state?filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/config\n\n#### PUT /update/config\n\nUpdate brain configuration dynamically.\n\nArgs:\n    config_dict: Dictionary with configuration updates\n    \nReturns:\n    True if update was successful, False otherwise\n\n**Parameters:**\n\n- **config_dict** (query) *required*: string - Dictionary with configuration updates\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/config?config_dict=example_config_dict\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_dict\": \"example_config_dict\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.brain_core\",\n    \"description\": \"API endpoints for independent_core.brain_core\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/predict\": {\n      \"post\": {\n        \"summary\": \"Make a prediction using the brain's reasoning capabilities.\\n\\nArgs:\\n    input_data: Input data for prediction (can be dict, list, numpy array, or primitive)\\n    domain: Optional domain hint for specialized processing\\n    \\nReturns:\\n    PredictionResult with prediction details and metadata\\n    \\nRaises:\\n    ValueError: If input_data is invalid\\n    RuntimeError: If prediction fails\",\n        \"description\": \"Make a prediction using the brain's reasoning capabilities.\\n\\nArgs:\\n    input_data: Input data for prediction (can be dict, list, numpy array, or primitive)\\n    domain: Optional domain hint for specialized processing\\n    \\nReturns:\\n    PredictionResult with prediction details and metadata\\n    \\nRaises:\\n    ValueError: If input_data is invalid\\n    RuntimeError: If prediction fails\",\n        \"operationId\": \"predict\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Input data for prediction (can be dict, list, numpy array, or primitive)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"domain\",\n            \"in\": \"query\",\n            \"description\": \"Optional domain hint for specialized processing\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/confidence/score\": {\n      \"get\": {\n        \"summary\": \"Get confidence score for a prediction.\\n\\nArgs:\\n    prediction_data: Dictionary containing prediction information\\n\\nReturns:\\n    Confidence score between 0 and 1\",\n        \"description\": \"Get confidence score for a prediction.\\n\\nArgs:\\n    prediction_data: Dictionary containing prediction information\\n\\nReturns:\\n    Confidence score between 0 and 1\",\n        \"operationId\": \"get_confidence_score\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"prediction_data\",\n            \"in\": \"query\",\n            \"description\": \"Dictionary containing prediction information\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/uncertainty/statistics\": {\n      \"get\": {\n        \"summary\": \"Get statistics about uncertainty tracking.\",\n        \"description\": \"Get statistics about uncertainty tracking.\",\n        \"operationId\": \"get_uncertainty_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_predictions\": {\n                      \"type\": \"number\"\n                    },\n                    \"average_epistemic\": {\n                      \"type\": \"number\"\n                    },\n                    \"average_aleatoric\": {\n                      \"type\": \"number\"\n                    },\n                    \"average_confidence\": {\n                      \"type\": \"number\"\n                    },\n                    \"domain_confidences\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//validate/and/sanitize/input\": {\n      \"post\": {\n        \"summary\": \"Validate and sanitize input data.\\n\\nArgs:\\n    input_data: Raw input data\\n    \\nReturns:\\n    Tuple of (validated_input, input_type)\\n    \\nRaises:\\n    ValueError: If input is invalid\",\n        \"description\": \"Validate and sanitize input data.\\n\\nArgs:\\n    input_data: Raw input data\\n    \\nReturns:\\n    Tuple of (validated_input, input_type)\\n    \\nRaises:\\n    ValueError: If input is invalid\",\n        \"operationId\": \"_validate_and_sanitize_input\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Raw input data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/cache/key\": {\n      \"post\": {\n        \"summary\": \"Generate cache key for prediction.\",\n        \"description\": \"Generate cache key for prediction.\",\n        \"operationId\": \"_generate_cache_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"validated_input\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: validated_input\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"domain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//select/domain\": {\n      \"post\": {\n        \"summary\": \"Select the most appropriate domain for prediction.\",\n        \"description\": \"Select the most appropriate domain for prediction.\",\n        \"operationId\": \"_select_domain\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"validated_input\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: validated_input\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"requested_domain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: requested_domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/shared/state\": {\n      \"get\": {\n        \"summary\": \"Get current shared knowledge state.\\n\\nReturns:\\n    Dict containing shared state across all domains\",\n        \"description\": \"Get current shared knowledge state.\\n\\nReturns:\\n    Dict containing shared state across all domains\",\n        \"operationId\": \"get_shared_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//deep/copy/state\": {\n      \"post\": {\n        \"summary\": \"Create a deep copy of the state.\\n\\nArgs:\\n    state: State to copy\\n    \\nReturns:\\n    Deep copy of the state\",\n        \"description\": \"Create a deep copy of the state.\\n\\nArgs:\\n    state: State to copy\\n    \\nReturns:\\n    Deep copy of the state\",\n        \"operationId\": \"_deep_copy_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"state\",\n            \"in\": \"query\",\n            \"description\": \"State to copy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"knowledge_base\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"reasoning_patterns\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cross_domain_insights\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metadata\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//persist/knowledge\": {\n      \"post\": {\n        \"summary\": \"Persist current knowledge state to disk.\",\n        \"description\": \"Persist current knowledge state to disk.\",\n        \"operationId\": \"_persist_knowledge\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/persisted/knowledge\": {\n      \"post\": {\n        \"summary\": \"Load persisted knowledge from disk.\",\n        \"description\": \"Load persisted knowledge from disk.\",\n        \"operationId\": \"_load_persisted_knowledge\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/statistics\": {\n      \"get\": {\n        \"summary\": \"Get statistics about the Brain Core state.\\n\\nReturns:\\n    Dictionary with state statistics\",\n        \"description\": \"Get statistics about the Brain Core state.\\n\\nReturns:\\n    Dictionary with state statistics\",\n        \"operationId\": \"get_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//estimate/memory/usage\": {\n      \"post\": {\n        \"summary\": \"Estimate memory usage of shared state in bytes.\",\n        \"description\": \"Estimate memory usage of shared state in bytes.\",\n        \"operationId\": \"_estimate_memory_usage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/shared/knowledge\": {\n      \"get\": {\n        \"summary\": \"Retrieve shared knowledge by key.\\n\\nArgs:\\n    key: Knowledge identifier\\n    domain: Optional domain to search in. If None, searches all domains\\n    \\nReturns:\\n    Knowledge entry with metadata, or None if not found\",\n        \"description\": \"Retrieve shared knowledge by key.\\n\\nArgs:\\n    key: Knowledge identifier\\n    domain: Optional domain to search in. If None, searches all domains\\n    \\nReturns:\\n    Knowledge entry with metadata, or None if not found\",\n        \"operationId\": \"get_shared_knowledge\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Knowledge identifier\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"domain\",\n            \"in\": \"query\",\n            \"description\": \"Optional domain to search in. If None, searches all domains\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/knowledge/entry\": {\n      \"post\": {\n        \"summary\": \"Validate a knowledge entry before adding to the store.\\n\\nArgs:\\n    key: Knowledge key\\n    entry: Knowledge entry to validate\\n    \\nReturns:\\n    True if valid, False otherwise\",\n        \"description\": \"Validate a knowledge entry before adding to the store.\\n\\nArgs:\\n    key: Knowledge key\\n    entry: Knowledge entry to validate\\n    \\nReturns:\\n    True if valid, False otherwise\",\n        \"operationId\": \"_validate_knowledge_entry\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Knowledge key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"entry\",\n            \"in\": \"query\",\n            \"description\": \"Knowledge entry to validate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/save/state\": {\n      \"post\": {\n        \"summary\": \"Save complete brain state to disk including all knowledge, uncertainty models, and configuration.\\n\\nArgs:\\n    filepath: Path where to save the state file\\n    \\nReturns:\\n    True if save was successful, False otherwise\",\n        \"description\": \"Save complete brain state to disk including all knowledge, uncertainty models, and configuration.\\n\\nArgs:\\n    filepath: Path where to save the state file\\n    \\nReturns:\\n    True if save was successful, False otherwise\",\n        \"operationId\": \"save_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Path where to save the state file\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/load/state\": {\n      \"post\": {\n        \"summary\": \"Load complete brain state from disk including all knowledge, uncertainty models, and configuration.\\n\\nArgs:\\n    filepath: Path to the state file to load\\n    \\nReturns:\\n    True if load was successful, False otherwise\",\n        \"description\": \"Load complete brain state from disk including all knowledge, uncertainty models, and configuration.\\n\\nArgs:\\n    filepath: Path to the state file to load\\n    \\nReturns:\\n    True if load was successful, False otherwise\",\n        \"operationId\": \"load_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Path to the state file to load\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/config\": {\n      \"put\": {\n        \"summary\": \"Update brain configuration dynamically.\\n\\nArgs:\\n    config_dict: Dictionary with configuration updates\\n    \\nReturns:\\n    True if update was successful, False otherwise\",\n        \"description\": \"Update brain configuration dynamically.\\n\\nArgs:\\n    config_dict: Dictionary with configuration updates\\n    \\nReturns:\\n    True if update was successful, False otherwise\",\n        \"operationId\": \"update_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_dict\",\n            \"in\": \"query\",\n            \"description\": \"Dictionary with configuration updates\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/config\": {\n      \"get\": {\n        \"summary\": \"Get current brain configuration as a dictionary.\\n\\nReturns:\\n    Dictionary representation of current configuration\",\n        \"description\": \"Get current brain configuration as a dictionary.\\n\\nReturns:\\n    Dictionary representation of current configuration\",\n        \"operationId\": \"get_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//serialize/state\": {\n      \"post\": {\n        \"summary\": \"Serialize complete brain state for persistence.\\n\\nReturns:\\n    Dictionary containing serialized brain state\",\n        \"description\": \"Serialize complete brain state for persistence.\\n\\nReturns:\\n    Dictionary containing serialized brain state\",\n        \"operationId\": \"_serialize_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/checkpoint\": {\n      \"post\": {\n        \"summary\": \"Create a checkpoint of current brain state.\\n\\nArgs:\\n    checkpoint_name: Optional name for checkpoint. If None, timestamp is used.\\n    \\nReturns:\\n    Path to checkpoint file if successful, None otherwise\",\n        \"description\": \"Create a checkpoint of current brain state.\\n\\nArgs:\\n    checkpoint_name: Optional name for checkpoint. If None, timestamp is used.\\n    \\nReturns:\\n    Path to checkpoint file if successful, None otherwise\",\n        \"operationId\": \"create_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"checkpoint_name\",\n            \"in\": \"query\",\n            \"description\": \"Optional name for checkpoint. If None, timestamp is used.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/list/checkpoints\": {\n      \"post\": {\n        \"summary\": \"List available checkpoints.\\n\\nReturns:\\n    List of checkpoint information dictionaries\",\n        \"description\": \"List available checkpoints.\\n\\nReturns:\\n    List of checkpoint information dictionaries\",\n        \"operationId\": \"list_checkpoints\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/export/state\": {\n      \"post\": {\n        \"summary\": \"Export brain state in specified format.\\n\\nArgs:\\n    format: Export format ('json', 'pickle', 'yaml')\\n    include_cache: Whether to include cache in export\\n    \\nReturns:\\n    Exported state data or None on failure\",\n        \"description\": \"Export brain state in specified format.\\n\\nArgs:\\n    format: Export format ('json', 'pickle', 'yaml')\\n    include_cache: Whether to include cache in export\\n    \\nReturns:\\n    Exported state data or None on failure\",\n        \"operationId\": \"export_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"format\",\n            \"in\": \"query\",\n            \"description\": \"Export format ('json', 'pickle', 'yaml')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"include_cache\",\n            \"in\": \"query\",\n            \"description\": \"Whether to include cache in export\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/import/state\": {\n      \"post\": {\n        \"summary\": \"Import brain state from specified format.\\n\\nArgs:\\n    data: State data to import\\n    format: Import format ('json', 'pickle', 'yaml', 'dict')\\n    \\nReturns:\\n    True if import was successful\",\n        \"description\": \"Import brain state from specified format.\\n\\nArgs:\\n    data: State data to import\\n    format: Import format ('json', 'pickle', 'yaml', 'dict')\\n    \\nReturns:\\n    True if import was successful\",\n        \"operationId\": \"import_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"format\",\n            \"in\": \"query\",\n            \"description\": \"Import format ('json', 'pickle', 'yaml', 'dict')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"data\": {\n                    \"type\": \"string\",\n                    \"description\": \"State data to import\"\n                  }\n                },\n                \"required\": [\n                  \"data\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/state/summary\": {\n      \"get\": {\n        \"summary\": \"Get a summary of current brain state without full serialization.\\n\\nReturns:\\n    Dictionary containing state summary\",\n        \"description\": \"Get a summary of current brain state without full serialization.\\n\\nReturns:\\n    Dictionary containing state summary\",\n        \"operationId\": \"get_state_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//cleanup/old/checkpoints\": {\n      \"post\": {\n        \"summary\": \"Clean up old checkpoints, keeping only the most recent ones.\\n\\nArgs:\\n    checkpoint_dir: Directory containing checkpoints\\n    keep_count: Number of checkpoints to keep\",\n        \"description\": \"Clean up old checkpoints, keeping only the most recent ones.\\n\\nArgs:\\n    checkpoint_dir: Directory containing checkpoints\\n    keep_count: Number of checkpoints to keep\",\n        \"operationId\": \"_cleanup_old_checkpoints\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"checkpoint_dir\",\n            \"in\": \"query\",\n            \"description\": \"Directory containing checkpoints\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          },\n          {\n            \"name\": \"keep_count\",\n            \"in\": \"query\",\n            \"description\": \"Number of checkpoints to keep\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/reset/state\": {\n      \"post\": {\n        \"summary\": \"Reset brain to initial state.\\n\\nArgs:\\n    preserve_config: Whether to preserve current configuration\",\n        \"description\": \"Reset brain to initial state.\\n\\nArgs:\\n    preserve_config: Whether to preserve current configuration\",\n        \"operationId\": \"reset_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"preserve_config\",\n            \"in\": \"query\",\n            \"description\": \"Whether to preserve current configuration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/enable/auto/backup\": {\n      \"post\": {\n        \"summary\": \"Enable automatic state backup at specified intervals.\\n\\nArgs:\\n    interval_seconds: Backup interval in seconds (default: 1 hour)\\n    backup_path: Optional custom backup path. If None, uses default location.\\n    \\nReturns:\\n    True if auto-backup was enabled successfully\",\n        \"description\": \"Enable automatic state backup at specified intervals.\\n\\nArgs:\\n    interval_seconds: Backup interval in seconds (default: 1 hour)\\n    backup_path: Optional custom backup path. If None, uses default location.\\n    \\nReturns:\\n    True if auto-backup was enabled successfully\",\n        \"operationId\": \"enable_auto_backup\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"interval_seconds\",\n            \"in\": \"query\",\n            \"description\": \"Backup interval in seconds (default: 1 hour)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"backup_path\",\n            \"in\": \"query\",\n            \"description\": \"Optional custom backup path. If None, uses default location.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/backup/status\": {\n      \"get\": {\n        \"summary\": \"Get current backup status information.\\n\\nReturns:\\n    Dictionary containing backup status\",\n        \"description\": \"Get current backup status information.\\n\\nReturns:\\n    Dictionary containing backup status\",\n        \"operationId\": \"get_backup_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"auto_backup_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"backup_interval_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_backup_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"backup_path\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"time_since_last_backup\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"checkpoints_available\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.brain_core\n\n## Overview\n\nBrain Core Foundation Class for Universal AI Core.\nManages shared reasoning capabilities across multiple domains while preventing catastrophic forgetting.\nNow with enhanced uncertainty quantification capabilities.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/brain_core.py`\n\n## Dependencies\n\n- pathlib\n- numpy\n- yaml\n- logging\n- enum\n- typing\n- warnings\n- uuid\n- pickle\n- datetime\n- threading\n- dataclasses\n- json\n- re\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 2997\n- **Code Lines:** 2154\n- **Comment Lines:** 292\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.brain_core\n\nBrain Core Foundation Class for Universal AI Core.\nManages shared reasoning capabilities across multiple domains while preventing catastrophic forgetting.\nNow with enhanced uncertainty quantification capabilities.\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 0\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **UncertaintyType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **UncertaintyMetrics**\n  - Methods: 1\n  - Complexity: 16\n- **BrainConfig**\n  - Methods: 1\n  - Complexity: 23\n- **PredictionResult**\n  - Methods: 1\n  - Complexity: 16\n- **BrainCore**\n  - Methods: 84\n  - Complexity: 571\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.training_manager",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/training_manager.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.training_manager\n\nAPI endpoints for independent_core.training_manager\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/checkpoint\n\n#### POST /create/checkpoint\n\nCreate a checkpoint for recovery.\n\n**Parameters:**\n\n- **session_id** (query) *required*: integer - Parameter: session_id\n- **state_data** (query) *required*: string - Parameter: state_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/checkpoint?session_id=example_session_id&state_data=example_state_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"state_data\": \"example_state_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/console/dashboard\n\n#### POST /create/console/dashboard\n\nCreate a simple console dashboard.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/console/dashboard\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/console/dashboard\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/all/training/history\n\n#### GET /get/all/training/history\n\nGet training history for all domains.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/all/training/history\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/all/training/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/clipping/stats\n\n#### GET /get/clipping/stats\n\nGet gradient clipping statistics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/clipping/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/clipping/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/integration/stats\n\n#### GET /get/integration/stats\n\nGet integration statistics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/latest/checkpoint\n\n#### GET /get/latest/checkpoint\n\nGet the latest checkpoint for a session.\n\n**Parameters:**\n\n- **session_id** (query) *required*: integer - Parameter: session_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/latest/checkpoint?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/latest/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/latest/metrics\n\n#### GET /get/latest/metrics\n\nGet latest metrics (enhanced functionality).\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/latest/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/latest/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/overall/training/status\n\n#### GET /get/overall/training/status\n\nGet overall training status across all sessions.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/overall/training/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/overall/training/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/progress\n\n#### GET /get/progress\n\nGet current progress summary.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/progress\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/progress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/proof/summary\n\n#### GET /get/proof/summary\n\nGet comprehensive training summary including proof metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/proof/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/proof/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/session/resources\n\n#### GET /get/session/resources\n\nGet current resource usage for a session.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/session/resources?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/session/resources\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/tensor/compression/stats\n\n#### GET /get/tensor/compression/stats\n\nGet current tensor compression statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/tensor/compression/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/tensor/compression/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/training/history\n\n#### GET /get/training/history\n\nGet training history for a specific domain.\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/history?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/training/progress\n\n#### GET /get/training/progress\n\nGet training progress for a specific session.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/progress?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/progress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/training/status\n\n#### GET /get/training/status\n\nGet training status for a session or domain.\n\n**Parameters:**\n\n- **identifier** (query) *required*: str - Parameter: identifier\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/status?identifier=example_identifier\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"identifier\": \"example_identifier\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/verification/stats\n\n#### GET /get/verification/stats\n\nGet verification statistics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/verification/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/verification/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /protect/existing/knowledge\n\n#### POST /protect/existing/knowledge\n\nProtect existing knowledge before training to prevent catastrophic forgetting.\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n- **protection_level** (query) *required*: str - Parameter: protection_level\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/protect/existing/knowledge?domain_name=example_domain_name&protection_level=example_protection_level\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/protect/existing/knowledge\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"protection_level\": \"example_protection_level\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/metrics\n\n#### PUT /update/metrics\n\nUpdate training metrics (fallback implementation with enhanced functionality).\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### PUT /update/metrics\n\nUpdate training metrics and check for alerts.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /update/proof/metrics\n\n#### PUT /update/proof/metrics\n\nUpdate proof system metrics during training\n\n**Parameters:**\n\n- **epoch** (query) *required*: int - Parameter: epoch\n- **batch_idx** (query) *required*: int - Parameter: batch_idx\n- **proof_result** (query) *required*: string - Parameter: proof_result\n- **confidence_metrics** (query) *required*: string - Parameter: confidence_metrics\n- **gradient_constraint** (query) *required*: string - Parameter: gradient_constraint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/proof/metrics?epoch=example_epoch&batch_idx=example_batch_idx&proof_result=example_proof_result&confidence_metrics=example_confidence_metrics&gradient_constraint=example_gradient_constraint\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/proof/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"epoch\": \"example_epoch\",\n    \"batch_idx\": \"example_batch_idx\",\n    \"proof_result\": \"example_proof_result\",\n    \"confidence_metrics\": \"example_confidence_metrics\",\n    \"gradient_constraint\": \"example_gradient_constraint\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/session/resources\n\n#### PUT /update/session/resources\n\nUpdate resource usage for a session.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n- **resources** (query) *required*: string - Parameter: resources\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/session/resources?session_id=example_session_id&resources=example_resources\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/session/resources\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n    \"resources\": \"example_resources\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/threshold\n\n#### PUT /update/threshold\n\nUpdate clipping threshold.\n\n**Parameters:**\n\n- **new_threshold** (query) *required*: string - Parameter: new_threshold\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/threshold?new_threshold=example_new_threshold\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/threshold\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"new_threshold\": \"example_new_threshold\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.training_manager\",\n    \"description\": \"API endpoints for independent_core.training_manager\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/proof/metrics\": {\n      \"put\": {\n        \"summary\": \"Update proof system metrics during training\",\n        \"description\": \"Update proof system metrics during training\",\n        \"operationId\": \"update_proof_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"epoch\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: epoch\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"batch_idx\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: batch_idx\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"proof_result\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: proof_result\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"confidence_metrics\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: confidence_metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"gradient_constraint\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: gradient_constraint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/proof/summary\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive training summary including proof metrics\",\n        \"description\": \"Get comprehensive training summary including proof metrics\",\n        \"operationId\": \"get_proof_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"session_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"duration_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"epochs_completed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"batches_completed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"best_metric\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"proof_system\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_verifications\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"violations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"violation_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_confidence\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"confidence_trend_slope\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"gradient_violations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_gradient_stability\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"fraud_detection_accuracy\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"resource_usage\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"gac_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"avg_gradient_norm\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"total_accumulation_steps\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"peak_memory_usage\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/protect/existing/knowledge\": {\n      \"post\": {\n        \"summary\": \"Protect existing knowledge before training to prevent catastrophic forgetting.\",\n        \"description\": \"Protect existing knowledge before training to prevent catastrophic forgetting.\",\n        \"operationId\": \"protect_existing_knowledge\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"protection_level\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: protection_level\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"protection_level\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/training/history\": {\n      \"get\": {\n        \"summary\": \"Get training history for a specific domain.\",\n        \"description\": \"Get training history for a specific domain.\",\n        \"operationId\": \"get_training_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/all/training/history\": {\n      \"get\": {\n        \"summary\": \"Get training history for all domains.\",\n        \"description\": \"Get training history for all domains.\",\n        \"operationId\": \"get_all_training_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/overall/training/status\": {\n      \"get\": {\n        \"summary\": \"Get overall training status across all sessions.\",\n        \"description\": \"Get overall training status across all sessions.\",\n        \"operationId\": \"get_overall_training_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_sessions\": {\n                      \"type\": \"number\"\n                    },\n                    \"active_sessions\": {\n                      \"type\": \"number\"\n                    },\n                    \"completed_sessions\": {\n                      \"type\": \"number\"\n                    },\n                    \"failed_sessions\": {\n                      \"type\": \"number\"\n                    },\n                    \"success_rate\": {\n                      \"type\": \"number\"\n                    },\n                    \"average_performance\": {\n                      \"type\": \"number\"\n                    },\n                    \"overall_status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/training/progress\": {\n      \"get\": {\n        \"summary\": \"Get training progress for a specific session.\",\n        \"description\": \"Get training progress for a specific session.\",\n        \"operationId\": \"get_training_progress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/training/status\": {\n      \"get\": {\n        \"summary\": \"Get training status for a session or domain.\",\n        \"description\": \"Get training status for a session or domain.\",\n        \"operationId\": \"get_training_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"identifier\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: identifier\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/tensor/compression/stats\": {\n      \"get\": {\n        \"summary\": \"Get current tensor compression statistics\",\n        \"description\": \"Get current tensor compression statistics\",\n        \"operationId\": \"get_tensor_compression_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"compression_enabled\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/session/resources\": {\n      \"put\": {\n        \"summary\": \"Update resource usage for a session.\",\n        \"description\": \"Update resource usage for a session.\",\n        \"operationId\": \"update_session_resources\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"resources\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: resources\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/session/resources\": {\n      \"get\": {\n        \"summary\": \"Get current resource usage for a session.\",\n        \"description\": \"Get current resource usage for a session.\",\n        \"operationId\": \"get_session_resources\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/metrics\": {\n      \"put\": {\n        \"summary\": \"Update training metrics and check for alerts.\",\n        \"description\": \"Update training metrics and check for alerts.\",\n        \"operationId\": \"update_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/latest/metrics\": {\n      \"get\": {\n        \"summary\": \"Get latest metrics (enhanced functionality).\",\n        \"description\": \"Get latest metrics (enhanced functionality).\",\n        \"operationId\": \"get_latest_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/checkpoint\": {\n      \"post\": {\n        \"summary\": \"Create a checkpoint for recovery.\",\n        \"description\": \"Create a checkpoint for recovery.\",\n        \"operationId\": \"create_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          },\n          {\n            \"name\": \"state_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: state_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/latest/checkpoint\": {\n      \"get\": {\n        \"summary\": \"Get the latest checkpoint for a session.\",\n        \"description\": \"Get the latest checkpoint for a session.\",\n        \"operationId\": \"get_latest_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/clipping/stats\": {\n      \"get\": {\n        \"summary\": \"Get gradient clipping statistics.\",\n        \"description\": \"Get gradient clipping statistics.\",\n        \"operationId\": \"get_clipping_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_clips\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"clipping_threshold\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/threshold\": {\n      \"put\": {\n        \"summary\": \"Update clipping threshold.\",\n        \"description\": \"Update clipping threshold.\",\n        \"operationId\": \"update_threshold\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"new_threshold\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: new_threshold\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/verification/stats\": {\n      \"get\": {\n        \"summary\": \"Get verification statistics.\",\n        \"description\": \"Get verification statistics.\",\n        \"operationId\": \"get_verification_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_verifications\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/integration/stats\": {\n      \"get\": {\n        \"summary\": \"Get integration statistics.\",\n        \"description\": \"Get integration statistics.\",\n        \"operationId\": \"get_integration_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_integrations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/create/console/dashboard\": {\n      \"post\": {\n        \"summary\": \"Create a simple console dashboard.\",\n        \"description\": \"Create a simple console dashboard.\",\n        \"operationId\": \"create_console_dashboard\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/progress\": {\n      \"get\": {\n        \"summary\": \"Get current progress summary.\",\n        \"description\": \"Get current progress summary.\",\n        \"operationId\": \"get_progress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.training_manager\n\n## Overview\n\nTraining Manager for Universal AI Core Brain.\nProvides comprehensive training infrastructure for domain-specific learning with isolation.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/training_manager.py`\n\n## Dependencies\n\n- pathlib\n- financial_fraud_domain.enhanced_fraud_core_exceptions\n- torch.utils.data\n- torch.cuda\n- training_compression_coordinator\n- independent_core.compression_systems.tensor_decomposition\n- financial_fraud_domain.training_integrator\n- enhanced_ml_framework\n- gc\n- torch.nn\n- training_integrator\n- financial_fraud_domain.proof_verifier\n- threading\n- datetime\n- json\n- gac_system.gradient_ascent_clipping\n- time\n- contextlib\n- sklearn.preprocessing\n- sklearn.metrics\n- numpy\n- error_recovery_system\n- enum\n- copy\n- sklearn.model_selection\n- uuid\n- traceback\n- torch\n- gac_system.gac_components\n- sys\n- enhanced_ml_models\n- gac_system.gac_config\n- typing\n- warnings\n- pickle\n- financial_fraud_domain.enhanced_proof_integration\n- training_hybrid_integration\n- financial_fraud_domain.enhanced_proof_verifier\n- psutil\n- concurrent.futures\n- logging\n- training_performance_optimizer\n- progress_tracker\n- asyncio\n- scipy.stats\n- torch.optim\n- scipy.special\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 4202\n- **Code Lines:** 3230\n- **Comment Lines:** 356\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Async programming\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.training_manager\n\nTraining Manager for Universal AI Core Brain.\nProvides comprehensive training infrastructure for domain-specific learning with isolation.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/training_manager.py\n- **Total Classes:** 36\n- **Total Functions:** 5\n- **Dependencies:** pathlib, financial_fraud_domain.enhanced_fraud_core_exceptions, torch.utils.data, torch.cuda, training_compression_coordinator, independent_core.compression_systems.tensor_decomposition, financial_fraud_domain.training_integrator, enhanced_ml_framework, gc, torch.nn, training_integrator, financial_fraud_domain.proof_verifier, threading, datetime, json, gac_system.gradient_ascent_clipping, time, contextlib, sklearn.preprocessing, sklearn.metrics, numpy, error_recovery_system, enum, copy, sklearn.model_selection, uuid, traceback, torch, gac_system.gac_components, sys, enhanced_ml_models, gac_system.gac_config, typing, warnings, pickle, financial_fraud_domain.enhanced_proof_integration, training_hybrid_integration, financial_fraud_domain.enhanced_proof_verifier, psutil, concurrent.futures, logging, training_performance_optimizer, progress_tracker, asyncio, scipy.stats, torch.optim, scipy.special, dataclasses, collections, os\n\n## Contents\n**Classes (36):** TrainingStatus, DataFormat, ConfidenceMetrics, ConfidenceHistory, ProofSystemConfig, TrainingConfig, TrainingMetrics, ProofMetrics, TrainingSession, DataValidator, TrainingManager, ProofConfidenceGenerator, AlgebraicRuleEnforcer, ResourceMonitor, SecurityLevel, DummyTensor, DummyModule, DummyOptimizer, DummyDataLoader, nullcontext, FallbackProgressTracker, FallbackErrorRecoveryManager, FallbackGACSystem, FallbackConfidenceGenerator, FallbackProofVerifier, FallbackProofIntegrationManager, AlertSeverity, ProgressMetrics, ProgressBar, ProgressTracker, MinimalIntegrator, IEEEFraudTrainingIntegrator, ModelFactory, ModelType, ModelConfig, BaseModel\n**Functions (5):** validate_with_algebraic_rules, create_console_dashboard, start_ieee_training, _create_simple_model, _create_enhanced_model\n\n## Configuration\n- **DISABLE_FALLBACKS**: `True` (bool)\n\n## Integration Points\nClass: TrainingManager\nClass: FallbackErrorRecoveryManager\nClass: FallbackProofIntegrationManager\n\n## Examples\nmemory_usage_mb: float = 0.0\n\nresource_usage: Dict[str, Any] = field(default_factory=dict)\n\n# Comprehensive proof system tracking\n\n'memory_usage': []\n\n# Resource usage\n\n'resource_usage': self.resource_usage,\n\n# Enhanced GAC metrics\n\n'peak_memory_usage': max(self.gac_metrics['memory_usage'])\n\nif self.gac_metrics['memory_usage'] else 0.0\n\n'num_samples': 0,\n\nif data_info['num_samples'] > 0 and data_info['num_samples'] < config.batch_size:\n\nerrors.append(f\"Number of samples ({data_info['num_samples']}) \"\n\n'num_samples': data.shape[0] if data.ndim > 0 else 0,\n\ninfo['num_samples'] = info_x.get('num_samples', 0)\n\ninfo['num_samples'] = info_x.get('num_samples', 0)\n\nif 'num_samples' in info and y.shape[0] != info['num_samples']:\n\nerrors.append(f\"Label count ({y.shape[0]}) doesn't match sample count ({info['num_samples']})\")\n\nif 'num_samples' in info and y_array.shape[0] != info['num_samples']:\n\nerrors.append(f\"Label count ({y_array.shape[0]}) doesn't match sample count ({info['num_samples']})\")\n\n'num_samples': len(data),\n\nself.logger.info(f\"Training with {len(X):,} samples, {epochs} epochs, batch_size={batch_size}, lr={learning_rate}, validation_split={validation_split}\")\n\n# Create train/validation split\n\nself.logger.info(f\"Train set: {len(X_train):,} samples, Validation set: {len(X_val):,} samples\")\n\n# Create enhanced neural network model\n\nself.logger.info(f\"Initial memory usage: {initial_memory:.1f} MB RAM, {initial_gpu_memory:.1f} MB GPU\")\n\nself.logger.info(f\"Final memory usage: {final_memory:.1f} MB RAM, {final_gpu_memory:.1f} MB GPU\")\n\nself.logger.info(f\"Basic training with {len(X):,} samples, {epochs} epochs, batch_size={batch_size}, lr={learning_rate}\")\n\n# Create train/validation split\n\nself.logger.info(f\"Train set: {len(X_train):,} samples, Validation set: {len(X_val):,} samples\")\n\n# Create enhanced model\n\nself.logger.info(f\"Initial memory usage: {initial_memory:.1f} MB RAM, {initial_gpu_memory:.1f} MB GPU\")\n\nself.logger.info(f\"Final memory usage: {final_memory:.1f} MB RAM, {final_gpu_memory:.1f} MB GPU\")\n\nvalidation_result['issues'].append('X and y sample count mismatch')\n# Truncate to smaller size\n\nmin_samples = min(X.shape[0], y.shape[0])\n\nvalidation_result['data']['X'] = X[:min_samples]\n\nvalidation_result['data']['y'] = y[:min_samples]\n\nvalidation_result['repairs_applied'].append(f'Truncated to {min_samples} samples')\n\nself.logger.warning(f\"Truncated data to {min_samples} samples due to shape mismatch\")\n\n# Check for missing values\n\n# ROOT FIX: Use more realistic data size instead of just 100 samples\n# This prevents the \"way too fast\" training issue\n\nnum_samples = 10000  # Increased from 100 to 10000\n\nX = np.random.random((num_samples, num_features))\n# Create realistic fraud labels with ~3% fraud rate (typical for fraud detection)\n\ny = np.random.choice([0, 1], size=num_samples, p=[1-fraud_rate, fraud_rate])\n\n\nself.logger.warning(f\"Created minimal training data with {num_samples} samples and {num_features} features\")\n\nn_samples = min(100, len(outputs))\n\nbootstrap_samples = np.random.choice(len(outputs), size=n_samples, replace=True)\n\nbootstrap_confidence = np.mean(outputs[bootstrap_samples])\n\nmargin = np.std(outputs[bootstrap_samples]) * 1.96  # 95% CI\n\nOptimize memory usage by compressing large tensors in a training session\n\n\n\"\"\"Monitors resource usage during training.\"\"\"\n\n\n\"\"\"Update resource usage for a session.\"\"\"\n\n\"\"\"Get current resource usage for a session.\"\"\"\n",
        "architecture": "# Architecture: independent_core.training_manager\n\nTraining Manager for Universal AI Core Brain.\nProvides comprehensive training infrastructure for domain-specific learning with isolation.\n\n## Components Overview\n\n- **Classes:** 36\n- **Functions:** 5\n- **Dependencies:** 50\n\n## Class Hierarchy\n\n- **TrainingStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 10\n- **DataFormat** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **ConfidenceMetrics**\n  - Methods: 0\n  - Complexity: 14\n- **ConfidenceHistory**\n  - Methods: 0\n  - Complexity: 7\n- **ProofSystemConfig**\n  - Methods: 0\n  - Complexity: 8\n- **TrainingConfig**\n  - Methods: 1\n  - Complexity: 56\n- **TrainingMetrics**\n  - Methods: 1\n  - Complexity: 21\n- **ProofMetrics**\n  - Methods: 0\n  - Complexity: 16\n- **TrainingSession**\n  - Methods: 3\n  - Complexity: 32\n- **DataValidator**\n  - Methods: 6\n  - Complexity: 48\n- **TrainingManager**\n  - Methods: 42\n  - Complexity: 351\n- **ProofConfidenceGenerator**\n  - Methods: 13\n  - Complexity: 51\n- **AlgebraicRuleEnforcer**\n  - Methods: 17\n  - Complexity: 109\n- **ResourceMonitor**\n  - Methods: 4\n  - Complexity: 23\n- **SecurityLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **DummyTensor**\n  - Methods: 0\n  - Complexity: 1\n- **DummyModule**\n  - Methods: 0\n  - Complexity: 1\n- **DummyOptimizer**\n  - Methods: 0\n  - Complexity: 1\n- **DummyDataLoader**\n  - Methods: 0\n  - Complexity: 1\n- **nullcontext**\n  - Methods: 2\n  - Complexity: 6\n- **FallbackProgressTracker**\n  - Methods: 3\n  - Complexity: 9\n- **FallbackErrorRecoveryManager**\n  - Methods: 5\n  - Complexity: 19\n- **FallbackGACSystem**\n  - Methods: 4\n  - Complexity: 17\n- **FallbackConfidenceGenerator**\n  - Methods: 2\n  - Complexity: 7\n- **FallbackProofVerifier**\n  - Methods: 3\n  - Complexity: 13\n- **FallbackProofIntegrationManager**\n  - Methods: 3\n  - Complexity: 9\n- **AlertSeverity**\n  - Methods: 0\n  - Complexity: 3\n- **ProgressMetrics**\n  - Methods: 2\n  - Complexity: 6\n- **ProgressBar**\n  - Methods: 3\n  - Complexity: 10\n- **ProgressTracker**\n  - Methods: 5\n  - Complexity: 25\n- **MinimalIntegrator**\n  - Methods: 1\n  - Complexity: 3\n- **IEEEFraudTrainingIntegrator**\n  - Methods: 1\n  - Complexity: 3\n- **ModelFactory**\n  - Methods: 1\n  - Complexity: 3\n- **ModelType**\n  - Methods: 0\n  - Complexity: 1\n- **ModelConfig**\n  - Methods: 1\n  - Complexity: 3\n- **BaseModel**\n  - Methods: 1\n  - Complexity: 3\n## Integration Points\n\n- Class: TrainingManager\n- Class: FallbackErrorRecoveryManager\n- Class: FallbackProofIntegrationManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.test_proof_system_comprehensive",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_proof_system_comprehensive.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.test_proof_system_comprehensive\n\nAPI endpoints for independent_core.test_proof_system_comprehensive\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //generate/test/report\n\n#### POST //generate/test/report\n\nGenerate comprehensive test report\n\n**Parameters:**\n\n- **total_time** (query) *required*: float - Parameter: total_time\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/test/report?total_time=example_total_time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/test/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"total_time\": \"example_total_time\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.test_proof_system_comprehensive\",\n    \"description\": \"API endpoints for independent_core.test_proof_system_comprehensive\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//generate/test/report\": {\n      \"post\": {\n        \"summary\": \"Generate comprehensive test report\",\n        \"description\": \"Generate comprehensive test report\",\n        \"operationId\": \"_generate_test_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"total_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: total_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.test_proof_system_comprehensive\n\n## Overview\n\nComprehensive Test Suite for Proof System Integration\nValidates entire proof system integration with Brain system and fraud detection\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_proof_system_comprehensive.py`\n\n## Dependencies\n\n- proof_system.proof_integration_manager\n- financial_fraud_domain.accuracy_analytics_reporter\n- gc\n- datetime\n- json\n- time\n- financial_fraud_domain.enhanced_data_loader\n- numpy\n- proof_system.cryptographic_engine\n- training_manager\n- argparse\n- multiprocessing\n- financial_fraud_domain.performance_monitor\n- sys\n- proof_system.ml_based_engine\n- typing\n- proof_system.algebraic_rule_enforcer\n- psutil\n- proof_system.confidence_generator\n- brain\n- concurrent.futures\n- logging\n- pandas\n- proof_system.rule_based_engine\n- unittest\n- os\n\n## Code Structure\n\n- **Total Lines:** 1014\n- **Code Lines:** 734\n- **Comment Lines:** 85\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.test_performance_validation",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/test_performance_validation.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.test_performance_validation\n\nAPI endpoints for independent_core.test_performance_validation\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //test/concurrent/load/stress\n\n#### POST //test/concurrent/load/stress\n\nTest concurrent load stress\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//test/concurrent/load/stress\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//test/concurrent/load/stress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/percentiles\n\n#### GET /get/percentiles\n\nGet latency percentiles\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/percentiles\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/percentiles\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /main\n\n#### POST /main\n\nMain entry point for standalone testing\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/main\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/main\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.test_performance_validation\",\n    \"description\": \"API endpoints for independent_core.test_performance_validation\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/main\": {\n      \"post\": {\n        \"summary\": \"Main entry point for standalone testing\",\n        \"description\": \"Main entry point for standalone testing\",\n        \"operationId\": \"main\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/percentiles\": {\n      \"get\": {\n        \"summary\": \"Get latency percentiles\",\n        \"description\": \"Get latency percentiles\",\n        \"operationId\": \"get_percentiles\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//test/concurrent/load/stress\": {\n      \"post\": {\n        \"summary\": \"Test concurrent load stress\",\n        \"description\": \"Test concurrent load stress\",\n        \"operationId\": \"_test_concurrent_load_stress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"max_concurrent_users\": {\n                      \"type\": \"number\"\n                    },\n                    \"response_time_increase\": {\n                      \"type\": \"number\"\n                    },\n                    \"deadlock_detected\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.test_performance_validation\n\n## Overview\n\nPerformance Validation Tests for Proof System Integration\nComprehensive testing of performance metrics, overhead analysis, and optimization validation\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/test_performance_validation.py`\n\n## Dependencies\n\n- tracemalloc\n- proof_system.proof_integration_manager\n- statistics\n- gc\n- threading\n- json\n- datetime\n- contextlib\n- time\n- proof_system.cryptographic_engine\n- training_manager\n- argparse\n- multiprocessing\n- sys\n- proof_system.ml_based_engine\n- typing\n- proof_system.algebraic_rule_enforcer\n- psutil\n- random\n- proof_system.confidence_generator\n- concurrent.futures\n- brain\n- logging\n- proof_system.rule_based_engine\n- dataclasses\n- os\n\n## Code Structure\n\n- **Total Lines:** 1589\n- **Code Lines:** 1177\n- **Comment Lines:** 111\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.test_performance_validation\n\nPerformance Validation Tests for Proof System Integration\nComprehensive testing of performance metrics, overhead analysis, and optimization validation\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/test_performance_validation.py\n- **Total Classes:** 6\n- **Total Functions:** 3\n- **Dependencies:** tracemalloc, proof_system.proof_integration_manager, statistics, gc, threading, json, datetime, contextlib, time, proof_system.cryptographic_engine, training_manager, argparse, multiprocessing, sys, proof_system.ml_based_engine, typing, proof_system.algebraic_rule_enforcer, psutil, random, proof_system.confidence_generator, concurrent.futures, brain, logging, proof_system.rule_based_engine, dataclasses, os\n\n## Contents\n**Classes (6):** PerformanceMetrics, BenchmarkResult, PerformanceProfiler, LatencyProfiler, MockDataGenerator, PerformanceValidationTests\n**Functions (3):** main, worker, user_simulation\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: _initialize_proof_manager\n\n## Examples\ncpu_usage_percent: float\n\nmemory_usage_mb: float\n\nself.cpu_samples = []\n\nself.memory_samples = []\n\nself.cpu_samples = []\n\nself.memory_samples = []\n\n# Start memory tracing\n\n'cpu_usage': {\n\n'avg': statistics.mean(self.cpu_samples) if self.cpu_samples else 0,\n\n'max': max(self.cpu_samples) if self.cpu_samples else 0,\n\n'min': min(self.cpu_samples) if self.cpu_samples else 0,\n\n'samples': len(self.cpu_samples)\n\n'memory_usage': {\n\n'avg_mb': statistics.mean(self.memory_samples) if self.memory_samples else 0,\n\n'max_mb': max(self.memory_samples) if self.memory_samples else 0,\n\n'samples': len(self.memory_samples)\n\n\"\"\"Monitor CPU and memory usage\"\"\"\n\n# CPU usage\n\nself.cpu_samples.append(cpu_percent)\n\n\n# Memory usage\n\nself.memory_samples.append(memory_mb)\n\n\n'cpu_usage_percent': profile_metrics['cpu_usage']['avg'],\n\n'memory_usage_mb': profile_metrics['memory_usage']['avg_mb']\n\n\"\"\"Test memory usage and optimization\"\"\"\n\n'cpu_usage': profile_metrics['cpu_usage'],\n\n'cpu_efficiency': total_transactions / (profile_metrics['cpu_usage']['avg'] * duration)\n\nmeets_cpu_target = (analysis['average_cpu_usage'] / 100) >= self.targets['cpu_efficiency']\n\n\n'cpu_percent': profile_metrics['cpu_usage']['avg'],\n\n'memory_mb': profile_metrics['memory_usage']['avg_mb']\n\n'cpu_percent': profile_metrics['cpu_usage']['avg'],\n\n'memory_mb': profile_metrics['memory_usage']['avg_mb']\n\n'total_samples': n\n\n\"\"\"Calculate memory usage efficiency\"\"\"\n\n\"\"\"Analyze memory usage patterns\"\"\"\n\navg_cpu_usage = statistics.mean([r['cpu_usage']['avg'] for r in cpu_results])\n\nmax_cpu_usage = max([r['cpu_usage']['max'] for r in cpu_results])\n\n# Threading efficiency\n\n'average_cpu_usage': avg_cpu_usage,\n\n'max_cpu_usage': max_cpu_usage,\n\n'cpu_utilization_rating': 'optimal' if 60 <= avg_cpu_usage <= 80 else 'suboptimal'\n\n# Mock implementation of complex test methods for framework demonstration\n\n\n'cpu_usage_percent': profile_metrics['cpu_usage']['avg'],\n\n'memory_usage_mb': profile_metrics['memory_usage']['avg_mb']\n\nif analysis['average_cpu_usage'] > 80:\n",
        "architecture": "# Architecture: independent_core.test_performance_validation\n\nPerformance Validation Tests for Proof System Integration\nComprehensive testing of performance metrics, overhead analysis, and optimization validation\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 3\n- **Dependencies:** 26\n\n## Class Hierarchy\n\n- **PerformanceMetrics**\n  - Methods: 0\n  - Complexity: 11\n- **BenchmarkResult**\n  - Methods: 0\n  - Complexity: 7\n- **PerformanceProfiler**\n  - Methods: 4\n  - Complexity: 16\n- **LatencyProfiler**\n  - Methods: 4\n  - Complexity: 14\n- **MockDataGenerator**\n  - Methods: 3\n  - Complexity: 10\n- **PerformanceValidationTests**\n  - Methods: 51\n  - Complexity: 237\n## Integration Points\n\n- Function: _initialize_proof_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.training_session_management",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/training_session_management.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.training_session_management\n\nAPI endpoints for independent_core.training_session_management\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //save/metadata\n\n#### POST //save/metadata\n\nSave session metadata to disk.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//save/metadata\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//save/metadata\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/checkpoint\n\n#### POST /create/checkpoint\n\nCreate training checkpoint.\n\n**Parameters:**\n\n- **epoch** (query) *required*: int - Parameter: epoch\n- **metrics** (query) *required*: string - Parameter: metrics\n- **model_state** (query) *required*: string - Parameter: model_state\n- **optimizer_state** (query) *required*: string - Parameter: optimizer_state\n- **is_best** (query) *required*: bool - Parameter: is_best\n- **is_auto** (query) *required*: bool - Parameter: is_auto\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/checkpoint?epoch=example_epoch&metrics=example_metrics&model_state=example_model_state&optimizer_state=example_optimizer_state&is_best=example_is_best&is_auto=example_is_auto\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"epoch\": \"example_epoch\",\n    \"metrics\": \"example_metrics\",\n    \"model_state\": \"example_model_state\",\n    \"optimizer_state\": \"example_optimizer_state\",\n    \"is_best\": \"example_is_best\",\n    \"is_auto\": \"example_is_auto\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/enhanced/training/manager\n\n#### POST /create/enhanced/training/manager\n\nCreate enhanced training manager.\n\n**Parameters:**\n\n- **brain_instance** (query) *required*: string - Parameter: brain_instance\n- **storage_path** (query) *required*: str - Parameter: storage_path\n- **max_concurrent_sessions** (query) *required*: int - Parameter: max_concurrent_sessions\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/enhanced/training/manager?brain_instance=example_brain_instance&storage_path=example_storage_path&max_concurrent_sessions=example_max_concurrent_sessions\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/enhanced/training/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain_instance\": \"example_brain_instance\",\n    \"storage_path\": \"example_storage_path\",\n    \"max_concurrent_sessions\": \"example_max_concurrent_sessions\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/session\n\n#### POST /create/session\n\nCreate new enhanced training session.\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n- **training_config** (query) *required*: string - Parameter: training_config\n- **session_name** (query) *required*: string - Parameter: session_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/session?domain_name=example_domain_name&training_config=example_training_config&session_name=example_session_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/session\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"training_config\": \"example_training_config\",\n    \"session_name\": \"example_session_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/all/session/statuses\n\n#### GET /get/all/session/statuses\n\nGet status of all sessions.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/all/session/statuses\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/all/session/statuses\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/session/status\n\n#### GET /get/session/status\n\nGet comprehensive session status.\n\n**Parameters:**\n\n- **session_id** (query) *required*: str - Parameter: session_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/session/status?session_id=example_session_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/session/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"session_id\": \"example_session_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/state\n\n#### GET /get/state\n\nGet current state (thread-safe).\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/state/history\n\n#### GET /get/state/history\n\nGet complete state history.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/state/history\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/state/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/status\n\n#### GET /get/status\n\nGet comprehensive session status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/activity\n\n#### PUT /update/activity\n\nUpdate last activity timestamp.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/activity\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/activity\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /update/progress\n\n#### PUT /update/progress\n\nUpdate training progress.\n\n**Parameters:**\n\n- **epoch** (query) *required*: int - Parameter: epoch\n- **batch** (query) *required*: int - Parameter: batch\n- **total_batches** (query) *required*: int - Parameter: total_batches\n- **samples_processed** (query) *required*: int - Parameter: samples_processed\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/progress?epoch=example_epoch&batch=example_batch&total_batches=example_total_batches&samples_processed=example_samples_processed\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/progress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"epoch\": \"example_epoch\",\n    \"batch\": \"example_batch\",\n    \"total_batches\": \"example_total_batches\",\n    \"samples_processed\": \"example_samples_processed\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.training_session_management\",\n    \"description\": \"API endpoints for independent_core.training_session_management\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/enhanced/training/manager\": {\n      \"post\": {\n        \"summary\": \"Create enhanced training manager.\",\n        \"description\": \"Create enhanced training manager.\",\n        \"operationId\": \"create_enhanced_training_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain_instance\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: brain_instance\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"storage_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: storage_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"max_concurrent_sessions\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: max_concurrent_sessions\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/state\": {\n      \"get\": {\n        \"summary\": \"Get current state (thread-safe).\",\n        \"description\": \"Get current state (thread-safe).\",\n        \"operationId\": \"get_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/state/history\": {\n      \"get\": {\n        \"summary\": \"Get complete state history.\",\n        \"description\": \"Get complete state history.\",\n        \"operationId\": \"get_state_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/activity\": {\n      \"put\": {\n        \"summary\": \"Update last activity timestamp.\",\n        \"description\": \"Update last activity timestamp.\",\n        \"operationId\": \"update_activity\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/checkpoint\": {\n      \"post\": {\n        \"summary\": \"Create training checkpoint.\",\n        \"description\": \"Create training checkpoint.\",\n        \"operationId\": \"create_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"epoch\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: epoch\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"metrics\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"model_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"optimizer_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: optimizer_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"is_best\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: is_best\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"is_auto\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: is_auto\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/progress\": {\n      \"put\": {\n        \"summary\": \"Update training progress.\",\n        \"description\": \"Update training progress.\",\n        \"operationId\": \"update_progress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"epoch\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: epoch\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"batch\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: batch\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"total_batches\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: total_batches\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"samples_processed\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: samples_processed\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive session status.\",\n        \"description\": \"Get comprehensive session status.\",\n        \"operationId\": \"get_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"session_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"session_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"state\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"is_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"is_terminal\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"can_pause\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"can_resume\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"can_stop\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"can_recover\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"progress\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metadata\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"created_at\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"started_at\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"completed_at\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"total_duration\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"checkpoint_count\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"recovery_count\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"peak_memory_usage\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"total_compute_time\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"checkpoints\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"best_checkpoint\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"best_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"final_metrics\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//save/metadata\": {\n      \"post\": {\n        \"summary\": \"Save session metadata to disk.\",\n        \"description\": \"Save session metadata to disk.\",\n        \"operationId\": \"_save_metadata\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/session\": {\n      \"post\": {\n        \"summary\": \"Create new enhanced training session.\",\n        \"description\": \"Create new enhanced training session.\",\n        \"operationId\": \"create_session\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"training_config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: training_config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"session_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/session/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive session status.\",\n        \"description\": \"Get comprehensive session status.\",\n        \"operationId\": \"get_session_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"session_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: session_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/all/session/statuses\": {\n      \"get\": {\n        \"summary\": \"Get status of all sessions.\",\n        \"description\": \"Get status of all sessions.\",\n        \"operationId\": \"get_all_session_statuses\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.training_session_management\n\n## Overview\n\nEnhanced Training Session Management for Brain System\nComprehensive session lifecycle management with state tracking, recovery, and cleanup.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/training_session_management.py`\n\n## Dependencies\n\n- pathlib\n- numpy\n- logging\n- contextlib\n- enum\n- typing\n- training_manager\n- pickle\n- uuid\n- traceback\n- gc\n- dataclasses\n- datetime\n- threading\n- shutil\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1345\n- **Code Lines:** 992\n- **Comment Lines:** 132\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.training_session_management\n\nEnhanced Training Session Management for Brain System\nComprehensive session lifecycle management with state tracking, recovery, and cleanup.\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 1\n- **Dependencies:** 18\n\n## Class Hierarchy\n\n- **SessionState** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 16\n- **SessionStateMachine**\n  - Methods: 8\n  - Complexity: 29\n- **SessionProgress**\n  - Methods: 0\n  - Complexity: 9\n- **SessionMetadata**\n  - Methods: 2\n  - Complexity: 23\n- **SessionCheckpoint**\n  - Methods: 0\n  - Complexity: 13\n- **SessionArtifacts**\n  - Methods: 2\n  - Complexity: 24\n- **EnhancedTrainingSession**\n  - Methods: 18\n  - Complexity: 95\n- **EnhancedTrainingManager**\n  - Methods: 20\n  - Complexity: 112\n## Integration Points\n\n- Class: EnhancedTrainingManager\n- Function: create_enhanced_training_manager\n- Function: _create_session_bridge\n- Function: _cleanup_session_bridge\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.dashboard_integration.accuracy_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/dashboard_integration/accuracy_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.dashboard_integration.accuracy_integration\n\nAPI endpoints for independent_core.dashboard_integration.accuracy_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/accuracy/dashboard\n\n#### POST /create/accuracy/dashboard\n\nCreate accuracy dashboard for domain\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/accuracy/dashboard?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/accuracy/dashboard\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/cached/metrics\n\n#### GET /get/cached/metrics\n\nGet cached metrics for a domain/model\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n- **model_id** (query) *required*: str - Parameter: model_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/cached/metrics?domain_name=example_domain_name&model_id=example_model_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/cached/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"model_id\": \"example_model_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/status\n\n#### GET /get/status\n\nGet status of accuracy dashboard integration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/training/metrics\n\n#### PUT /update/training/metrics\n\nUpdate training metrics for dashboard\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n- **model_id** (query) *required*: str - Parameter: model_id\n- **epoch** (query) *required*: int - Parameter: epoch\n- **metrics** (query) *required*: string - Parameter: metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/training/metrics?domain_name=example_domain_name&model_id=example_model_id&epoch=example_epoch&metrics=example_metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/training/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n    \"model_id\": \"example_model_id\",\n    \"epoch\": \"example_epoch\",\n    \"metrics\": \"example_metrics\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.dashboard_integration.accuracy_integration\",\n    \"description\": \"API endpoints for independent_core.dashboard_integration.accuracy_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/accuracy/dashboard\": {\n      \"post\": {\n        \"summary\": \"Create accuracy dashboard for domain\",\n        \"description\": \"Create accuracy dashboard for domain\",\n        \"operationId\": \"create_accuracy_dashboard\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/training/metrics\": {\n      \"put\": {\n        \"summary\": \"Update training metrics for dashboard\",\n        \"description\": \"Update training metrics for dashboard\",\n        \"operationId\": \"update_training_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"model_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"epoch\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: epoch\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"metrics\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/cached/metrics\": {\n      \"get\": {\n        \"summary\": \"Get cached metrics for a domain/model\",\n        \"description\": \"Get cached metrics for a domain/model\",\n        \"operationId\": \"get_cached_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"model_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/status\": {\n      \"get\": {\n        \"summary\": \"Get status of accuracy dashboard integration\",\n        \"description\": \"Get status of accuracy dashboard integration\",\n        \"operationId\": \"get_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"active_accuracy_dashboards\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cached_metrics_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"training_manager_connected\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_updated\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.dashboard_integration.accuracy_integration\n\n## Overview\n\nAccuracy Dashboard Integration for Core AI System\nProvides clean integration between training manager and accuracy visualization\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/dashboard_integration/accuracy_integration.py`\n\n## Dependencies\n\n- pathlib\n- sys\n- logging\n- typing\n- threading\n- dashboard_bridge\n- datetime\n\n## Code Structure\n\n- **Total Lines:** 118\n- **Code Lines:** 91\n- **Comment Lines:** 6\n\n## Complexity Indicators\n\n- Concurrency\n\n",
        "integration_guide": "\n# independent_core.dashboard_integration.accuracy_integration\n\nAccuracy Dashboard Integration for Core AI System\nProvides clean integration between training manager and accuracy visualization\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/dashboard_integration/accuracy_integration.py\n- **Total Classes:** 1\n- **Total Functions:** 0\n- **Dependencies:** pathlib, sys, logging, typing, threading, dashboard_bridge, datetime\n\n## Contents\n**Classes (1):** AccuracyDashboardIntegration\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nNo examples available\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.dashboard_integration.visualization_dashboard_engine",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/dashboard_integration/visualization_dashboard_engine.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.dashboard_integration.visualization_dashboard_engine\n\nAPI endpoints for independent_core.dashboard_integration.visualization_dashboard_engine\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //create/accuracy/heatmap\n\n#### POST //create/accuracy/heatmap\n\nCreate a single accuracy heatmap.\n\n**Parameters:**\n\n- **heatmap_id** (query) *required*: str - Parameter: heatmap_id\n- **model_id** (query) *required*: str - Parameter: model_id\n- **heatmap_type** (query) *required*: str - Parameter: heatmap_type\n- **geographic_scope** (query) *required*: str - Parameter: geographic_scope\n- **temporal_granularity** (query) *required*: str - Parameter: temporal_granularity\n- **interactive_features** (query) *required*: string - Parameter: interactive_features\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//create/accuracy/heatmap?heatmap_id=example_heatmap_id&model_id=example_model_id&heatmap_type=example_heatmap_type&geographic_scope=example_geographic_scope&temporal_granularity=example_temporal_granularity&interactive_features=example_interactive_features\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//create/accuracy/heatmap\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"heatmap_id\": \"example_heatmap_id\",\n    \"model_id\": \"example_model_id\",\n    \"heatmap_type\": \"example_heatmap_type\",\n    \"geographic_scope\": \"example_geographic_scope\",\n    \"temporal_granularity\": \"example_temporal_granularity\",\n    \"interactive_features\": \"example_interactive_features\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/accuracy/heatmaps\n\n#### POST /create/accuracy/heatmaps\n\nCreate accuracy heatmaps with geographic and temporal visualization, supporting\nmultiple data dimensions and interactive features.\n\nArgs:\n    model_ids: List of model IDs to create heatmaps for\n    heatmap_types: Types of heatmaps to create ['geographic', 'temporal', 'feature', 'correlation']\n    geographic_scope: Geographic scope for mapping ('global', 'country', 'state', 'city')\n    temporal_granularity: Time granularity ('hour', 'day', 'week', 'month')\n    interactive_features: Interactive features to enable ['zoom', 'pan', 'tooltip', 'animation']\n\nReturns:\n    Dictionary mapping heatmap IDs to AccuracyHeatmap objects\n\n**Parameters:**\n\n- **model_ids** (query) *required*: string - List of model IDs to create heatmaps for\n- **heatmap_types** (query) *required*: string - Types of heatmaps to create ['geographic', 'temporal', 'feature', 'correlation']\n- **geographic_scope** (query) *required*: str - Geographic scope for mapping ('global', 'country', 'state', 'city')\n- **temporal_granularity** (query) *required*: str - Time granularity ('hour', 'day', 'week', 'month')\n- **interactive_features** (query) *required*: string - Interactive features to enable ['zoom', 'pan', 'tooltip', 'animation']\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/accuracy/heatmaps?model_ids=example_model_ids&heatmap_types=example_heatmap_types&geographic_scope=example_geographic_scope&temporal_granularity=example_temporal_granularity&interactive_features=example_interactive_features\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/accuracy/heatmaps\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"model_ids\": \"example_model_ids\",\n    \"heatmap_types\": \"example_heatmap_types\",\n    \"geographic_scope\": \"example_geographic_scope\",\n    \"temporal_granularity\": \"example_temporal_granularity\",\n    \"interactive_features\": \"example_interactive_features\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/custom/visualization/component\n\n#### POST /create/custom/visualization/component\n\nCreate custom visualization component with interactive features and callbacks.\n\nArgs:\n    component_config: Component configuration and styling\n    data_source: Data source identifier\n    interaction_callbacks: Dictionary of interaction callbacks\n\nReturns:\n    Custom visualization component configuration\n\n**Parameters:**\n\n- **component_config** (query) *required*: string - Component configuration and styling\n- **data_source** (query) *required*: str - Data source identifier\n- **interaction_callbacks** (query) *required*: string - Dictionary of interaction callbacks\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/custom/visualization/component?component_config=example_component_config&data_source=example_data_source&interaction_callbacks=example_interaction_callbacks\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/custom/visualization/component\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"component_config\": \"example_component_config\",\n    \"data_source\": \"example_data_source\",\n    \"interaction_callbacks\": \"example_interaction_callbacks\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/dashboard/status\n\n#### GET /get/dashboard/status\n\nGet status of a specific dashboard.\n\n**Parameters:**\n\n- **dashboard_id** (query) *required*: str - Parameter: dashboard_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/dashboard/status?dashboard_id=example_dashboard_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/dashboard/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"dashboard_id\": \"example_dashboard_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/performance/metrics\n\n#### GET /get/performance/metrics\n\nGet visualization engine performance metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /setup/performance/monitoring/dashboard\n\n#### POST /setup/performance/monitoring/dashboard\n\nSet up performance monitoring dashboard with real-time alerting, notification systems,\nand comprehensive performance tracking.\n\nArgs:\n    model_ids: List of model IDs to monitor\n    monitoring_config: Monitoring configuration options\n    alert_rules: Alert rule definitions\n    notification_channels: Notification channel configurations\n\nReturns:\n    PerformanceMonitoringDashboard object\n\n**Parameters:**\n\n- **model_ids** (query) *required*: string - List of model IDs to monitor\n- **monitoring_config** (query) *required*: string - Monitoring configuration options\n- **alert_rules** (query) *required*: string - Alert rule definitions\n- **notification_channels** (query) *required*: string - Notification channel configurations\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/setup/performance/monitoring/dashboard?model_ids=example_model_ids&monitoring_config=example_monitoring_config&alert_rules=example_alert_rules&notification_channels=example_notification_channels\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/setup/performance/monitoring/dashboard\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"model_ids\": \"example_model_ids\",\n    \"monitoring_config\": \"example_monitoring_config\",\n    \"alert_rules\": \"example_alert_rules\",\n    \"notification_channels\": \"example_notification_channels\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.dashboard_integration.visualization_dashboard_engine\",\n    \"description\": \"API endpoints for independent_core.dashboard_integration.visualization_dashboard_engine\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/accuracy/heatmaps\": {\n      \"post\": {\n        \"summary\": \"Create accuracy heatmaps with geographic and temporal visualization, supporting\\nmultiple data dimensions and interactive features.\\n\\nArgs:\\n    model_ids: List of model IDs to create heatmaps for\\n    heatmap_types: Types of heatmaps to create ['geographic', 'temporal', 'feature', 'correlation']\\n    geographic_scope: Geographic scope for mapping ('global', 'country', 'state', 'city')\\n    temporal_granularity: Time granularity ('hour', 'day', 'week', 'month')\\n    interactive_features: Interactive features to enable ['zoom', 'pan', 'tooltip', 'animation']\\n\\nReturns:\\n    Dictionary mapping heatmap IDs to AccuracyHeatmap objects\",\n        \"description\": \"Create accuracy heatmaps with geographic and temporal visualization, supporting\\nmultiple data dimensions and interactive features.\\n\\nArgs:\\n    model_ids: List of model IDs to create heatmaps for\\n    heatmap_types: Types of heatmaps to create ['geographic', 'temporal', 'feature', 'correlation']\\n    geographic_scope: Geographic scope for mapping ('global', 'country', 'state', 'city')\\n    temporal_granularity: Time granularity ('hour', 'day', 'week', 'month')\\n    interactive_features: Interactive features to enable ['zoom', 'pan', 'tooltip', 'animation']\\n\\nReturns:\\n    Dictionary mapping heatmap IDs to AccuracyHeatmap objects\",\n        \"operationId\": \"create_accuracy_heatmaps\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"model_ids\",\n            \"in\": \"query\",\n            \"description\": \"List of model IDs to create heatmaps for\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"heatmap_types\",\n            \"in\": \"query\",\n            \"description\": \"Types of heatmaps to create ['geographic', 'temporal', 'feature', 'correlation']\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"geographic_scope\",\n            \"in\": \"query\",\n            \"description\": \"Geographic scope for mapping ('global', 'country', 'state', 'city')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"temporal_granularity\",\n            \"in\": \"query\",\n            \"description\": \"Time granularity ('hour', 'day', 'week', 'month')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"interactive_features\",\n            \"in\": \"query\",\n            \"description\": \"Interactive features to enable ['zoom', 'pan', 'tooltip', 'animation']\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/setup/performance/monitoring/dashboard\": {\n      \"post\": {\n        \"summary\": \"Set up performance monitoring dashboard with real-time alerting, notification systems,\\nand comprehensive performance tracking.\\n\\nArgs:\\n    model_ids: List of model IDs to monitor\\n    monitoring_config: Monitoring configuration options\\n    alert_rules: Alert rule definitions\\n    notification_channels: Notification channel configurations\\n\\nReturns:\\n    PerformanceMonitoringDashboard object\",\n        \"description\": \"Set up performance monitoring dashboard with real-time alerting, notification systems,\\nand comprehensive performance tracking.\\n\\nArgs:\\n    model_ids: List of model IDs to monitor\\n    monitoring_config: Monitoring configuration options\\n    alert_rules: Alert rule definitions\\n    notification_channels: Notification channel configurations\\n\\nReturns:\\n    PerformanceMonitoringDashboard object\",\n        \"operationId\": \"setup_performance_monitoring_dashboard\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"model_ids\",\n            \"in\": \"query\",\n            \"description\": \"List of model IDs to monitor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"monitoring_config\",\n            \"in\": \"query\",\n            \"description\": \"Monitoring configuration options\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"alert_rules\",\n            \"in\": \"query\",\n            \"description\": \"Alert rule definitions\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"notification_channels\",\n            \"in\": \"query\",\n            \"description\": \"Notification channel configurations\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/custom/visualization/component\": {\n      \"post\": {\n        \"summary\": \"Create custom visualization component with interactive features and callbacks.\\n\\nArgs:\\n    component_config: Component configuration and styling\\n    data_source: Data source identifier\\n    interaction_callbacks: Dictionary of interaction callbacks\\n\\nReturns:\\n    Custom visualization component configuration\",\n        \"description\": \"Create custom visualization component with interactive features and callbacks.\\n\\nArgs:\\n    component_config: Component configuration and styling\\n    data_source: Data source identifier\\n    interaction_callbacks: Dictionary of interaction callbacks\\n\\nReturns:\\n    Custom visualization component configuration\",\n        \"operationId\": \"create_custom_visualization_component\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"component_config\",\n            \"in\": \"query\",\n            \"description\": \"Component configuration and styling\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"data_source\",\n            \"in\": \"query\",\n            \"description\": \"Data source identifier\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"interaction_callbacks\",\n            \"in\": \"query\",\n            \"description\": \"Dictionary of interaction callbacks\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//create/accuracy/heatmap\": {\n      \"post\": {\n        \"summary\": \"Create a single accuracy heatmap.\",\n        \"description\": \"Create a single accuracy heatmap.\",\n        \"operationId\": \"_create_accuracy_heatmap\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"heatmap_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: heatmap_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"model_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"heatmap_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: heatmap_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"geographic_scope\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: geographic_scope\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"temporal_granularity\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: temporal_granularity\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"interactive_features\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: interactive_features\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get visualization engine performance metrics.\",\n        \"description\": \"Get visualization engine performance metrics.\",\n        \"operationId\": \"get_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"performance_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_dashboards\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_heatmaps\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_dashboards\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_connections\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"websocket_server_running\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"dash_app_running\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_updated\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/dashboard/status\": {\n      \"get\": {\n        \"summary\": \"Get status of a specific dashboard.\",\n        \"description\": \"Get status of a specific dashboard.\",\n        \"operationId\": \"get_dashboard_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"dashboard_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: dashboard_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.dashboard_integration.visualization_dashboard_engine\n\n## Overview\n\nVisualization Dashboard Engine for Phase 6D - Saraphis Financial Fraud Detection System\nGroup 6D: Visualization and Dashboard System (Method 19-20)\n\nThis module provides advanced visualization and dashboard capabilities including:\n- Real-time accuracy dashboards with live data feeds and interactive widgets\n- Accuracy heatmaps with geographic and temporal visualization\n- Performance monitoring dashboards with alerting and notifications\n- Custom visualization components with filtering and drill-down capabilities\n\nAuthor: Saraphis Development Team\nVersion: 1.0.0\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/dashboard_integration/visualization_dashboard_engine.py`\n\n## Dependencies\n\n- plotly.graph_objects\n- websockets\n- threading\n- datetime\n- json\n- time\n- plotly.subplots\n- dash_bootstrap_components\n- numpy\n- eventlet\n- seaborn\n- matplotlib.pyplot\n- dash\n- typing\n- abc\n- redis\n- folium.plugins\n- plotly.express\n- concurrent.futures\n- logging\n- pandas\n- flask_socketio\n- asyncio\n- dataclasses\n- folium\n\n## Code Structure\n\n- **Total Lines:** 827\n- **Code Lines:** 631\n- **Comment Lines:** 63\n\n## Complexity Indicators\n\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.dashboard_integration.visualization_dashboard_engine\n\nVisualization Dashboard Engine for Phase 6D - Saraphis Financial Fraud Detection System\nGroup 6D: Visualization and Dashboard System (Method 19-20)\n\nThis module provides advanced visualization and dashboard capabilities including:\n- Real-time accuracy dashboards with live data feeds and interactive widgets\n- Accuracy heatmaps with geographic and temporal visualization\n- Performance monitoring dashboards with alerting and notifications\n- Custom visualization components with filtering and drill-down capabilities\n\nAuthor: Saraphis Development Team\nVersion: 1.0.0\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 0\n- **Dependencies:** 25\n\n## Class Hierarchy\n\n- **DashboardWidget**\n  - Methods: 0\n  - Complexity: 20\n- **RealTimeDashboard**\n  - Methods: 0\n  - Complexity: 27\n- **AccuracyHeatmap**\n  - Methods: 0\n  - Complexity: 29\n- **PerformanceMonitoringDashboard**\n  - Methods: 0\n  - Complexity: 27\n- **VisualizationDashboardEngine**\n  - Methods: 14\n  - Complexity: 72\n## Integration Points\n\n- Function: stop_real_time_services\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.dashboard_integration.dashboard_bridge",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/dashboard_integration/dashboard_bridge.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.dashboard_integration.dashboard_bridge\n\nAPI endpoints for independent_core.dashboard_integration.dashboard_bridge\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/dashboard\n\n#### POST /create/dashboard\n\nCreate a dashboard instance for the specified domain\n\nArgs:\n    domain_name: Name of the registered domain\n    **kwargs: Additional arguments to pass to dashboard factory\n    \nReturns:\n    Dashboard instance or None if creation failed\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Name of the registered domain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/dashboard?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/dashboard\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/active/dashboard\n\n#### GET /get/active/dashboard\n\nGet currently active dashboard for domain\n\n**Parameters:**\n\n- **domain_name** (query) *required*: str - Parameter: domain_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/active/dashboard?domain_name=example_domain_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/active/dashboard\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_name\": \"example_domain_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/status\n\n#### GET /get/status\n\nGet status of all dashboards\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.dashboard_integration.dashboard_bridge\",\n    \"description\": \"API endpoints for independent_core.dashboard_integration.dashboard_bridge\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/dashboard\": {\n      \"post\": {\n        \"summary\": \"Create a dashboard instance for the specified domain\\n\\nArgs:\\n    domain_name: Name of the registered domain\\n    **kwargs: Additional arguments to pass to dashboard factory\\n    \\nReturns:\\n    Dashboard instance or None if creation failed\",\n        \"description\": \"Create a dashboard instance for the specified domain\\n\\nArgs:\\n    domain_name: Name of the registered domain\\n    **kwargs: Additional arguments to pass to dashboard factory\\n    \\nReturns:\\n    Dashboard instance or None if creation failed\",\n        \"operationId\": \"create_dashboard\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of the registered domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/active/dashboard\": {\n      \"get\": {\n        \"summary\": \"Get currently active dashboard for domain\",\n        \"description\": \"Get currently active dashboard for domain\",\n        \"operationId\": \"get_active_dashboard\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/status\": {\n      \"get\": {\n        \"summary\": \"Get status of all dashboards\",\n        \"description\": \"Get status of all dashboards\",\n        \"operationId\": \"get_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"registered_dashboards\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_registered\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_active\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.dashboard_integration.dashboard_bridge\n\n## Overview\n\nDashboard Bridge - Core integration hub for domain dashboards\nProvides clean separation between core AI system and domain-specific visualizations\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/dashboard_integration/dashboard_bridge.py`\n\n## Dependencies\n\n- pathlib\n- sys\n- logging\n- typing\n- threading\n- dataclasses\n- datetime\n\n## Code Structure\n\n- **Total Lines:** 547\n- **Code Lines:** 420\n- **Comment Lines:** 29\n\n## Complexity Indicators\n\n- Concurrency\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.proof_system.rule_based_engine",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/rule_based_engine.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.proof_system.rule_based_engine\n\nAPI endpoints for independent_core.proof_system.rule_based_engine\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/rule/summary\n\n#### GET /get/rule/summary\n\nGet summary of all available rules\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/rule/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/rule/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.proof_system.rule_based_engine\",\n    \"description\": \"API endpoints for independent_core.proof_system.rule_based_engine\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/rule/summary\": {\n      \"get\": {\n        \"summary\": \"Get summary of all available rules\",\n        \"description\": \"Get summary of all available rules\",\n        \"operationId\": \"get_rule_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"default_rules\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"custom_rules\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_rules\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"rule_names\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.proof_system.rule_based_engine\n\n## Overview\n\nRule-Based Proof Engine\nGenerates proofs based on business rules and domain knowledge\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/rule_based_engine.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- datetime\n- time\n\n## Code Structure\n\n- **Total Lines:** 176\n- **Code Lines:** 147\n- **Comment Lines:** 5\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.proof_system.pattern_mining_engine",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/pattern_mining_engine.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.proof_system.pattern_mining_engine\n\nAPI endpoints for independent_core.proof_system.pattern_mining_engine\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/pattern/recommendations\n\n#### GET /get/pattern/recommendations\n\nGet pattern-based recommendations for given context\n\n**Parameters:**\n\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/pattern/recommendations?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/pattern/recommendations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.proof_system.pattern_mining_engine\",\n    \"description\": \"API endpoints for independent_core.proof_system.pattern_mining_engine\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/pattern/recommendations\": {\n      \"get\": {\n        \"summary\": \"Get pattern-based recommendations for given context\",\n        \"description\": \"Get pattern-based recommendations for given context\",\n        \"operationId\": \"get_pattern_recommendations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.proof_system.pattern_mining_engine\n\n## Overview\n\nPattern Mining Engine - Mines patterns from proof executions and provides recommendations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/pattern_mining_engine.py`\n\n## Dependencies\n\n- itertools\n- numpy\n- logging\n- typing\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1074\n- **Code Lines:** 773\n- **Comment Lines:** 96\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.proof_system.pattern_mining_engine\n\nPattern Mining Engine - Mines patterns from proof executions and provides recommendations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 9\n\n## Class Hierarchy\n\n- **SequentialPattern**\n  - Methods: 1\n  - Complexity: 13\n- **AssociationRule**\n  - Methods: 1\n  - Complexity: 19\n- **ClusterPattern**\n  - Methods: 1\n  - Complexity: 17\n- **PatternRecommendation**\n  - Methods: 1\n  - Complexity: 16\n- **SequentialPatternMiner**\n  - Methods: 5\n  - Complexity: 51\n- **AssociationRuleMiner**\n  - Methods: 5\n  - Complexity: 53\n- **ClusteringPatternMiner**\n  - Methods: 6\n  - Complexity: 57\n- **PatternMiningEngine**\n  - Methods: 18\n  - Complexity: 143\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.proof_system.algebraic_rule_enforcer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/algebraic_rule_enforcer.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.proof_system.algebraic_rule_enforcer",
        "developer_guide": "# Developer Guide: independent_core.proof_system.algebraic_rule_enforcer\n\n## Overview\n\nAlgebraic Rule Enforcer\nEnforces mathematical and algebraic constraints during training and inference\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/algebraic_rule_enforcer.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- datetime\n- time\n\n## Code Structure\n\n- **Total Lines:** 995\n- **Code Lines:** 789\n- **Comment Lines:** 67\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.proof_system.ml_based_engine",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/ml_based_engine.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.proof_system.ml_based_engine",
        "developer_guide": "# Developer Guide: independent_core.proof_system.ml_based_engine\n\n## Overview\n\nML-Based Proof Engine\nGenerates proofs based on machine learning model predictions and analysis\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/ml_based_engine.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- hashlib\n- datetime\n- time\n\n## Code Structure\n\n- **Total Lines:** 325\n- **Code Lines:** 236\n- **Comment Lines:** 26\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.proof_system.strategy_recorder",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/strategy_recorder.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.proof_system.strategy_recorder\n\nAPI endpoints for independent_core.proof_system.strategy_recorder\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/all/strategy/metrics\n\n#### GET /get/all/strategy/metrics\n\nGet metrics for all strategies\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/all/strategy/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/all/strategy/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/executions/by/strategy\n\n#### GET /get/executions/by/strategy\n\nGet all executions for a specific strategy\n\n**Parameters:**\n\n- **strategy_name** (query) *required*: str - Parameter: strategy_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/executions/by/strategy?strategy_name=example_strategy_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/executions/by/strategy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"strategy_name\": \"example_strategy_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/performance/summary\n\n#### GET /get/performance/summary\n\nGet overall performance summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/recent/executions\n\n#### GET /get/recent/executions\n\nGet recent executions\n\n**Parameters:**\n\n- **count** (query) *required*: int - Parameter: count\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/recent/executions?count=example_count\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/recent/executions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"count\": \"example_count\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/strategy/metrics\n\n#### GET /get/strategy/metrics\n\nGet metrics for a specific strategy\n\n**Parameters:**\n\n- **strategy_name** (query) *required*: str - Parameter: strategy_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/strategy/metrics?strategy_name=example_strategy_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/strategy/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"strategy_name\": \"example_strategy_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /update/from/execution\n\n#### PUT /update/from/execution\n\nUpdate metrics from a new execution\n\n**Parameters:**\n\n- **execution** (query) *required*: StrategyExecution - Parameter: execution\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/from/execution?execution=example_execution\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/from/execution\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"execution\": \"example_execution\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.proof_system.strategy_recorder\",\n    \"description\": \"API endpoints for independent_core.proof_system.strategy_recorder\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/from/execution\": {\n      \"put\": {\n        \"summary\": \"Update metrics from a new execution\",\n        \"description\": \"Update metrics from a new execution\",\n        \"operationId\": \"update_from_execution\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"execution\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: execution\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"StrategyExecution\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/strategy/metrics\": {\n      \"get\": {\n        \"summary\": \"Get metrics for a specific strategy\",\n        \"description\": \"Get metrics for a specific strategy\",\n        \"operationId\": \"get_strategy_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"strategy_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: strategy_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/all/strategy/metrics\": {\n      \"get\": {\n        \"summary\": \"Get metrics for all strategies\",\n        \"description\": \"Get metrics for all strategies\",\n        \"operationId\": \"get_all_strategy_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/executions/by/strategy\": {\n      \"get\": {\n        \"summary\": \"Get all executions for a specific strategy\",\n        \"description\": \"Get all executions for a specific strategy\",\n        \"operationId\": \"get_executions_by_strategy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"strategy_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: strategy_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/recent/executions\": {\n      \"get\": {\n        \"summary\": \"Get recent executions\",\n        \"description\": \"Get recent executions\",\n        \"operationId\": \"get_recent_executions\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: count\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/summary\": {\n      \"get\": {\n        \"summary\": \"Get overall performance summary\",\n        \"description\": \"Get overall performance summary\",\n        \"operationId\": \"get_performance_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_strategies\": {\n                      \"type\": \"number\"\n                    },\n                    \"total_executions\": {\n                      \"type\": \"number\"\n                    },\n                    \"overall_success_rate\": {\n                      \"type\": \"number\"\n                    },\n                    \"strategies\": {\n                      \"type\": \"object\",\n                      \"properties\": {}\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.proof_system.strategy_recorder\n\n## Overview\n\nStrategy Recorder - Records and tracks proof strategy executions\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/strategy_recorder.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 696\n- **Code Lines:** 529\n- **Comment Lines:** 46\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.proof_system.strategy_recorder\n\nStrategy Recorder - Records and tracks proof strategy executions\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 8\n\n## Class Hierarchy\n\n- **StrategyExecution**\n  - Methods: 2\n  - Complexity: 26\n- **StrategyMetrics**\n  - Methods: 5\n  - Complexity: 38\n- **TrendAnalyzer**\n  - Methods: 3\n  - Complexity: 22\n- **AnomalyDetector**\n  - Methods: 2\n  - Complexity: 18\n- **PatternAnalyzer**\n  - Methods: 4\n  - Complexity: 39\n- **StrategyRecorder**\n  - Methods: 13\n  - Complexity: 70\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.proof_system.confidence_generator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/confidence_generator.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.proof_system.confidence_generator",
        "developer_guide": "# Developer Guide: independent_core.proof_system.confidence_generator\n\n## Overview\n\nConfidence Generator\nGenerates confidence scores by aggregating different proof sources\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/confidence_generator.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- datetime\n- time\n\n## Code Structure\n\n- **Total Lines:** 397\n- **Code Lines:** 294\n- **Comment Lines:** 40\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.proof_system.proof_integration_manager",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/proof_integration_manager.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.proof_system.proof_integration_manager\n\nAPI endpoints for independent_core.proof_system.proof_integration_manager\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/event/log\n\n#### GET /get/event/log\n\nGet copy of event log\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/event/log\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/event/log\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/stats\n\n#### GET /get/performance/stats\n\nGet performance statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/registered/engines\n\n#### GET /get/registered/engines\n\nGet list of registered engine names\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/registered/engines\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/registered/engines\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.proof_system.proof_integration_manager\",\n    \"description\": \"API endpoints for independent_core.proof_system.proof_integration_manager\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/registered/engines\": {\n      \"get\": {\n        \"summary\": \"Get list of registered engine names\",\n        \"description\": \"Get list of registered engine names\",\n        \"operationId\": \"get_registered_engines\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/event/log\": {\n      \"get\": {\n        \"summary\": \"Get copy of event log\",\n        \"description\": \"Get copy of event log\",\n        \"operationId\": \"get_event_log\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/stats\": {\n      \"get\": {\n        \"summary\": \"Get performance statistics\",\n        \"description\": \"Get performance statistics\",\n        \"operationId\": \"get_performance_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.proof_system.proof_integration_manager\n\n## Overview\n\nProof Integration Manager\nCoordinates all proof engines and manages comprehensive proof generation\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/proof_integration_manager.py`\n\n## Dependencies\n\n- rule_based_engine\n- ml_based_engine\n- algebraic_rule_enforcer\n- concurrent.futures\n- logging\n- typing\n- confidence_generator\n- cryptographic_engine\n- asyncio\n- threading\n- datetime\n- time\n\n## Code Structure\n\n- **Total Lines:** 412\n- **Code Lines:** 313\n- **Comment Lines:** 26\n\n## Complexity Indicators\n\n- Concurrency\n\n",
        "integration_guide": "\n# independent_core.proof_system.proof_integration_manager\n\nProof Integration Manager\nCoordinates all proof engines and manages comprehensive proof generation\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/proof_integration_manager.py\n- **Total Classes:** 1\n- **Total Functions:** 0\n- **Dependencies:** rule_based_engine, ml_based_engine, algebraic_rule_enforcer, concurrent.futures, logging, typing, confidence_generator, cryptographic_engine, asyncio, threading, datetime, time\n\n## Contents\n**Classes (1):** ProofIntegrationManager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: ProofIntegrationManager\nFunction: register_event_handler\n\n## Examples\nNo examples available\n",
        "architecture": "# Architecture: independent_core.proof_system.proof_integration_manager\n\nProof Integration Manager\nCoordinates all proof engines and manages comprehensive proof generation\n\n## Components Overview\n\n- **Classes:** 1\n- **Functions:** 0\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **ProofIntegrationManager**\n  - Methods: 20\n  - Complexity: 102\n## Integration Points\n\n- Class: ProofIntegrationManager\n- Function: register_event_handler\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.proof_system.strategy_cache",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/strategy_cache.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.proof_system.strategy_cache\n\nAPI endpoints for independent_core.proof_system.strategy_cache\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //update/average/access/time\n\n#### POST //update/average/access/time\n\nUpdate average access time\n\n**Parameters:**\n\n- **access_time** (query) *required*: float - Parameter: access_time\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//update/average/access/time?access_time=example_access_time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//update/average/access/time\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"access_time\": \"example_access_time\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/all/keys\n\n#### GET /get/all/keys\n\nGet all cache keys\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/all/keys\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/all/keys\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/entry/info\n\n#### GET /get/entry/info\n\nGet information about a cache entry\n\n**Parameters:**\n\n- **key** (query) *required*: str - Parameter: key\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/entry/info?key=example_key\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/entry/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key\": \"example_key\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/size\n\n#### GET /get/size\n\nGet number of entries in cache\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/size\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/size\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/size/bytes\n\n#### GET /get/size/bytes\n\nGet total size in bytes\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/size/bytes\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/size/bytes\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/statistics\n\n#### GET /get/statistics\n\nGet cache statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /hit/rate\n\n#### POST /hit/rate\n\nGet cache hit rate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/hit/rate\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/hit/rate\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /update/access\n\n#### PUT /update/access\n\nUpdate access metadata\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/access\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/access\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /update/hit\n\n#### PUT /update/hit\n\nUpdate hit statistics\n\n**Parameters:**\n\n- **access_time** (query) *required*: float - Parameter: access_time\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/hit?access_time=example_access_time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/hit\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"access_time\": \"example_access_time\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/miss\n\n#### PUT /update/miss\n\nUpdate miss statistics\n\n**Parameters:**\n\n- **access_time** (query) *required*: float - Parameter: access_time\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/miss?access_time=example_access_time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/miss\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"access_time\": \"example_access_time\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.proof_system.strategy_cache\",\n    \"description\": \"API endpoints for independent_core.proof_system.strategy_cache\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/access\": {\n      \"put\": {\n        \"summary\": \"Update access metadata\",\n        \"description\": \"Update access metadata\",\n        \"operationId\": \"update_access\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/hit/rate\": {\n      \"post\": {\n        \"summary\": \"Get cache hit rate\",\n        \"description\": \"Get cache hit rate\",\n        \"operationId\": \"hit_rate\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/hit\": {\n      \"put\": {\n        \"summary\": \"Update hit statistics\",\n        \"description\": \"Update hit statistics\",\n        \"operationId\": \"update_hit\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"access_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: access_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/miss\": {\n      \"put\": {\n        \"summary\": \"Update miss statistics\",\n        \"description\": \"Update miss statistics\",\n        \"operationId\": \"update_miss\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"access_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: access_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//update/average/access/time\": {\n      \"post\": {\n        \"summary\": \"Update average access time\",\n        \"description\": \"Update average access time\",\n        \"operationId\": \"_update_average_access_time\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"access_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: access_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/size\": {\n      \"get\": {\n        \"summary\": \"Get number of entries in cache\",\n        \"description\": \"Get number of entries in cache\",\n        \"operationId\": \"get_size\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/size/bytes\": {\n      \"get\": {\n        \"summary\": \"Get total size in bytes\",\n        \"description\": \"Get total size in bytes\",\n        \"operationId\": \"get_size_bytes\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/statistics\": {\n      \"get\": {\n        \"summary\": \"Get cache statistics\",\n        \"description\": \"Get cache statistics\",\n        \"operationId\": \"get_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/entry/info\": {\n      \"get\": {\n        \"summary\": \"Get information about a cache entry\",\n        \"description\": \"Get information about a cache entry\",\n        \"operationId\": \"get_entry_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"key\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"creation_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_access_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"access_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"size_bytes\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"ttl_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"age_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"is_expired\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compressed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metadata\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"access_frequency\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/all/keys\": {\n      \"get\": {\n        \"summary\": \"Get all cache keys\",\n        \"description\": \"Get all cache keys\",\n        \"operationId\": \"get_all_keys\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.proof_system.strategy_cache\n\n## Overview\n\nStrategy Cache - Caching system for proof strategies\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/strategy_cache.py`\n\n## Dependencies\n\n- gzip\n- logging\n- enum\n- typing\n- pickle\n- hashlib\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 556\n- **Code Lines:** 420\n- **Comment Lines:** 42\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.proof_system.strategy_cache\n\nStrategy Cache - Caching system for proof strategies\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 1\n- **Dependencies:** 11\n\n## Class Hierarchy\n\n- **EvictionPolicy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **CacheEntry**\n  - Methods: 6\n  - Complexity: 38\n- **CacheStatistics**\n  - Methods: 5\n  - Complexity: 27\n- **CacheWarmer**\n  - Methods: 3\n  - Complexity: 17\n- **StrategyCache**\n  - Methods: 22\n  - Complexity: 113\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.proof_system.cryptographic_engine",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/cryptographic_engine.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.proof_system.cryptographic_engine\n\nAPI endpoints for independent_core.proof_system.cryptographic_engine\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //generate/hash\n\n#### POST //generate/hash\n\nGenerate SHA-256 hash of data\n\n**Parameters:**\n\n- **data** (body) *required*: string - Parameter: data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000//generate/hash\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/hash\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //serialize/data\n\n#### POST //serialize/data\n\nSerialize data for consistent hashing\n\n**Parameters:**\n\n- **data** (body) *required*: string - Parameter: data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000//serialize/data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//serialize/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/merkle/proof\n\n#### GET /get/merkle/proof\n\nGet Merkle proof path for specific transaction\n\n**Parameters:**\n\n- **transactions** (query) *required*: string - Parameter: transactions\n- **target_index** (query) *required*: int - Parameter: target_index\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/merkle/proof?transactions=example_transactions&target_index=example_target_index\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/merkle/proof\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"transactions\": \"example_transactions\",\n    \"target_index\": \"example_target_index\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.proof_system.cryptographic_engine\",\n    \"description\": \"API endpoints for independent_core.proof_system.cryptographic_engine\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//serialize/data\": {\n      \"post\": {\n        \"summary\": \"Serialize data for consistent hashing\",\n        \"description\": \"Serialize data for consistent hashing\",\n        \"operationId\": \"_serialize_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"data\": {\n                    \"type\": \"string\",\n                    \"description\": \"Parameter: data\"\n                  }\n                },\n                \"required\": [\n                  \"data\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//generate/hash\": {\n      \"post\": {\n        \"summary\": \"Generate SHA-256 hash of data\",\n        \"description\": \"Generate SHA-256 hash of data\",\n        \"operationId\": \"_generate_hash\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"data\": {\n                    \"type\": \"string\",\n                    \"description\": \"Parameter: data\"\n                  }\n                },\n                \"required\": [\n                  \"data\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/merkle/proof\": {\n      \"get\": {\n        \"summary\": \"Get Merkle proof path for specific transaction\",\n        \"description\": \"Get Merkle proof path for specific transaction\",\n        \"operationId\": \"get_merkle_proof\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"transactions\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: transactions\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"target_index\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target_index\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.proof_system.cryptographic_engine\n\n## Overview\n\nCryptographic Proof Engine\nGenerates cryptographic proofs for data integrity and authenticity\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/cryptographic_engine.py`\n\n## Dependencies\n\n- hmac\n- secrets\n- logging\n- typing\n- hashlib\n- datetime\n- json\n- time\n\n## Code Structure\n\n- **Total Lines:** 313\n- **Code Lines:** 215\n- **Comment Lines:** 35\n\n",
        "architecture": "# Architecture: independent_core.proof_system.cryptographic_engine\n\nCryptographic Proof Engine\nGenerates cryptographic proofs for data integrity and authenticity\n\n## Components Overview\n\n- **Classes:** 1\n- **Functions:** 0\n- **Dependencies:** 8\n\n## Class Hierarchy\n\n- **CryptographicProofEngine**\n  - Methods: 16\n  - Complexity: 74\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.golf_domain.golf_prediction_engine",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/golf_prediction_engine.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.golf_domain.golf_prediction_engine\n\nAPI endpoints for independent_core.golf_domain.golf_prediction_engine\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //get/device\n\n#### POST //get/device\n\nGet appropriate device for training/inference.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/device\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/device\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.golf_domain.golf_prediction_engine\",\n    \"description\": \"API endpoints for independent_core.golf_domain.golf_prediction_engine\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//get/device\": {\n      \"post\": {\n        \"summary\": \"Get appropriate device for training/inference.\",\n        \"description\": \"Get appropriate device for training/inference.\",\n        \"operationId\": \"_get_device\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.golf_domain.golf_prediction_engine\n\n## Overview\n\nGolf Prediction Engine - Unified prediction interface for golf lineup optimization.\nCoordinates neural networks, data processing, and ensemble predictions.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/golf_prediction_engine.py`\n\n## Dependencies\n\n- numpy\n- concurrent.futures\n- golf_data_loader\n- domain_config\n- logging\n- typing\n- golf_neural_network\n- enhanced_golf_core_main\n- torch\n- asyncio\n- torch.nn\n- threading\n- dataclasses\n- datetime\n- time\n\n## Code Structure\n\n- **Total Lines:** 643\n- **Code Lines:** 462\n- **Comment Lines:** 57\n\n## Complexity Indicators\n\n- Async programming\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.golf_domain.golf_prediction_engine\n\nGolf Prediction Engine - Unified prediction interface for golf lineup optimization.\nCoordinates neural networks, data processing, and ensemble predictions.\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 0\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **TournamentPrediction**\n  - Methods: 0\n  - Complexity: 8\n- **LineupPrediction**\n  - Methods: 0\n  - Complexity: 7\n- **PredictionRequest**\n  - Methods: 0\n  - Complexity: 6\n- **GolfPredictionEngine**\n  - Methods: 8\n  - Complexity: 85\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.golf_domain.enhanced_golf_core_main",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/enhanced_golf_core_main.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.golf_domain.enhanced_golf_core_main",
        "developer_guide": "# Developer Guide: independent_core.golf_domain.enhanced_golf_core_main\n\n## Overview\n\nEnhanced Golf Core Main - Bridge between existing golf gambler and Saraphis Brain system.\nMaintains existing functionality while adding Saraphis neural network capabilities.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/enhanced_golf_core_main.py`\n\n## Dependencies\n\n- numpy\n- concurrent.futures\n- brain\n- domain_config\n- logging\n- golf_data_loader\n- typing\n- golf_neural_network\n- torch\n- asyncio\n- golf_prediction_engine\n- threading\n- dataclasses\n- datetime\n- brain_golf_connector\n- time\n\n## Code Structure\n\n- **Total Lines:** 589\n- **Code Lines:** 438\n- **Comment Lines:** 43\n\n## Complexity Indicators\n\n- Async programming\n- Concurrency\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.golf_domain.golf_neural_network",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/golf_neural_network.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.golf_domain.golf_neural_network\n\nAPI endpoints for independent_core.golf_domain.golf_neural_network\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/loss/function\n\n#### POST /create/loss/function\n\nCreate loss function for training.\n\n**Parameters:**\n\n- **loss_type** (query) *required*: str - Parameter: loss_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/loss/function?loss_type=example_loss_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/loss/function\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"loss_type\": \"example_loss_type\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/network\n\n#### POST /create/network\n\nCreate a golf neural network of specified type.\n\n**Parameters:**\n\n- **model_type** (query) *required*: str - Parameter: model_type\n- **input_dim** (query) *required*: int - Parameter: input_dim\n- **config** (query) *required*: ModelConfig - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/network?model_type=example_model_type&input_dim=example_input_dim&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/network\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"model_type\": \"example_model_type\",\n    \"input_dim\": \"example_input_dim\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/optimizer\n\n#### POST /create/optimizer\n\nCreate optimizer for the network.\n\n**Parameters:**\n\n- **network** (query) *required*: Module - Parameter: network\n- **config** (query) *required*: ModelConfig - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/optimizer?network=example_network&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"network\": \"example_network\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/scheduler\n\n#### POST /create/scheduler\n\nCreate learning rate scheduler.\n\n**Parameters:**\n\n- **optimizer** (query) *required*: Optimizer - Parameter: optimizer\n- **config** (query) *required*: ModelConfig - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/scheduler?optimizer=example_optimizer&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/scheduler\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"optimizer\": \"example_optimizer\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/individual/predictions\n\n#### GET /get/individual/predictions\n\nGet predictions from individual networks in ensemble.\n\n**Parameters:**\n\n- **x** (query) *required*: Tensor - Parameter: x\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/individual/predictions?x=example_x\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/individual/predictions\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"x\": \"example_x\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.golf_domain.golf_neural_network\",\n    \"description\": \"API endpoints for independent_core.golf_domain.golf_neural_network\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/individual/predictions\": {\n      \"get\": {\n        \"summary\": \"Get predictions from individual networks in ensemble.\",\n        \"description\": \"Get predictions from individual networks in ensemble.\",\n        \"operationId\": \"get_individual_predictions\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"x\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: x\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Tensor\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/network\": {\n      \"post\": {\n        \"summary\": \"Create a golf neural network of specified type.\",\n        \"description\": \"Create a golf neural network of specified type.\",\n        \"operationId\": \"create_network\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"model_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"input_dim\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_dim\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ModelConfig\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/optimizer\": {\n      \"post\": {\n        \"summary\": \"Create optimizer for the network.\",\n        \"description\": \"Create optimizer for the network.\",\n        \"operationId\": \"create_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"network\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: network\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Module\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ModelConfig\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/scheduler\": {\n      \"post\": {\n        \"summary\": \"Create learning rate scheduler.\",\n        \"description\": \"Create learning rate scheduler.\",\n        \"operationId\": \"create_scheduler\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"optimizer\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: optimizer\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Optimizer\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ModelConfig\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/loss/function\": {\n      \"post\": {\n        \"summary\": \"Create loss function for training.\",\n        \"description\": \"Create loss function for training.\",\n        \"operationId\": \"create_loss_function\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"loss_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: loss_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.golf_domain.golf_neural_network\n\n## Overview\n\nGolf Neural Network - Neural network architectures for golf prediction.\nSupports standard, attention-based, and ensemble models.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/golf_neural_network.py`\n\n## Dependencies\n\n- torch.nn.functional\n- numpy\n- domain_config\n- logging\n- typing\n- abc\n- torch\n- torch.nn\n- torch.optim\n- dataclasses\n\n## Code Structure\n\n- **Total Lines:** 511\n- **Code Lines:** 357\n- **Comment Lines:** 42\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.golf_domain.golf_neural_network\n\nGolf Neural Network - Neural network architectures for golf prediction.\nSupports standard, attention-based, and ensemble models.\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 10\n\n## Class Hierarchy\n\n- **NetworkPrediction**\n  - Methods: 0\n  - Complexity: 6\n- **GolfNeuralNetwork** (inherits from ABC)\n  - Methods: 6\n  - Complexity: 24\n- **StandardGolfNetwork** (inherits from GolfNeuralNetwork)\n  - Methods: 2\n  - Complexity: 10\n- **AttentionGolfNetwork** (inherits from GolfNeuralNetwork)\n  - Methods: 2\n  - Complexity: 10\n- **GolfEnsembleNetwork**\n  - Methods: 3\n  - Complexity: 19\n- **GolfNeuralFactory**\n  - Methods: 4\n  - Complexity: 26\n- **GolfNeuralTrainer**\n  - Methods: 5\n  - Complexity: 26\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.golf_domain.golf_data_loader",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/golf_data_loader.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.golf_domain.golf_data_loader\n\nAPI endpoints for independent_core.golf_domain.golf_data_loader\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //parse/historical/performance\n\n#### POST //parse/historical/performance\n\nParse historical performance from string representation.\n\n**Parameters:**\n\n- **perf_str** (query) *required*: str - Parameter: perf_str\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//parse/historical/performance?perf_str=example_perf_str\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//parse/historical/performance\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"perf_str\": \"example_perf_str\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //parse/json/field\n\n#### POST //parse/json/field\n\nParse JSON field safely.\n\n**Parameters:**\n\n- **field_value** (query) *required*: str - Parameter: field_value\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//parse/json/field?field_value=example_field_value\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//parse/json/field\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"field_value\": \"example_field_value\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //parse/scores\n\n#### POST //parse/scores\n\nParse scores from string representation.\n\n**Parameters:**\n\n- **scores_str** (query) *required*: str - Parameter: scores_str\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//parse/scores?scores_str=example_scores_str\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//parse/scores\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"scores_str\": \"example_scores_str\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //process/tournament/data\n\n#### POST //process/tournament/data\n\nProcess tournament data DataFrame.\n\n**Parameters:**\n\n- **df** (query) *required*: DataFrame - Parameter: df\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/tournament/data?df=example_df\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/tournament/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"df\": \"example_df\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/data/loader\n\n#### POST /create/data/loader\n\nCreate PyTorch DataLoader.\n\n**Parameters:**\n\n- **features** (query) *required*: ndarray - Parameter: features\n- **targets** (query) *required*: ndarray - Parameter: targets\n- **player_ids** (query) *required*: string - Parameter: player_ids\n- **batch_size** (query) *required*: int - Parameter: batch_size\n- **shuffle** (query) *required*: bool - Parameter: shuffle\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/data/loader?features=example_features&targets=example_targets&player_ids=example_player_ids&batch_size=example_batch_size&shuffle=example_shuffle\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/data/loader\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"features\": \"example_features\",\n    \"targets\": \"example_targets\",\n    \"player_ids\": \"example_player_ids\",\n    \"batch_size\": \"example_batch_size\",\n    \"shuffle\": \"example_shuffle\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/player/data\n\n#### GET /get/player/data\n\nGet item with player ID.\n\n**Parameters:**\n\n- **idx** (query) *required*: int - Parameter: idx\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/player/data?idx=example_idx\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/player/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"idx\": \"example_idx\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.golf_domain.golf_data_loader\",\n    \"description\": \"API endpoints for independent_core.golf_domain.golf_data_loader\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/player/data\": {\n      \"get\": {\n        \"summary\": \"Get item with player ID.\",\n        \"description\": \"Get item with player ID.\",\n        \"operationId\": \"get_player_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"idx\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: idx\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//parse/scores\": {\n      \"post\": {\n        \"summary\": \"Parse scores from string representation.\",\n        \"description\": \"Parse scores from string representation.\",\n        \"operationId\": \"_parse_scores\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"scores_str\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: scores_str\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//parse/historical/performance\": {\n      \"post\": {\n        \"summary\": \"Parse historical performance from string representation.\",\n        \"description\": \"Parse historical performance from string representation.\",\n        \"operationId\": \"_parse_historical_performance\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"perf_str\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: perf_str\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//process/tournament/data\": {\n      \"post\": {\n        \"summary\": \"Process tournament data DataFrame.\",\n        \"description\": \"Process tournament data DataFrame.\",\n        \"operationId\": \"_process_tournament_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"df\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: df\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DataFrame\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//parse/json/field\": {\n      \"post\": {\n        \"summary\": \"Parse JSON field safely.\",\n        \"description\": \"Parse JSON field safely.\",\n        \"operationId\": \"_parse_json_field\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"field_value\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: field_value\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/create/data/loader\": {\n      \"post\": {\n        \"summary\": \"Create PyTorch DataLoader.\",\n        \"description\": \"Create PyTorch DataLoader.\",\n        \"operationId\": \"create_data_loader\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"features\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: features\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ndarray\"\n            }\n          },\n          {\n            \"name\": \"targets\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: targets\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ndarray\"\n            }\n          },\n          {\n            \"name\": \"player_ids\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: player_ids\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"batch_size\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: batch_size\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          },\n          {\n            \"name\": \"shuffle\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: shuffle\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.golf_domain.golf_data_loader\n\n## Overview\n\nGolf Data Loader - Data loading and preprocessing for golf prediction models.\nHandles player data, historical results, course information, and weather data.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/golf_data_loader.py`\n\n## Dependencies\n\n- pathlib\n- torch.utils.data\n- numpy\n- domain_config\n- logging\n- pandas\n- time\n- typing\n- torch\n- asyncio\n- hashlib\n- datetime\n- threading\n- dataclasses\n- json\n- os\n\n## Code Structure\n\n- **Total Lines:** 808\n- **Code Lines:** 599\n- **Comment Lines:** 53\n\n## Complexity Indicators\n\n- High function count\n- Async programming\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.golf_domain.golf_data_loader\n\nGolf Data Loader - Data loading and preprocessing for golf prediction models.\nHandles player data, historical results, course information, and weather data.\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 0\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **GolfDataConfig**\n  - Methods: 1\n  - Complexity: 13\n- **PlayerData**\n  - Methods: 0\n  - Complexity: 13\n- **TournamentData**\n  - Methods: 0\n  - Complexity: 10\n- **GolfDataset** (inherits from Dataset)\n  - Methods: 4\n  - Complexity: 13\n- **GolfDataLoader**\n  - Methods: 17\n  - Complexity: 123\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.golf_domain.brain_golf_connector",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/brain_golf_connector.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.golf_domain.brain_golf_connector\n\nAPI endpoints for independent_core.golf_domain.brain_golf_connector\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nInitialize brain golf connector.\n\n**Parameters:**\n\n- **brain_core** (query) *required*: BrainCore - Parameter: brain_core\n- **config** (query) *required*: GolfDomainConfig - Parameter: config\n- **gpu_optimizer** (query) *required*: string - Parameter: gpu_optimizer\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?brain_core=example_brain_core&config=example_config&gpu_optimizer=example_gpu_optimizer\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain_core\": \"example_brain_core\",\n    \"config\": \"example_config\",\n    \"gpu_optimizer\": \"example_gpu_optimizer\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### ///repr//\n\n#### POST ///repr//\n\nDetailed string representation.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///repr//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///repr//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //update/performance/metrics\n\n#### POST //update/performance/metrics\n\nUpdate performance metrics.\n\n**Parameters:**\n\n- **processing_time** (query) *required*: float - Parameter: processing_time\n- **success** (query) *required*: bool - Parameter: success\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//update/performance/metrics?processing_time=example_processing_time&success=example_success\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//update/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"processing_time\": \"example_processing_time\",\n    \"success\": \"example_success\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /to/dict\n\n#### POST /to/dict\n\nConvert request to dictionary.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/to/dict\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/to/dict\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.golf_domain.brain_golf_connector\",\n    \"description\": \"API endpoints for independent_core.golf_domain.brain_golf_connector\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/to/dict\": {\n      \"post\": {\n        \"summary\": \"Convert request to dictionary.\",\n        \"description\": \"Convert request to dictionary.\",\n        \"operationId\": \"to_dict\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"tournament_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"prediction_type\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"salary_cap\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"lineup_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"options\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"Initialize brain golf connector.\",\n        \"description\": \"Initialize brain golf connector.\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain_core\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: brain_core\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"BrainCore\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"GolfDomainConfig\"\n            }\n          },\n          {\n            \"name\": \"gpu_optimizer\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: gpu_optimizer\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//update/performance/metrics\": {\n      \"post\": {\n        \"summary\": \"Update performance metrics.\",\n        \"description\": \"Update performance metrics.\",\n        \"operationId\": \"_update_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"processing_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: processing_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"success\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: success\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///repr//\": {\n      \"post\": {\n        \"summary\": \"Detailed string representation.\",\n        \"description\": \"Detailed string representation.\",\n        \"operationId\": \"__repr__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.golf_domain.brain_golf_connector\n\n## Overview\n\nBrain Golf Connector - Integration between golf domain and Saraphis Brain system.\nImplements DomainInterface for proper Brain system integration.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/brain_golf_connector.py`\n\n## Dependencies\n\n- domain_registry\n- numpy\n- brain\n- domain_config\n- logging\n- typing\n- enhanced_golf_core_main\n- asyncio\n- threading\n- dataclasses\n- datetime\n- time\n\n## Code Structure\n\n- **Total Lines:** 511\n- **Code Lines:** 391\n- **Comment Lines:** 35\n\n## Complexity Indicators\n\n- Async programming\n- Concurrency\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.golf_domain.domain_config",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/domain_config.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.golf_domain.domain_config\n\nAPI endpoints for independent_core.golf_domain.domain_config\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/default/config/file\n\n#### POST /create/default/config/file\n\nCreate a default configuration file with comments.\n\n**Parameters:**\n\n- **output_path** (query) *required*: str - Parameter: output_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/default/config/file?output_path=example_output_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/default/config/file\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"output_path\": \"example_output_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/brain/connector/config\n\n#### GET /get/brain/connector/config\n\nGet configuration for brain connector.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/brain/connector/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/brain/connector/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/data/paths\n\n#### GET /get/data/paths\n\nGet all data file paths.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/data/paths\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/data/paths\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/model/architecture/config\n\n#### GET /get/model/architecture/config\n\nGet model architecture configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/model/architecture/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/model/architecture/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/runtime/config\n\n#### GET /get/runtime/config\n\nGet runtime configuration for enhanced golf core.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/runtime/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/runtime/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/saraphis/domain/config\n\n#### GET /get/saraphis/domain/config\n\nGet Saraphis-compatible domain configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/saraphis/domain/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/saraphis/domain/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /load/from/file\n\n#### POST /load/from/file\n\nLoad configuration from JSON file.\n\n**Parameters:**\n\n- **config_path** (query) *required*: str - Parameter: config_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/from/file?config_path=example_config_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/from/file\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_path\": \"example_config_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/to/file\n\n#### POST /save/to/file\n\nSave configuration to JSON file.\n\n**Parameters:**\n\n- **config_path** (query) *required*: str - Parameter: config_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/to/file?config_path=example_config_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/to/file\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_path\": \"example_config_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/runtime/config\n\n#### PUT /update/runtime/config\n\nUpdate configuration at runtime.\n\n**Parameters:**\n\n- **updates** (query) *required*: string - Parameter: updates\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/runtime/config?updates=example_updates\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/runtime/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"updates\": \"example_updates\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.golf_domain.domain_config\",\n    \"description\": \"API endpoints for independent_core.golf_domain.domain_config\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/load/from/file\": {\n      \"post\": {\n        \"summary\": \"Load configuration from JSON file.\",\n        \"description\": \"Load configuration from JSON file.\",\n        \"operationId\": \"load_from_file\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/save/to/file\": {\n      \"post\": {\n        \"summary\": \"Save configuration to JSON file.\",\n        \"description\": \"Save configuration to JSON file.\",\n        \"operationId\": \"save_to_file\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/saraphis/domain/config\": {\n      \"get\": {\n        \"summary\": \"Get Saraphis-compatible domain configuration.\",\n        \"description\": \"Get Saraphis-compatible domain configuration.\",\n        \"operationId\": \"get_saraphis_domain_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/runtime/config\": {\n      \"get\": {\n        \"summary\": \"Get runtime configuration for enhanced golf core.\",\n        \"description\": \"Get runtime configuration for enhanced golf core.\",\n        \"operationId\": \"get_runtime_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"model_config\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"environment_config\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"data_config\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"training_config\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"brain_config\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"risk_config\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/runtime/config\": {\n      \"put\": {\n        \"summary\": \"Update configuration at runtime.\",\n        \"description\": \"Update configuration at runtime.\",\n        \"operationId\": \"update_runtime_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"updates\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: updates\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/data/paths\": {\n      \"get\": {\n        \"summary\": \"Get all data file paths.\",\n        \"description\": \"Get all data file paths.\",\n        \"operationId\": \"get_data_paths\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"player_data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"historical_results\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"course_data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"weather_data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_directory\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/model/architecture/config\": {\n      \"get\": {\n        \"summary\": \"Get model architecture configuration.\",\n        \"description\": \"Get model architecture configuration.\",\n        \"operationId\": \"get_model_architecture_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"type\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"hidden_dims\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"dropout_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"batch_norm\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"activation\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"attention_config\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"ensemble_config\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/brain/connector/config\": {\n      \"get\": {\n        \"summary\": \"Get configuration for brain connector.\",\n        \"description\": \"Get configuration for brain connector.\",\n        \"operationId\": \"get_brain_connector_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"domain_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"use_orchestrators\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"orchestrator_timeout\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"use_proof_strategies\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"proof_confidence_threshold\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"enable_uncertainty\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"enable_reasoning\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"enable_decision_making\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"max_memory_mb\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/create/default/config/file\": {\n      \"post\": {\n        \"summary\": \"Create a default configuration file with comments.\",\n        \"description\": \"Create a default configuration file with comments.\",\n        \"operationId\": \"create_default_config_file\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"output_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: output_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.golf_domain.domain_config\n\n## Overview\n\nGolf Domain Configuration - Configuration management for golf gambling domain.\nIntegrates with Saraphis Brain system configuration framework.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/domain_config.py`\n\n## Dependencies\n\n- pathlib\n- domain_registry\n- logging\n- typing\n- datetime\n- dataclasses\n- json\n- os\n\n## Code Structure\n\n- **Total Lines:** 492\n- **Code Lines:** 375\n- **Comment Lines:** 41\n\n## Complexity Indicators\n\n- High class count\n- Decorators used\n\n",
        "configuration_guide": "\n# independent_core.golf_domain.domain_config\n\nGolf Domain Configuration - Configuration management for golf gambling domain.\nIntegrates with Saraphis Brain system configuration framework.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/golf_domain/domain_config.py\n- **Total Classes:** 7\n- **Total Functions:** 0\n- **Dependencies:** pathlib, domain_registry, logging, typing, datetime, dataclasses, json, os\n\n## Contents\n**Classes (7):** ModelConfig, EnvironmentConfig, DataConfig, TrainingConfig, BrainIntegrationConfig, RiskConfig, GolfDomainConfig\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: get_brain_connector_config\n\n## Examples\nmin_salary_usage: float = 0.95\n\n# Existing golf gambler integration\n",
        "architecture": "# Architecture: independent_core.golf_domain.domain_config\n\nGolf Domain Configuration - Configuration management for golf gambling domain.\nIntegrates with Saraphis Brain system configuration framework.\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 8\n\n## Class Hierarchy\n\n- **ModelConfig**\n  - Methods: 0\n  - Complexity: 18\n- **EnvironmentConfig**\n  - Methods: 0\n  - Complexity: 12\n- **DataConfig**\n  - Methods: 0\n  - Complexity: 12\n- **TrainingConfig**\n  - Methods: 0\n  - Complexity: 18\n- **BrainIntegrationConfig**\n  - Methods: 0\n  - Complexity: 12\n- **RiskConfig**\n  - Methods: 0\n  - Complexity: 10\n- **GolfDomainConfig**\n  - Methods: 15\n  - Complexity: 69\n## Integration Points\n\n- Function: get_brain_connector_config\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "configuration_guide missing required section: Overview",
        "configuration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.orchestrators.neural_orchestrator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/neural_orchestrator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.orchestrators.neural_orchestrator\n\nAPI endpoints for independent_core.orchestrators.neural_orchestrator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/model\n\n#### GET /get/model\n\nGet model by ID\n\n**Parameters:**\n\n- **model_id** (query) *required*: str - Parameter: model_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/model?model_id=example_model_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/model\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"model_id\": \"example_model_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/model/state\n\n#### GET /get/model/state\n\nGet model state by ID\n\n**Parameters:**\n\n- **model_id** (query) *required*: str - Parameter: model_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/model/state?model_id=example_model_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/model/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"model_id\": \"example_model_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.orchestrators.neural_orchestrator\",\n    \"description\": \"API endpoints for independent_core.orchestrators.neural_orchestrator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/model\": {\n      \"get\": {\n        \"summary\": \"Get model by ID\",\n        \"description\": \"Get model by ID\",\n        \"operationId\": \"get_model\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"model_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/model/state\": {\n      \"get\": {\n        \"summary\": \"Get model state by ID\",\n        \"description\": \"Get model state by ID\",\n        \"operationId\": \"get_model_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"model_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: model_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.orchestrators.neural_orchestrator\n\n## Overview\n\nNeural Orchestrator - Neural Network Coordination System\nManages neural network operations, training coordination, and model orchestration\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/neural_orchestrator.py`\n\n## Dependencies\n\n- numpy\n- logging\n- enum\n- typing\n- weakref\n- abc\n- torch\n- asyncio\n- traceback\n- torch.nn\n- torch.optim\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1421\n- **Code Lines:** 1092\n- **Comment Lines:** 88\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.orchestrators.neural_orchestrator\n\nNeural Orchestrator - Neural Network Coordination System\nManages neural network operations, training coordination, and model orchestration\n\n## Components Overview\n\n- **Classes:** 13\n- **Functions:** 0\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **NetworkType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **TrainingPhase** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **OptimizationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **SchedulingStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **NetworkConfig**\n  - Methods: 0\n  - Complexity: 12\n- **TrainingConfig**\n  - Methods: 0\n  - Complexity: 13\n- **ModelState**\n  - Methods: 0\n  - Complexity: 12\n- **NeuralTask**\n  - Methods: 0\n  - Complexity: 15\n- **NeuralModel**\n  - Methods: 9\n  - Complexity: 58\n- **TrainingCoordinator**\n  - Methods: 6\n  - Complexity: 40\n- **InferenceEngine**\n  - Methods: 3\n  - Complexity: 19\n- **NeuralOrchestrator**\n  - Methods: 33\n  - Complexity: 179\n- **DummyDataset**\n  - Methods: 3\n  - Complexity: 9\n## Integration Points\n\n- Function: _initialize_device_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.orchestrators.brain_decision_engine",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/brain_decision_engine.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.orchestrators.brain_decision_engine\n\nAPI endpoints for independent_core.orchestrators.brain_decision_engine\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/method/name\n\n#### GET /get/method/name\n\nAPI endpoint: get_method_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/method/name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/method/name\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/method/name\n\nAPI endpoint: get_method_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/method/name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/method/name\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/method/name\n\nAPI endpoint: get_method_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/method/name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/method/name\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/method/name\n\nAPI endpoint: get_method_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/method/name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/method/name\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/metrics\n\n#### GET /get/performance/metrics\n\nGet comprehensive performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.orchestrators.brain_decision_engine\",\n    \"description\": \"API endpoints for independent_core.orchestrators.brain_decision_engine\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/method/name\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_method_name\",\n        \"description\": \"API endpoint: get_method_name\",\n        \"operationId\": \"get_method_name\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive performance metrics\",\n        \"description\": \"Get comprehensive performance metrics\",\n        \"operationId\": \"get_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"decision_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"successful_decisions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"success_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"average_confidence\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"average_execution_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_decisions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"learning_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"available_methods\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"stakeholder_count\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.orchestrators.brain_decision_engine\n\n## Overview\n\nBrain Decision Engine - Advanced Decision Making System\nHandles complex decision processes, multi-criteria analysis, and adaptive decision strategies\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/brain_decision_engine.py`\n\n## Dependencies\n\n- numpy\n- logging\n- enum\n- typing\n- abc\n- traceback\n- asyncio\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1063\n- **Code Lines:** 797\n- **Comment Lines:** 76\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.orchestrators.brain_decision_engine\n\nBrain Decision Engine - Advanced Decision Making System\nHandles complex decision processes, multi-criteria analysis, and adaptive decision strategies\n\n## Components Overview\n\n- **Classes:** 13\n- **Functions:** 0\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **DecisionType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **DecisionStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **DecisionConfidence** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **CriteriaType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 3\n- **DecisionCriteria**\n  - Methods: 0\n  - Complexity: 8\n- **DecisionAlternative**\n  - Methods: 0\n  - Complexity: 7\n- **DecisionContext**\n  - Methods: 0\n  - Complexity: 12\n- **DecisionResult**\n  - Methods: 0\n  - Complexity: 13\n- **DecisionMethod** (inherits from ABC)\n  - Methods: 2\n  - Complexity: 7\n- **WeightedSumMethod** (inherits from DecisionMethod)\n  - Methods: 3\n  - Complexity: 21\n- **TOPSISMethod** (inherits from DecisionMethod)\n  - Methods: 4\n  - Complexity: 30\n- **AHPMethod** (inherits from DecisionMethod)\n  - Methods: 4\n  - Complexity: 22\n- **BrainDecisionEngine**\n  - Methods: 22\n  - Complexity: 154\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.orchestrators.reasoning_orchestrator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/reasoning_orchestrator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.orchestrators.reasoning_orchestrator\n\nAPI endpoints for independent_core.orchestrators.reasoning_orchestrator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //perform/reasoning\n\n#### POST //perform/reasoning\n\nPerform reasoning using specified type and strategy\n\n**Parameters:**\n\n- **parameters** (query) *required*: string - Parameter: parameters\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//perform/reasoning?parameters=example_parameters\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//perform/reasoning\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"parameters\": \"example_parameters\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/engine/type\n\n#### GET /get/engine/type\n\nAPI endpoint: get_engine_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/engine/type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/engine/type\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/engine/type\n\nAPI endpoint: get_engine_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/engine/type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/engine/type\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/engine/type\n\nAPI endpoint: get_engine_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/engine/type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/engine/type\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/engine/type\n\nAPI endpoint: get_engine_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/engine/type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/engine/type\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/proof/attempts\n\n#### GET /get/proof/attempts\n\nGet summary of all proof attempts\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/proof/attempts\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/proof/attempts\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/reasoning/chains\n\n#### GET /get/reasoning/chains\n\nGet summary of all reasoning chains\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/reasoning/chains\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/reasoning/chains\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.orchestrators.reasoning_orchestrator\",\n    \"description\": \"API endpoints for independent_core.orchestrators.reasoning_orchestrator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/engine/type\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_engine_type\",\n        \"description\": \"API endpoint: get_engine_type\",\n        \"operationId\": \"get_engine_type\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//perform/reasoning\": {\n      \"post\": {\n        \"summary\": \"Perform reasoning using specified type and strategy\",\n        \"description\": \"Perform reasoning using specified type and strategy\",\n        \"operationId\": \"_perform_reasoning\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"parameters\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: parameters\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/reasoning/chains\": {\n      \"get\": {\n        \"summary\": \"Get summary of all reasoning chains\",\n        \"description\": \"Get summary of all reasoning chains\",\n        \"operationId\": \"get_reasoning_chains\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/proof/attempts\": {\n      \"get\": {\n        \"summary\": \"Get summary of all proof attempts\",\n        \"description\": \"Get summary of all proof attempts\",\n        \"operationId\": \"get_proof_attempts\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.orchestrators.reasoning_orchestrator\n\n## Overview\n\nReasoning Orchestrator - Advanced Reasoning Coordination System\nManages logical reasoning, inference chains, proof construction, and reasoning strategies\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/reasoning_orchestrator.py`\n\n## Dependencies\n\n- numpy\n- logging\n- enum\n- typing\n- abc\n- traceback\n- asyncio\n- threading\n- dataclasses\n- json\n- re\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1114\n- **Code Lines:** 832\n- **Comment Lines:** 91\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.orchestrators.reasoning_orchestrator\n\nReasoning Orchestrator - Advanced Reasoning Coordination System\nManages logical reasoning, inference chains, proof construction, and reasoning strategies\n\n## Components Overview\n\n- **Classes:** 14\n- **Functions:** 0\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **ReasoningType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **InferenceRule** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **ReasoningStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **ConfidenceLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **LogicalStatement**\n  - Methods: 0\n  - Complexity: 8\n- **InferenceStep**\n  - Methods: 0\n  - Complexity: 8\n- **ReasoningChain**\n  - Methods: 0\n  - Complexity: 12\n- **ProofAttempt**\n  - Methods: 0\n  - Complexity: 11\n- **ReasoningContext**\n  - Methods: 0\n  - Complexity: 9\n- **ReasoningEngine** (inherits from ABC)\n  - Methods: 2\n  - Complexity: 7\n- **DeductiveReasoningEngine** (inherits from ReasoningEngine)\n  - Methods: 9\n  - Complexity: 61\n- **InductiveReasoningEngine** (inherits from ReasoningEngine)\n  - Methods: 6\n  - Complexity: 30\n- **AbductiveReasoningEngine** (inherits from ReasoningEngine)\n  - Methods: 6\n  - Complexity: 27\n- **ReasoningOrchestrator**\n  - Methods: 25\n  - Complexity: 129\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.orchestrators.domain_orchestrator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/domain_orchestrator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.orchestrators.domain_orchestrator\n\nAPI endpoints for independent_core.orchestrators.domain_orchestrator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/capabilities\n\n#### GET /get/capabilities\n\nGet list of capabilities\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/capabilities\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/capabilities\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/capabilities\n\nAPI endpoint: get_capabilities\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/capabilities\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/capabilities\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/capabilities\n\nAPI endpoint: get_capabilities\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/capabilities\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/capabilities\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/capabilities\n\nAPI endpoint: get_capabilities\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/capabilities\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/capabilities\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/domain/experts\n\n#### GET /get/domain/experts\n\nGet experts for a specific domain\n\n**Parameters:**\n\n- **domain** (query) *required*: DomainType - Parameter: domain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/experts?domain=example_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/experts\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain\": \"example_domain\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/domain/knowledge\n\n#### GET /get/domain/knowledge\n\nGet knowledge for a specific domain\n\n**Parameters:**\n\n- **domain** (query) *required*: DomainType - Parameter: domain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/domain/knowledge?domain=example_domain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/domain/knowledge\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain\": \"example_domain\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/operation/status\n\n#### GET /get/operation/status\n\nGet status of a specific operation\n\n**Parameters:**\n\n- **operation_id** (query) *required*: str - Parameter: operation_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/operation/status?operation_id=example_operation_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/operation/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation_id\": \"example_operation_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/performance/report\n\n#### GET /get/performance/report\n\nGet comprehensive performance report\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /handle/domain/operation\n\n#### POST /handle/domain/operation\n\nMain entry point for domain operations\n\n**Parameters:**\n\n- **parameters** (query) *required*: string - Parameter: parameters\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/domain/operation?parameters=example_parameters\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/domain/operation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"parameters\": \"example_parameters\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /handle/operation\n\n#### POST /handle/operation\n\nHandle domain-specific operation\n\n**Parameters:**\n\n- **operation** (query) *required*: DomainOperation - Parameter: operation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/operation?operation=example_operation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/operation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation\": \"example_operation\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST /handle/operation\n\nHandle mathematics operations\n\n**Parameters:**\n\n- **operation** (query) *required*: DomainOperation - Parameter: operation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/operation?operation=example_operation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/operation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation\": \"example_operation\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST /handle/operation\n\nHandle sports operations\n\n**Parameters:**\n\n- **operation** (query) *required*: DomainOperation - Parameter: operation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/operation?operation=example_operation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/operation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation\": \"example_operation\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST /handle/operation\n\nHandle general operations\n\n**Parameters:**\n\n- **operation** (query) *required*: DomainOperation - Parameter: operation\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/operation?operation=example_operation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/operation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation\": \"example_operation\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/performance\n\n#### PUT /update/performance\n\nUpdate performance metrics\n\n**Parameters:**\n\n- **operation** (query) *required*: DomainOperation - Parameter: operation\n- **result** (query) *required*: string - Parameter: result\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/performance?operation=example_operation&result=example_result\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/performance\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation\": \"example_operation\",\n    \"result\": \"example_result\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.orchestrators.domain_orchestrator\",\n    \"description\": \"API endpoints for independent_core.orchestrators.domain_orchestrator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/handle/operation\": {\n      \"post\": {\n        \"summary\": \"Handle general operations\",\n        \"description\": \"Handle general operations\",\n        \"operationId\": \"handle_operation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"operation\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: operation\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DomainOperation\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"result\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"data_type\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/capabilities\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_capabilities\",\n        \"description\": \"API endpoint: get_capabilities\",\n        \"operationId\": \"get_capabilities\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/performance\": {\n      \"put\": {\n        \"summary\": \"Update performance metrics\",\n        \"description\": \"Update performance metrics\",\n        \"operationId\": \"update_performance\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"operation\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: operation\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DomainOperation\"\n            }\n          },\n          {\n            \"name\": \"result\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: result\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/handle/domain/operation\": {\n      \"post\": {\n        \"summary\": \"Main entry point for domain operations\",\n        \"description\": \"Main entry point for domain operations\",\n        \"operationId\": \"handle_domain_operation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"parameters\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: parameters\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/domain/experts\": {\n      \"get\": {\n        \"summary\": \"Get experts for a specific domain\",\n        \"description\": \"Get experts for a specific domain\",\n        \"operationId\": \"get_domain_experts\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DomainType\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/domain/knowledge\": {\n      \"get\": {\n        \"summary\": \"Get knowledge for a specific domain\",\n        \"description\": \"Get knowledge for a specific domain\",\n        \"operationId\": \"get_domain_knowledge\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DomainType\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/operation/status\": {\n      \"get\": {\n        \"summary\": \"Get status of a specific operation\",\n        \"description\": \"Get status of a specific operation\",\n        \"operationId\": \"get_operation_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"operation_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: operation_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"operation_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"domain\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"mode\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"started_at\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"completed_at\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"result\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/performance/report\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive performance report\",\n        \"description\": \"Get comprehensive performance report\",\n        \"operationId\": \"get_performance_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.orchestrators.domain_orchestrator\n\n## Overview\n\nDomain Orchestrator - Domain-Specific Operations Coordinator\nManages domain-specific operations, expertise routing, and specialized processing\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/domain_orchestrator.py`\n\n## Dependencies\n\n- inspect\n- numpy\n- importlib\n- logging\n- enum\n- typing\n- abc\n- traceback\n- asyncio\n- scipy.optimize\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1314\n- **Code Lines:** 1031\n- **Comment Lines:** 69\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.orchestrators.domain_orchestrator\n\nDomain Orchestrator - Domain-Specific Operations Coordinator\nManages domain-specific operations, expertise routing, and specialized processing\n\n## Components Overview\n\n- **Classes:** 12\n- **Functions:** 1\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **DomainType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 10\n- **ExpertiseLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **OperationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **ProcessingStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **DomainExpertise**\n  - Methods: 0\n  - Complexity: 9\n- **DomainOperation**\n  - Methods: 0\n  - Complexity: 17\n- **DomainKnowledge**\n  - Methods: 0\n  - Complexity: 9\n- **DomainExpert** (inherits from ABC)\n  - Methods: 5\n  - Complexity: 16\n- **MathematicsExpert** (inherits from DomainExpert)\n  - Methods: 11\n  - Complexity: 51\n- **SportsExpert** (inherits from DomainExpert)\n  - Methods: 13\n  - Complexity: 80\n- **GeneralExpert** (inherits from DomainExpert)\n  - Methods: 6\n  - Complexity: 22\n- **DomainOrchestrator**\n  - Methods: 18\n  - Complexity: 111\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.orchestrators.brain_orchestrator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/brain_orchestrator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.orchestrators.brain_orchestrator\n\nAPI endpoints for independent_core.orchestrators.brain_orchestrator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //handle/emergency\n\n#### POST //handle/emergency\n\nHandle emergency response operations\n\n**Parameters:**\n\n- **parameters** (query) *required*: string - Parameter: parameters\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/emergency?parameters=example_parameters\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/emergency\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"parameters\": \"example_parameters\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/generic/operation\n\n#### POST //handle/generic/operation\n\nHandle generic operations\n\n**Parameters:**\n\n- **task** (query) *required*: OrchestrationTask - Parameter: task\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/generic/operation?task=example_task\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/generic/operation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"task\": \"example_task\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //trigger/emergency\n\n#### POST //trigger/emergency\n\nTrigger emergency response\n\n**Parameters:**\n\n- **reason** (query) *required*: str - Parameter: reason\n- **details** (query) *required*: string - Parameter: details\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//trigger/emergency?reason=example_reason&details=example_details\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//trigger/emergency\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"reason\": \"example_reason\",\n    \"details\": \"example_details\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/performance/report\n\n#### GET /get/performance/report\n\nGet comprehensive performance report\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/system/status\n\n#### GET /get/system/status\n\nGet comprehensive system status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/system/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/system/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/task/status\n\n#### GET /get/task/status\n\nGet status of a specific task\n\n**Parameters:**\n\n- **task_id** (query) *required*: str - Parameter: task_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/task/status?task_id=example_task_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/task/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"task_id\": \"example_task_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /update/metrics\n\n#### PUT /update/metrics\n\nUpdate system metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.orchestrators.brain_orchestrator\",\n    \"description\": \"API endpoints for independent_core.orchestrators.brain_orchestrator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//handle/generic/operation\": {\n      \"post\": {\n        \"summary\": \"Handle generic operations\",\n        \"description\": \"Handle generic operations\",\n        \"operationId\": \"_handle_generic_operation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"task\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: task\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"OrchestrationTask\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"operation\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/system/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive system status\",\n        \"description\": \"Get comprehensive system status\",\n        \"operationId\": \"get_system_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"state\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"mode\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"task_count\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"active_tasks\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"completed_tasks\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"failed_tasks\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"error_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_execution_time\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"throughput\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"components\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"queue_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"worker_pool_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_active\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/metrics\": {\n      \"put\": {\n        \"summary\": \"Update system metrics\",\n        \"description\": \"Update system metrics\",\n        \"operationId\": \"update_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"throughput\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_load\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"average_execution_time\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//trigger/emergency\": {\n      \"post\": {\n        \"summary\": \"Trigger emergency response\",\n        \"description\": \"Trigger emergency response\",\n        \"operationId\": \"_trigger_emergency\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"reason\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: reason\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"details\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: details\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/emergency\": {\n      \"post\": {\n        \"summary\": \"Handle emergency response operations\",\n        \"description\": \"Handle emergency response operations\",\n        \"operationId\": \"_handle_emergency\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"parameters\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: parameters\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/task/status\": {\n      \"get\": {\n        \"summary\": \"Get status of a specific task\",\n        \"description\": \"Get status of a specific task\",\n        \"operationId\": \"get_task_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"task_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: task_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"task_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"progress\": {\n                      \"type\": \"string\"\n                    },\n                    \"created_at\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/performance/report\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive performance report\",\n        \"description\": \"Get comprehensive performance report\",\n        \"operationId\": \"get_performance_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"system_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_tasks\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"completed_tasks\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"failed_tasks\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"active_tasks\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"error_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"throughput\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_execution_time\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"system_load\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"component_health\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_tasks\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"queue_status\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"pending_tasks\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"queue_priorities\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"system_state\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"orchestration_mode\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.orchestrators.brain_orchestrator\n\n## Overview\n\nBrain Orchestrator - Main Coordinator for Saraphis Brain System\nManages core orchestration, decision coordination, and system-wide operations\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/brain_orchestrator.py`\n\n## Dependencies\n\n- concurrent.futures\n- json\n- logging\n- enum\n- typing\n- traceback\n- asyncio\n- threading\n- dataclasses\n- weakref\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 826\n- **Code Lines:** 607\n- **Comment Lines:** 71\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.orchestrators.brain_orchestrator\n\nBrain Orchestrator - Main Coordinator for Saraphis Brain System\nManages core orchestration, decision coordination, and system-wide operations\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **OrchestrationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **SystemState** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **OperationPriority** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **OrchestrationTask**\n  - Methods: 0\n  - Complexity: 13\n- **SystemMetrics**\n  - Methods: 0\n  - Complexity: 10\n- **ComponentStatus**\n  - Methods: 0\n  - Complexity: 6\n- **BrainOrchestrator**\n  - Methods: 37\n  - Complexity: 188\n## Integration Points\n\n- Function: _register_emergency_handlers\n- Function: _setup_event_handlers\n- Function: register_event_handler\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.orchestrators.uncertainty_orchestrator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/uncertainty_orchestrator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.orchestrators.uncertainty_orchestrator\n\nAPI endpoints for independent_core.orchestrators.uncertainty_orchestrator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/calibration/results\n\n#### GET /get/calibration/results\n\nGet calibration results by ID\n\n**Parameters:**\n\n- **calibration_id** (query) *required*: str - Parameter: calibration_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/calibration/results?calibration_id=example_calibration_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/calibration/results\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"calibration_id\": \"example_calibration_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/method/name\n\n#### GET /get/method/name\n\nAPI endpoint: get_method_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/method/name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/method/name\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/method/name\n\nAPI endpoint: get_method_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/method/name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/method/name\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/method/name\n\nAPI endpoint: get_method_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/method/name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/method/name\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/method/name\n\nAPI endpoint: get_method_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/method/name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/method/name\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/method/name\n\nAPI endpoint: get_method_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/method/name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/method/name\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/metrics\n\n#### GET /get/performance/metrics\n\nGet performance metrics for uncertainty quantification\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/uncertainty/estimate\n\n#### GET /get/uncertainty/estimate\n\nGet uncertainty estimate by ID\n\n**Parameters:**\n\n- **estimate_id** (query) *required*: str - Parameter: estimate_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/uncertainty/estimate?estimate_id=example_estimate_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/uncertainty/estimate\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"estimate_id\": \"example_estimate_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.orchestrators.uncertainty_orchestrator\",\n    \"description\": \"API endpoints for independent_core.orchestrators.uncertainty_orchestrator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/method/name\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_method_name\",\n        \"description\": \"API endpoint: get_method_name\",\n        \"operationId\": \"get_method_name\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/uncertainty/estimate\": {\n      \"get\": {\n        \"summary\": \"Get uncertainty estimate by ID\",\n        \"description\": \"Get uncertainty estimate by ID\",\n        \"operationId\": \"get_uncertainty_estimate\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"estimate_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: estimate_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/calibration/results\": {\n      \"get\": {\n        \"summary\": \"Get calibration results by ID\",\n        \"description\": \"Get calibration results by ID\",\n        \"operationId\": \"get_calibration_results\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"calibration_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: calibration_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get performance metrics for uncertainty quantification\",\n        \"description\": \"Get performance metrics for uncertainty quantification\",\n        \"operationId\": \"get_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_estimates\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"quantification_times\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"method_usage\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"uncertainty_type_distribution\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"calibration_performance\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.orchestrators.uncertainty_orchestrator\n\n## Overview\n\nUncertainty Orchestrator - Advanced Uncertainty Quantification System\nManages uncertainty analysis, confidence estimation, and probabilistic reasoning\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/orchestrators/uncertainty_orchestrator.py`\n\n## Dependencies\n\n- torch.distributions\n- numpy\n- logging\n- enum\n- typing\n- abc\n- torch\n- asyncio\n- traceback\n- torch.nn\n- scipy.stats\n- scipy.optimize\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1207\n- **Code Lines:** 920\n- **Comment Lines:** 82\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.orchestrators.uncertainty_orchestrator\n\nUncertainty Orchestrator - Advanced Uncertainty Quantification System\nManages uncertainty analysis, confidence estimation, and probabilistic reasoning\n\n## Components Overview\n\n- **Classes:** 14\n- **Functions:** 0\n- **Dependencies:** 17\n\n## Class Hierarchy\n\n- **UncertaintyType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **QuantificationMethod** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **ConfidenceLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **UncertaintyEstimationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **UncertaintyEstimate**\n  - Methods: 0\n  - Complexity: 10\n- **BayesianInference**\n  - Methods: 0\n  - Complexity: 9\n- **UncertaintyPropagation**\n  - Methods: 0\n  - Complexity: 7\n- **CalibrationResults**\n  - Methods: 0\n  - Complexity: 9\n- **UncertaintyQuantifier** (inherits from ABC)\n  - Methods: 2\n  - Complexity: 7\n- **BayesianQuantifier** (inherits from UncertaintyQuantifier)\n  - Methods: 4\n  - Complexity: 13\n- **MonteCarloDropoutQuantifier** (inherits from UncertaintyQuantifier)\n  - Methods: 3\n  - Complexity: 14\n- **EnsembleQuantifier** (inherits from UncertaintyQuantifier)\n  - Methods: 3\n  - Complexity: 14\n- **BootstrapQuantifier** (inherits from UncertaintyQuantifier)\n  - Methods: 3\n  - Complexity: 12\n- **UncertaintyOrchestrator**\n  - Methods: 23\n  - Complexity: 134\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.gac_system.gac_config",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_config.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gac_system.gac_config\n\nAPI endpoints for independent_core.gac_system.gac_config\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **config_path** (query) *required*: string - Parameter: config_path\n- **auto_load** (query) *required*: bool - Parameter: auto_load\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config_path=example_config_path&auto_load=example_auto_load\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_path\": \"example_config_path\",\n    \"auto_load\": \"example_auto_load\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/default/config\n\n#### POST /create/default/config\n\nAPI endpoint: create_default_config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/default/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/default/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/preset/config\n\n#### POST /create/preset/config\n\nAPI endpoint: create_preset_config\n\n**Parameters:**\n\n- **preset** (query) *required*: str - Parameter: preset\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/preset/config?preset=example_preset\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/preset/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"preset\": \"example_preset\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/component/config\n\n#### GET /get/component/config\n\nAPI endpoint: get_component_config\n\n**Parameters:**\n\n- **component_id** (query) *required*: str - Parameter: component_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/config?component_id=example_component_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"component_id\": \"example_component_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/config/summary\n\n#### GET /get/config/summary\n\nAPI endpoint: get_config_summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/config/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/config/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /load/config\n\n#### POST /load/config\n\nAPI endpoint: load_config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /remove/component/config\n\n#### DELETE /remove/component/config\n\nAPI endpoint: remove_component_config\n\n**Parameters:**\n\n- **component_id** (query) *required*: str - Parameter: component_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/component/config?component_id=example_component_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/component/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"component_id\": \"example_component_id\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /save/config\n\n#### POST /save/config\n\nAPI endpoint: save_config\n\n**Parameters:**\n\n- **create_backup** (query) *required*: bool - Parameter: create_backup\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/config?create_backup=example_create_backup\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"create_backup\": \"example_create_backup\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/config\n\n#### PUT /update/config\n\nAPI endpoint: update_config\n\n**Parameters:**\n\n- **updates** (query) *required*: string - Parameter: updates\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/config?updates=example_updates\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"updates\": \"example_updates\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gac_system.gac_config\",\n    \"description\": \"API endpoints for independent_core.gac_system.gac_config\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/default/config\": {\n      \"post\": {\n        \"summary\": \"API endpoint: create_default_config\",\n        \"description\": \"API endpoint: create_default_config\",\n        \"operationId\": \"create_default_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"auto_load\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: auto_load\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/load/config\": {\n      \"post\": {\n        \"summary\": \"API endpoint: load_config\",\n        \"description\": \"API endpoint: load_config\",\n        \"operationId\": \"load_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/save/config\": {\n      \"post\": {\n        \"summary\": \"API endpoint: save_config\",\n        \"description\": \"API endpoint: save_config\",\n        \"operationId\": \"save_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"create_backup\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: create_backup\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/component/config\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_component_config\",\n        \"description\": \"API endpoint: get_component_config\",\n        \"operationId\": \"get_component_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"component_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: component_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/remove/component/config\": {\n      \"delete\": {\n        \"summary\": \"API endpoint: remove_component_config\",\n        \"description\": \"API endpoint: remove_component_config\",\n        \"operationId\": \"remove_component_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"component_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: component_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/config\": {\n      \"put\": {\n        \"summary\": \"API endpoint: update_config\",\n        \"description\": \"API endpoint: update_config\",\n        \"operationId\": \"update_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"updates\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: updates\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/preset/config\": {\n      \"post\": {\n        \"summary\": \"API endpoint: create_preset_config\",\n        \"description\": \"API endpoint: create_preset_config\",\n        \"operationId\": \"create_preset_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"preset\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: preset\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/config/summary\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_config_summary\",\n        \"description\": \"API endpoint: get_config_summary\",\n        \"operationId\": \"get_config_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"system_mode\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"debug_mode\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"max_workers\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"component_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"brain_integration\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"thresholds\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"gradient_magnitude\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"processing_time\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"error_rate\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gac_system.gac_config\n\n## Overview\n\nGAC System Configuration Management\nComprehensive configuration for Gradient Ascent Clipping system components\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_config.py`\n\n## Dependencies\n\n- pathlib\n- logging\n- enum\n- typing\n- dataclasses\n- json\n\n## Code Structure\n\n- **Total Lines:** 424\n- **Code Lines:** 361\n- **Comment Lines:** 0\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Decorators used\n\n",
        "configuration_guide": "\n# independent_core.gac_system.gac_config\n\nGAC System Configuration Management\nComprehensive configuration for Gradient Ascent Clipping system components\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_config.py\n- **Total Classes:** 12\n- **Total Functions:** 2\n- **Dependencies:** pathlib, logging, enum, typing, dataclasses, json\n\n## Contents\n**Classes (12):** GACMode, ComponentPriority, PIDConfig, MetaLearningConfig, ReinforcementLearningConfig, ThresholdConfig, MonitoringConfig, ComponentConfig, SystemConfig, IntegrationConfig, GACConfig, GACConfigManager\n**Functions (2):** create_default_config, load_config_from_file\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: GACConfigManager\n\n## Examples\nsample_time: float = 0.1\n\n\nminimum_samples: int = 10\n\nmemory_usage: float = 0.8\n\ncpu_usage: float = 0.7\n",
        "architecture": "# Architecture: independent_core.gac_system.gac_config\n\nGAC System Configuration Management\nComprehensive configuration for Gradient Ascent Clipping system components\n\n## Components Overview\n\n- **Classes:** 12\n- **Functions:** 2\n- **Dependencies:** 6\n\n## Class Hierarchy\n\n- **GACMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **ComponentPriority** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **PIDConfig**\n  - Methods: 0\n  - Complexity: 9\n- **MetaLearningConfig**\n  - Methods: 0\n  - Complexity: 12\n- **ReinforcementLearningConfig**\n  - Methods: 0\n  - Complexity: 10\n- **ThresholdConfig**\n  - Methods: 0\n  - Complexity: 11\n- **MonitoringConfig**\n  - Methods: 0\n  - Complexity: 9\n- **ComponentConfig**\n  - Methods: 0\n  - Complexity: 12\n- **SystemConfig**\n  - Methods: 0\n  - Complexity: 11\n- **IntegrationConfig**\n  - Methods: 0\n  - Complexity: 9\n- **GACConfig**\n  - Methods: 0\n  - Complexity: 9\n- **GACConfigManager**\n  - Methods: 20\n  - Complexity: 120\n## Integration Points\n\n- Class: GACConfigManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "configuration_guide missing required section: Overview",
        "configuration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.gac_system.direction_validator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/direction_validator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gac_system.direction_validator\n\nAPI endpoints for independent_core.gac_system.direction_validator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/validation/confidence\n\n#### GET /get/validation/confidence\n\nGet validation confidence without full validation\n\n**Parameters:**\n\n- **direction_state** (query) *required*: DirectionState - Parameter: direction_state\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/validation/confidence?direction_state=example_direction_state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/validation/confidence\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"direction_state\": \"example_direction_state\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/validation/summary\n\n#### GET /get/validation/summary\n\nGet comprehensive validation statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/validation/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/validation/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gac_system.direction_validator\",\n    \"description\": \"API endpoints for independent_core.gac_system.direction_validator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/validation/summary\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive validation statistics\",\n        \"description\": \"Get comprehensive validation statistics\",\n        \"operationId\": \"get_validation_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/validation/confidence\": {\n      \"get\": {\n        \"summary\": \"Get validation confidence without full validation\",\n        \"description\": \"Get validation confidence without full validation\",\n        \"operationId\": \"get_validation_confidence\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"direction_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: direction_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DirectionState\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gac_system.direction_validator\n\n## Overview\n\nGAC Direction Validator\nValidates gradient direction consistency and detects anomalies in direction patterns\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/direction_validator.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- torch\n- direction_state\n- gac_types\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 658\n- **Code Lines:** 488\n- **Comment Lines:** 59\n\n## Complexity Indicators\n\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.gac_system.direction_validator\n\nGAC Direction Validator\nValidates gradient direction consistency and detects anomalies in direction patterns\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 0\n- **Dependencies:** 10\n\n## Class Hierarchy\n\n- **ValidationResult**\n  - Methods: 0\n  - Complexity: 6\n- **AnomalyDetection**\n  - Methods: 0\n  - Complexity: 7\n- **DirectionValidationError** (inherits from Exception)\n  - Methods: 0\n  - Complexity: 2\n- **DirectionValidator**\n  - Methods: 15\n  - Complexity: 126\n## Integration Points\n\n- Function: set_direction_state_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.gac_system.gac_pid_controller",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_pid_controller.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gac_system.gac_pid_controller\n\nAPI endpoints for independent_core.gac_system.gac_pid_controller\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/gradient/threshold/pid\n\n#### POST /create/gradient/threshold/pid\n\nCreate a PID controller optimized for gradient threshold management\n\nArgs:\n    target_threshold: Target gradient threshold value\n    aggressiveness: Control aggressiveness (\"conservative\", \"moderate\", \"aggressive\")\n    \nReturns:\n    Configured PID controller\n\n**Parameters:**\n\n- **target_threshold** (query) *required*: float - Target gradient threshold value\n- **aggressiveness** (query) *required*: str - Control aggressiveness (\"conservative\", \"moderate\", \"aggressive\")\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/gradient/threshold/pid?target_threshold=example_target_threshold&aggressiveness=example_aggressiveness\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/gradient/threshold/pid\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"target_threshold\": \"example_target_threshold\",\n    \"aggressiveness\": \"example_aggressiveness\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/performance/metrics\n\n#### GET /get/performance/metrics\n\nGet current performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gac_system.gac_pid_controller\",\n    \"description\": \"API endpoints for independent_core.gac_system.gac_pid_controller\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/gradient/threshold/pid\": {\n      \"post\": {\n        \"summary\": \"Create a PID controller optimized for gradient threshold management\\n\\nArgs:\\n    target_threshold: Target gradient threshold value\\n    aggressiveness: Control aggressiveness (\\\"conservative\\\", \\\"moderate\\\", \\\"aggressive\\\")\\n    \\nReturns:\\n    Configured PID controller\",\n        \"description\": \"Create a PID controller optimized for gradient threshold management\\n\\nArgs:\\n    target_threshold: Target gradient threshold value\\n    aggressiveness: Control aggressiveness (\\\"conservative\\\", \\\"moderate\\\", \\\"aggressive\\\")\\n    \\nReturns:\\n    Configured PID controller\",\n        \"operationId\": \"create_gradient_threshold_pid\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"target_threshold\",\n            \"in\": \"query\",\n            \"description\": \"Target gradient threshold value\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"aggressiveness\",\n            \"in\": \"query\",\n            \"description\": \"Control aggressiveness (\\\"conservative\\\", \\\"moderate\\\", \\\"aggressive\\\")\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get current performance metrics\",\n        \"description\": \"Get current performance metrics\",\n        \"operationId\": \"get_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gac_system.gac_pid_controller\n\n## Overview\n\nGAC PID Controller - Adaptive threshold management using PID control\n\nThis module implements a PID (Proportional-Integral-Derivative) controller\nfor the GAC system, enabling autonomous threshold adjustment based on\ngradient behavior and system performance.\n\nFeatures:\n- Adaptive threshold tuning\n- Gradient pattern learning\n- Performance-based adjustments\n- Anti-windup protection\n- Self-tuning capabilities\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_pid_controller.py`\n\n## Dependencies\n\n- logging\n- dataclasses\n- typing\n- time\n\n## Code Structure\n\n- **Total Lines:** 225\n- **Code Lines:** 154\n- **Comment Lines:** 24\n\n## Complexity Indicators\n\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.gac_system.direction_state",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/direction_state.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gac_system.direction_state\n\nAPI endpoints for independent_core.gac_system.direction_state\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/current/state\n\n#### GET /get/current/state\n\nGet current direction state\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/current/state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/current/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/direction/summary\n\n#### GET /get/direction/summary\n\nGet comprehensive direction state summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/direction/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/direction/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/direction/trend\n\n#### GET /get/direction/trend\n\nGet dominant direction trend over recent history\n\n**Parameters:**\n\n- **window_size** (query) *required*: int - Parameter: window_size\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/direction/trend?window_size=example_window_size\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/direction/trend\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"window_size\": \"example_window_size\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /update/direction/state\n\n#### PUT /update/direction/state\n\nUpdate direction state based on new gradients\n\n**Parameters:**\n\n- **gradients** (query) *required*: Tensor - Parameter: gradients\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/direction/state?gradients=example_gradients&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/direction/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"gradients\": \"example_gradients\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gac_system.direction_state\",\n    \"description\": \"API endpoints for independent_core.gac_system.direction_state\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/direction/state\": {\n      \"put\": {\n        \"summary\": \"Update direction state based on new gradients\",\n        \"description\": \"Update direction state based on new gradients\",\n        \"operationId\": \"update_direction_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"gradients\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: gradients\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Tensor\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/direction/summary\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive direction state summary\",\n        \"description\": \"Get comprehensive direction state summary\",\n        \"operationId\": \"get_direction_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/current/state\": {\n      \"get\": {\n        \"summary\": \"Get current direction state\",\n        \"description\": \"Get current direction state\",\n        \"operationId\": \"get_current_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/direction/trend\": {\n      \"get\": {\n        \"summary\": \"Get dominant direction trend over recent history\",\n        \"description\": \"Get dominant direction trend over recent history\",\n        \"operationId\": \"get_direction_trend\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"window_size\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: window_size\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gac_system.direction_state\n\n## Overview\n\nGAC Direction State Management\nManages gradient direction tracking and state transitions for the GAC system\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/direction_state.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- torch\n- gac_types\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 486\n- **Code Lines:** 344\n- **Comment Lines:** 51\n\n## Complexity Indicators\n\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.gac_system.gac_types",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_types.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.gac_system.gac_types",
        "developer_guide": "# Developer Guide: independent_core.gac_system.gac_types\n\n## Overview\n\nGAC Types - Data structures for gradient ascent clipping system\n\nThis module defines all data structures, enums, and type definitions\nused throughout the GAC system for gradient information, events,\nand component state management.\n\nTypes:\n- ComponentState: Enum for component lifecycle states\n- EventType: Enum for system event types  \n- GACEvent: Event data structure\n- ComponentMetrics: Performance metrics structure\n- PIDState: PID controller state information\n- DirectionType: Enum for gradient direction types\n- DirectionState: Direction state information\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_types.py`\n\n## Dependencies\n\n- gradient_ascent_clipping\n- enum\n- typing\n- torch\n- dataclasses\n\n## Code Structure\n\n- **Total Lines:** 61\n- **Code Lines:** 48\n- **Comment Lines:** 5\n\n## Complexity Indicators\n\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.gac_system.gac_integration_example",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_integration_example.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gac_system.gac_integration_example\n\nAPI endpoints for independent_core.gac_system.gac_integration_example\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/example/config\n\n#### POST /create/example/config\n\nCreate an example GAC configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/example/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/example/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/component/info\n\n#### GET /get/component/info\n\nAPI endpoint: get_component_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gac_system.gac_integration_example\",\n    \"description\": \"API endpoints for independent_core.gac_system.gac_integration_example\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/example/config\": {\n      \"post\": {\n        \"summary\": \"Create an example GAC configuration\",\n        \"description\": \"Create an example GAC configuration\",\n        \"operationId\": \"create_example_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/component/info\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_component_info\",\n        \"description\": \"API endpoint: get_component_info\",\n        \"operationId\": \"get_component_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"component_type\": {\n                      \"type\": \"string\"\n                    },\n                    \"patterns_analyzed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"avg_norm\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"avg_sparsity\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gac_system.gac_integration_example\n\n## Overview\n\nGAC System Integration Examples\nDemonstrates how to integrate and use the GAC system with the Brain\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_integration_example.py`\n\n## Dependencies\n\n- pathlib\n- brain\n- sys\n- logging\n- gac_system.gac_config\n- torch\n- asyncio\n- traceback\n- gac_system.gac_components\n- json\n- gac_system.gradient_ascent_clipping\n- os\n\n## Code Structure\n\n- **Total Lines:** 412\n- **Code Lines:** 284\n- **Comment Lines:** 42\n\n## Complexity Indicators\n\n- Async programming\n\n",
        "integration_guide": "\n# independent_core.gac_system.gac_integration_example\n\nGAC System Integration Examples\nDemonstrates how to integrate and use the GAC system with the Brain\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_integration_example.py\n- **Total Classes:** 1\n- **Total Functions:** 6\n- **Dependencies:** pathlib, brain, sys, logging, gac_system.gac_config, torch, asyncio, traceback, gac_system.gac_components, json, gac_system.gradient_ascent_clipping, os\n\n## Contents\n**Classes (1):** CustomGradientAnalyzer\n**Functions (6):** create_example_config, custom_pre_training_hook, custom_post_training_hook, custom_gradient_hook, custom_error_hook, capture_events\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nGAC System Integration Examples\n\nDemonstrates how to integrate and use the GAC system with the Brain\n\"\"\"\n\n\ndef create_example_config():\n\n\"\"\"Create an example GAC configuration\"\"\"\n\nasync def basic_gac_integration_example():\n\n\"\"\"Basic example of integrating GAC with Brain\"\"\"\n\nprint(\"Basic GAC Integration Example\")\n\nbase_path=Path(\"./example_brain\"),\n\ngac_config = create_example_config()\n\n# Add some example components\n\n# Example gradient processing\n\ntest_gradient = torch.randn(50, 50) * 3.0  # Large gradient for demonstration\n\ncheckpoint_success = brain.create_gac_checkpoint(\"./example_checkpoints\")\n\nprint(f\"Error in basic example: {e}\")\n\nasync def advanced_gac_training_example():\n\n\"\"\"Advanced example showing GAC integration during training\"\"\"\n\nprint(\"Advanced GAC Training Integration Example\")\n\n# Simulate training with example data\n\nexample_training_data = {\n\ntraining_data=example_training_data,\n\nprint(f\"Error in advanced example: {e}\")\n\nasync def custom_component_example():\n\n\"\"\"Example of creating and using custom GAC components\"\"\"\n\nprint(\"Custom GAC Component Example\")\n\nprint(f\"Error in custom component example: {e}\")\n\nasync def configuration_management_example():\n\n\"\"\"Example of GAC configuration management\"\"\"\n\nprint(\"GAC Configuration Management Example\")\n\nconfig_manager = GACConfigManager(\"./example_gac_config.json\", auto_load=False)\n\n# Apply different presets\n\nconfig_path = f\"./example_config_{preset}.json\"\n\nprint(f\"Error in configuration example: {e}\")\n\nasync def performance_monitoring_example():\n\n\"\"\"Example of GAC performance monitoring and metrics\"\"\"\n\nprint(\"GAC Performance Monitoring Example\")\n\nprint(f\"Error in monitoring example: {e}\")\n\n\"\"\"Run all examples\"\"\"\n\nprint(\"GAC System Integration Examples\")\n\nexamples = [\n\n(\"Basic Integration\", basic_gac_integration_example),\n\n(\"Advanced Training Integration\", advanced_gac_training_example),\n\n(\"Custom Components\", custom_component_example),\n\n(\"Configuration Management\", configuration_management_example),\n\n(\"Performance Monitoring\", performance_monitoring_example)\n\nfor name, example_func in examples:\n\nawait example_func()\n\nprint(f\"Example '{name}' failed: {e}\")\n\nprint(\"All examples completed!\")\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.gac_system.gac_components",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_components.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gac_system.gac_components\n\nAPI endpoints for independent_core.gac_system.gac_components\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/default/components\n\n#### POST /create/default/components\n\nCreate a default set of GAC components\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/default/components\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/default/components\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/production/components\n\n#### POST /create/production/components\n\nCreate a production-ready set of GAC components\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/production/components\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/production/components\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/component/info\n\n#### GET /get/component/info\n\nAPI endpoint: get_component_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/component/info\n\nAPI endpoint: get_component_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/component/info\n\nAPI endpoint: get_component_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/component/info\n\nAPI endpoint: get_component_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/component/info\n\nAPI endpoint: get_component_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/component/info\n\nAPI endpoint: get_component_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gac_system.gac_components\",\n    \"description\": \"API endpoints for independent_core.gac_system.gac_components\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/default/components\": {\n      \"post\": {\n        \"summary\": \"Create a default set of GAC components\",\n        \"description\": \"Create a default set of GAC components\",\n        \"operationId\": \"create_default_components\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/create/production/components\": {\n      \"post\": {\n        \"summary\": \"Create a production-ready set of GAC components\",\n        \"description\": \"Create a production-ready set of GAC components\",\n        \"operationId\": \"create_production_components\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/component/info\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_component_info\",\n        \"description\": \"API endpoint: get_component_info\",\n        \"operationId\": \"get_component_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"component_type\": {\n                      \"type\": \"string\"\n                    },\n                    \"statistics_window\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"gradients_monitored\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"average_gradient_norm\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"alert_thresholds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"current_health\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gac_system.gac_components\n\n## Overview\n\nGAC System Components\nExample component implementations for the Gradient Ascent Clipping system\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gac_components.py`\n\n## Dependencies\n\n- numpy\n- gradient_ascent_clipping\n- logging\n- typing\n- abc\n- torch\n- asyncio\n- torch.nn\n- time\n\n## Code Structure\n\n- **Total Lines:** 469\n- **Code Lines:** 361\n- **Comment Lines:** 18\n\n## Complexity Indicators\n\n- High class count\n- Async programming\n\n",
        "architecture": "# Architecture: independent_core.gac_system.gac_components\n\nGAC System Components\nExample component implementations for the Gradient Ascent Clipping system\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 2\n- **Dependencies:** 9\n\n## Class Hierarchy\n\n- **GradientClippingComponent** (inherits from GACComponent)\n  - Methods: 2\n  - Complexity: 12\n- **GradientNoiseComponent** (inherits from GACComponent)\n  - Methods: 2\n  - Complexity: 11\n- **GradientNormalizationComponent** (inherits from GACComponent)\n  - Methods: 2\n  - Complexity: 9\n- **GradientAccumulationComponent** (inherits from GACComponent)\n  - Methods: 2\n  - Complexity: 11\n- **GradientCompressionComponent** (inherits from GACComponent)\n  - Methods: 2\n  - Complexity: 10\n- **GradientMonitoringComponent** (inherits from GACComponent)\n  - Methods: 2\n  - Complexity: 15\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.gac_system.enhanced_bounder",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/enhanced_bounder.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gac_system.enhanced_bounder\n\nAPI endpoints for independent_core.gac_system.enhanced_bounder\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/direction/bounds\n\n#### GET /get/direction/bounds\n\nGet current bounds for a specific direction\n\n**Parameters:**\n\n- **direction** (query) *required*: DirectionType - Parameter: direction\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/direction/bounds?direction=example_direction\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/direction/bounds\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"direction\": \"example_direction\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/enhanced/statistics\n\n#### GET /get/enhanced/statistics\n\nGet comprehensive enhanced bounding statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/enhanced/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/enhanced/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/optimal/bounds/recommendation\n\n#### GET /get/optimal/bounds/recommendation\n\nGet recommendations for optimal bounding parameters\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimal/bounds/recommendation\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimal/bounds/recommendation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/direction/bounds\n\n#### PUT /update/direction/bounds\n\nUpdate direction-specific bounding parameters\n\n**Parameters:**\n\n- **direction** (query) *required*: DirectionType - Parameter: direction\n- **new_bounds** (query) *required*: string - Parameter: new_bounds\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/direction/bounds?direction=example_direction&new_bounds=example_new_bounds\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/direction/bounds\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"direction\": \"example_direction\",\n    \"new_bounds\": \"example_new_bounds\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gac_system.enhanced_bounder\",\n    \"description\": \"API endpoints for independent_core.gac_system.enhanced_bounder\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/enhanced/statistics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive enhanced bounding statistics\",\n        \"description\": \"Get comprehensive enhanced bounding statistics\",\n        \"operationId\": \"get_enhanced_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/direction/bounds\": {\n      \"put\": {\n        \"summary\": \"Update direction-specific bounding parameters\",\n        \"description\": \"Update direction-specific bounding parameters\",\n        \"operationId\": \"update_direction_bounds\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"direction\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: direction\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DirectionType\"\n            }\n          },\n          {\n            \"name\": \"new_bounds\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: new_bounds\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/direction/bounds\": {\n      \"get\": {\n        \"summary\": \"Get current bounds for a specific direction\",\n        \"description\": \"Get current bounds for a specific direction\",\n        \"operationId\": \"get_direction_bounds\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"direction\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: direction\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DirectionType\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/optimal/bounds/recommendation\": {\n      \"get\": {\n        \"summary\": \"Get recommendations for optimal bounding parameters\",\n        \"description\": \"Get recommendations for optimal bounding parameters\",\n        \"operationId\": \"get_optimal_bounds_recommendation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gac_system.enhanced_bounder\n\n## Overview\n\nGAC Enhanced Direction-Aware Gradient Bounder\nEnhanced gradient bounding with direction awareness and adaptive clipping\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/enhanced_bounder.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- basic_bounder\n- torch\n- direction_state\n- gac_types\n- dataclasses\n- direction_validator\n- time\n\n## Code Structure\n\n- **Total Lines:** 573\n- **Code Lines:** 431\n- **Comment Lines:** 51\n\n## Complexity Indicators\n\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.gac_system.gradient_ascent_clipping",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gradient_ascent_clipping.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gac_system.gradient_ascent_clipping\n\nAPI endpoints for independent_core.gac_system.gradient_ascent_clipping\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **gac_system** (query) *required*: GACSystem - Parameter: gac_system\n- **max_queue_size** (query) *required*: int - Parameter: max_queue_size\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?gac_system=example_gac_system&max_queue_size=example_max_queue_size\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"gac_system\": \"example_gac_system\",\n    \"max_queue_size\": \"example_max_queue_size\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //run/gac/thread\n\n#### POST //run/gac/thread\n\nMain GAC thread function with asyncio event loop\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//run/gac/thread\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//run/gac/thread\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /create/checkpoint\n\n#### POST /create/checkpoint\n\nAPI endpoint: create_checkpoint\n\n**Parameters:**\n\n- **checkpoint_path** (query) *required*: str - Parameter: checkpoint_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/checkpoint?checkpoint_path=example_checkpoint_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"checkpoint_path\": \"example_checkpoint_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/gac/system\n\n#### POST /create/gac/system\n\nAPI endpoint: create_gac_system\n\n**Parameters:**\n\n- **config_input** (query) *required*: string - Parameter: config_input\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/gac/system?config_input=example_config_input\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/gac/system\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_input\": \"example_config_input\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/all/components\n\n#### GET /get/all/components\n\nAPI endpoint: get_all_components\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/all/components\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/all/components\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/basic/bounder\n\n#### GET /get/basic/bounder\n\nGet the basic gradient bounder instance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/basic/bounder\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/basic/bounder\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/component\n\n#### GET /get/component\n\nAPI endpoint: get_component\n\n**Parameters:**\n\n- **component_id** (query) *required*: str - Parameter: component_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component?component_id=example_component_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"component_id\": \"example_component_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/component/info\n\n#### GET /get/component/info\n\nAPI endpoint: get_component_info\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/component/info\n\nGet component information and statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/component/status\n\n#### GET /get/component/status\n\nAPI endpoint: get_component_status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/components/by/group\n\n#### GET /get/components/by/group\n\nAPI endpoint: get_components_by_group\n\n**Parameters:**\n\n- **group** (query) *required*: str - Parameter: group\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/components/by/group?group=example_group\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/components/by/group\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"group\": \"example_group\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/direction/components/status\n\n#### GET /get/direction/components/status\n\nGet comprehensive status of all direction components\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/direction/components/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/direction/components/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/direction/state/manager\n\n#### GET /get/direction/state/manager\n\nGet the direction state manager instance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/direction/state/manager\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/direction/state/manager\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/direction/validator\n\n#### GET /get/direction/validator\n\nGet the direction validator instance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/direction/validator\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/direction/validator\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/enhanced/bounder\n\n#### GET /get/enhanced/bounder\n\nGet the enhanced gradient bounder instance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/enhanced/bounder\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/enhanced/bounder\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/event/history\n\n#### GET /get/event/history\n\nAPI endpoint: get_event_history\n\n**Parameters:**\n\n- **event_type** (query) *required*: string - Parameter: event_type\n- **source_component** (query) *required*: string - Parameter: source_component\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/event/history?event_type=example_event_type&source_component=example_source_component\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/event/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"event_type\": \"example_event_type\",\n    \"source_component\": \"example_source_component\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/execution/order\n\n#### GET /get/execution/order\n\nAPI endpoint: get_execution_order\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/execution/order\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/execution/order\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/gac/stats\n\n#### GET /get/gac/stats\n\nGet GAC system statistics including thread manager stats\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/gac/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/gac/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/state/representation\n\n#### GET /get/state/representation\n\nAPI endpoint: get_state_representation\n\n**Parameters:**\n\n- **system_metrics** (query) *required*: string - Parameter: system_metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/state/representation?system_metrics=example_system_metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/state/representation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"system_metrics\": \"example_system_metrics\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/stats\n\n#### GET /get/stats\n\nGet processing statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/system/metrics\n\n#### GET /get/system/metrics\n\nAPI endpoint: get_system_metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/system/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/system/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /load/system/state\n\n#### POST /load/system/state\n\nAPI endpoint: load_system_state\n\n**Parameters:**\n\n- **filepath** (query) *required*: str - Parameter: filepath\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/system/state?filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/system/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /process/gradients/sync\n\n#### POST /process/gradients/sync\n\nSynchronous interface for gradient processing\n\n**Parameters:**\n\n- **gradients** (query) *required*: string - Parameter: gradients\n- **timeout** (query) *required*: float - Parameter: timeout\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/process/gradients/sync?gradients=example_gradients&timeout=example_timeout&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/gradients/sync\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"gradients\": \"example_gradients\",\n    \"timeout\": \"example_timeout\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /restore/checkpoint\n\n#### POST /restore/checkpoint\n\nAPI endpoint: restore_checkpoint\n\n**Parameters:**\n\n- **checkpoint_path** (query) *required*: str - Parameter: checkpoint_path\n- **timestamp** (query) *required*: int - Parameter: timestamp\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/restore/checkpoint?checkpoint_path=example_checkpoint_path&timestamp=example_timestamp\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/restore/checkpoint\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"checkpoint_path\": \"example_checkpoint_path\",\n    \"timestamp\": \"example_timestamp\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/system/state\n\n#### POST /save/system/state\n\nAPI endpoint: save_system_state\n\n**Parameters:**\n\n- **filepath** (query) *required*: str - Parameter: filepath\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/system/state?filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/system/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/q/value\n\n#### PUT /update/q/value\n\nAPI endpoint: update_q_value\n\n**Parameters:**\n\n- **state** (query) *required*: str - Parameter: state\n- **action** (query) *required*: str - Parameter: action\n- **reward** (query) *required*: float - Parameter: reward\n- **next_state** (query) *required*: str - Parameter: next_state\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/q/value?state=example_state&action=example_action&reward=example_reward&next_state=example_next_state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/q/value\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"state\": \"example_state\",\n    \"action\": \"example_action\",\n    \"reward\": \"example_reward\",\n    \"next_state\": \"example_next_state\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/state\n\n#### PUT /update/state\n\nAPI endpoint: update_state\n\n**Parameters:**\n\n- **new_state** (query) *required*: ComponentState - Parameter: new_state\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/state?new_state=example_new_state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/state\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"new_state\": \"example_new_state\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gac_system.gradient_ascent_clipping\",\n    \"description\": \"API endpoints for independent_core.gac_system.gradient_ascent_clipping\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/gac/system\": {\n      \"post\": {\n        \"summary\": \"API endpoint: create_gac_system\",\n        \"description\": \"API endpoint: create_gac_system\",\n        \"operationId\": \"create_gac_system\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_input\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_input\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/component/info\": {\n      \"get\": {\n        \"summary\": \"Get component information and statistics\",\n        \"description\": \"Get component information and statistics\",\n        \"operationId\": \"get_component_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/state\": {\n      \"put\": {\n        \"summary\": \"API endpoint: update_state\",\n        \"description\": \"API endpoint: update_state\",\n        \"operationId\": \"update_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"new_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: new_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ComponentState\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/event/history\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_event_history\",\n        \"description\": \"API endpoint: get_event_history\",\n        \"operationId\": \"get_event_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"event_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: event_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"source_component\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: source_component\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/component\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_component\",\n        \"description\": \"API endpoint: get_component\",\n        \"operationId\": \"get_component\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"component_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: component_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/components/by/group\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_components_by_group\",\n        \"description\": \"API endpoint: get_components_by_group\",\n        \"operationId\": \"get_components_by_group\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"group\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: group\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/all/components\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_all_components\",\n        \"description\": \"API endpoint: get_all_components\",\n        \"operationId\": \"get_all_components\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/execution/order\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_execution_order\",\n        \"description\": \"API endpoint: get_execution_order\",\n        \"operationId\": \"get_execution_order\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/state/representation\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_state_representation\",\n        \"description\": \"API endpoint: get_state_representation\",\n        \"operationId\": \"get_state_representation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"system_metrics\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: system_metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/q/value\": {\n      \"put\": {\n        \"summary\": \"API endpoint: update_q_value\",\n        \"description\": \"API endpoint: update_q_value\",\n        \"operationId\": \"update_q_value\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"action\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: action\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"reward\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: reward\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"next_state\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: next_state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/system/metrics\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_system_metrics\",\n        \"description\": \"API endpoint: get_system_metrics\",\n        \"operationId\": \"get_system_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"system_state\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_components\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_components\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"overall_performance\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"system_load\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"uptime\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"thresholds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance_metrics\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/save/system/state\": {\n      \"post\": {\n        \"summary\": \"API endpoint: save_system_state\",\n        \"description\": \"API endpoint: save_system_state\",\n        \"operationId\": \"save_system_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: filepath\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/load/system/state\": {\n      \"post\": {\n        \"summary\": \"API endpoint: load_system_state\",\n        \"description\": \"API endpoint: load_system_state\",\n        \"operationId\": \"load_system_state\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: filepath\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/component/status\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_component_status\",\n        \"description\": \"API endpoint: get_component_status\",\n        \"operationId\": \"get_component_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/checkpoint\": {\n      \"post\": {\n        \"summary\": \"API endpoint: create_checkpoint\",\n        \"description\": \"API endpoint: create_checkpoint\",\n        \"operationId\": \"create_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"checkpoint_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: checkpoint_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/restore/checkpoint\": {\n      \"post\": {\n        \"summary\": \"API endpoint: restore_checkpoint\",\n        \"description\": \"API endpoint: restore_checkpoint\",\n        \"operationId\": \"restore_checkpoint\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"checkpoint_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: checkpoint_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"timestamp\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: timestamp\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/gac/stats\": {\n      \"get\": {\n        \"summary\": \"Get GAC system statistics including thread manager stats\",\n        \"description\": \"Get GAC system statistics including thread manager stats\",\n        \"operationId\": \"get_gac_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/direction/state/manager\": {\n      \"get\": {\n        \"summary\": \"Get the direction state manager instance\",\n        \"description\": \"Get the direction state manager instance\",\n        \"operationId\": \"get_direction_state_manager\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/direction/validator\": {\n      \"get\": {\n        \"summary\": \"Get the direction validator instance\",\n        \"description\": \"Get the direction validator instance\",\n        \"operationId\": \"get_direction_validator\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/basic/bounder\": {\n      \"get\": {\n        \"summary\": \"Get the basic gradient bounder instance\",\n        \"description\": \"Get the basic gradient bounder instance\",\n        \"operationId\": \"get_basic_bounder\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/enhanced/bounder\": {\n      \"get\": {\n        \"summary\": \"Get the enhanced gradient bounder instance\",\n        \"description\": \"Get the enhanced gradient bounder instance\",\n        \"operationId\": \"get_enhanced_bounder\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/direction/components/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive status of all direction components\",\n        \"description\": \"Get comprehensive status of all direction components\",\n        \"operationId\": \"get_direction_components_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"components_available\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"direction_state_manager\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"initialized\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"summary\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"direction_validator\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"initialized\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"summary\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"basic_bounder\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"initialized\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"statistics\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"enhanced_bounder\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"initialized\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"statistics\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"health_status\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"gac_system\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: gac_system\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"GACSystem\"\n            }\n          },\n          {\n            \"name\": \"max_queue_size\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: max_queue_size\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//run/gac/thread\": {\n      \"post\": {\n        \"summary\": \"Main GAC thread function with asyncio event loop\",\n        \"description\": \"Main GAC thread function with asyncio event loop\",\n        \"operationId\": \"_run_gac_thread\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/process/gradients/sync\": {\n      \"post\": {\n        \"summary\": \"Synchronous interface for gradient processing\",\n        \"description\": \"Synchronous interface for gradient processing\",\n        \"operationId\": \"process_gradients_sync\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"gradients\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: gradients\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"timeout\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: timeout\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/stats\": {\n      \"get\": {\n        \"summary\": \"Get processing statistics\",\n        \"description\": \"Get processing statistics\",\n        \"operationId\": \"get_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"running\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"processed_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"failed_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"success_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"avg_processing_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"queue_sizes\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"request_queue\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"response_queue\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gac_system.gradient_ascent_clipping\n\n## Overview\n\nGradient Ascent Clipping (GAC) System Implementation\nZero-oversight autonomous gradient management with PID controllers, meta-learning, and RL components\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/gradient_ascent_clipping.py`\n\n## Dependencies\n\n- pathlib\n- basic_bounder\n- torch.nn\n- enhanced_bounder\n- threading\n- json\n- time\n- numpy\n- enum\n- uuid\n- torch\n- direction_validator\n- typing\n- abc\n- pickle\n- queue\n- concurrent.futures\n- logging\n- asyncio\n- direction_state\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1239\n- **Code Lines:** 957\n- **Comment Lines:** 49\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Async programming\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.gac_system.gradient_ascent_clipping\n\nGradient Ascent Clipping (GAC) System Implementation\nZero-oversight autonomous gradient management with PID controllers, meta-learning, and RL components\n\n## Components Overview\n\n- **Classes:** 15\n- **Functions:** 2\n- **Dependencies:** 22\n\n## Class Hierarchy\n\n- **ComponentState** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **EventType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **GACEvent**\n  - Methods: 0\n  - Complexity: 5\n- **ComponentMetrics**\n  - Methods: 0\n  - Complexity: 6\n- **PIDState**\n  - Methods: 0\n  - Complexity: 6\n- **GACComponent** (inherits from ABC)\n  - Methods: 6\n  - Complexity: 22\n- **EventBus**\n  - Methods: 5\n  - Complexity: 22\n- **ComponentRegistry**\n  - Methods: 8\n  - Complexity: 37\n- **MetaLearningEngine**\n  - Methods: 3\n  - Complexity: 13\n- **ReinforcementLearningAgent**\n  - Methods: 4\n  - Complexity: 14\n- **DirectionAwareGradientComponent** (inherits from GACComponent)\n  - Methods: 2\n  - Complexity: 12\n- **GACSystem**\n  - Methods: 32\n  - Complexity: 149\n- **GradientRequest**\n  - Methods: 0\n  - Complexity: 5\n- **GradientResponse**\n  - Methods: 0\n  - Complexity: 7\n- **GACThreadManager**\n  - Methods: 6\n  - Complexity: 38\n## Integration Points\n\n- Class: GACThreadManager\n- Function: register_event_handler\n- Function: _setup_event_handlers\n- Function: initialize_thread_manager\n- Function: get_direction_state_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.gac_system.basic_bounder",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/basic_bounder.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.gac_system.basic_bounder\n\nAPI endpoints for independent_core.gac_system.basic_bounder\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/bounding/statistics\n\n#### GET /get/bounding/statistics\n\nGet comprehensive bounding statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/bounding/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/bounding/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/recommended/bounds\n\n#### GET /get/recommended/bounds\n\nGet recommended bounding parameters based on gradient characteristics\n\n**Parameters:**\n\n- **gradients** (query) *required*: Tensor - Parameter: gradients\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/recommended/bounds?gradients=example_gradients\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/recommended/bounds\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"gradients\": \"example_gradients\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /update/config\n\n#### PUT /update/config\n\nUpdate configuration parameters\n\n**Parameters:**\n\n- **new_config** (query) *required*: string - Parameter: new_config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/config?new_config=example_new_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"new_config\": \"example_new_config\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.gac_system.basic_bounder\",\n    \"description\": \"API endpoints for independent_core.gac_system.basic_bounder\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/bounding/statistics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive bounding statistics\",\n        \"description\": \"Get comprehensive bounding statistics\",\n        \"operationId\": \"get_bounding_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/config\": {\n      \"put\": {\n        \"summary\": \"Update configuration parameters\",\n        \"description\": \"Update configuration parameters\",\n        \"operationId\": \"update_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"new_config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: new_config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/recommended/bounds\": {\n      \"get\": {\n        \"summary\": \"Get recommended bounding parameters based on gradient characteristics\",\n        \"description\": \"Get recommended bounding parameters based on gradient characteristics\",\n        \"operationId\": \"get_recommended_bounds\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"gradients\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: gradients\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Tensor\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.gac_system.basic_bounder\n\n## Overview\n\nGAC Basic Gradient Bounder\nBasic gradient bounding functionality for the GAC Direction Components system\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/gac_system/basic_bounder.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- torch\n- direction_state\n- gac_types\n- dataclasses\n- direction_validator\n- time\n\n## Code Structure\n\n- **Total Lines:** 421\n- **Code Lines:** 321\n- **Comment Lines:** 31\n\n## Complexity Indicators\n\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.proof_system.proof_strategies.strategy_base",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/proof_strategies/strategy_base.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.proof_system.proof_strategies.strategy_base\n\nAPI endpoints for independent_core.proof_system.proof_strategies.strategy_base\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //generate/cache/key\n\n#### POST //generate/cache/key\n\nGenerate cache key for input data\n\n**Parameters:**\n\n- **input_data** (query) *required*: string - Parameter: input_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/cache/key?input_data=example_input_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/cache/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/cache/statistics\n\n#### GET /get/cache/statistics\n\nGet cache statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/cache/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/cache/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/metrics\n\n#### GET /get/performance/metrics\n\nGet current performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/strategy/info\n\n#### GET /get/strategy/info\n\nGet comprehensive strategy information\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/strategy/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/strategy/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/sub/strategy\n\n#### GET /get/sub/strategy\n\nGet a sub-strategy by name\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/sub/strategy?name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/sub/strategy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/sub/strategy/info\n\n#### GET /get/sub/strategy/info\n\nGet information about all sub-strategies\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/sub/strategy/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/sub/strategy/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /remove/sub/strategy\n\n#### DELETE /remove/sub/strategy\n\nRemove a sub-strategy\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/sub/strategy?name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/sub/strategy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.proof_system.proof_strategies.strategy_base\",\n    \"description\": \"API endpoints for independent_core.proof_system.proof_strategies.strategy_base\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get current performance metrics\",\n        \"description\": \"Get current performance metrics\",\n        \"operationId\": \"get_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/strategy/info\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive strategy information\",\n        \"description\": \"Get comprehensive strategy information\",\n        \"operationId\": \"get_strategy_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"strategy_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"strategy_class\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"config\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"max_iterations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"timeout_seconds\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"confidence_threshold\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"validation_required\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"parallel_execution\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"cache_results\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"performance_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"current_execution_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"is_executing\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/remove/sub/strategy\": {\n      \"delete\": {\n        \"summary\": \"Remove a sub-strategy\",\n        \"description\": \"Remove a sub-strategy\",\n        \"operationId\": \"remove_sub_strategy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/sub/strategy\": {\n      \"get\": {\n        \"summary\": \"Get a sub-strategy by name\",\n        \"description\": \"Get a sub-strategy by name\",\n        \"operationId\": \"get_sub_strategy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/sub/strategy/info\": {\n      \"get\": {\n        \"summary\": \"Get information about all sub-strategies\",\n        \"description\": \"Get information about all sub-strategies\",\n        \"operationId\": \"get_sub_strategy_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/cache/key\": {\n      \"post\": {\n        \"summary\": \"Generate cache key for input data\",\n        \"description\": \"Generate cache key for input data\",\n        \"operationId\": \"_generate_cache_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/cache/statistics\": {\n      \"get\": {\n        \"summary\": \"Get cache statistics\",\n        \"description\": \"Get cache statistics\",\n        \"operationId\": \"get_cache_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"hit_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"miss_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"hits\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"misses\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"evictions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_size_bytes\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.proof_system.proof_strategies.strategy_base\n\n## Overview\n\nStrategy Base Classes - Base classes for all proof strategies\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/proof_strategies/strategy_base.py`\n\n## Dependencies\n\n- os\n- sys\n- strategy_cache\n- logging\n- typing\n- uuid\n- abc\n- hashlib\n- threading\n- dataclasses\n- json\n- time\n\n## Code Structure\n\n- **Total Lines:** 503\n- **Code Lines:** 376\n- **Comment Lines:** 33\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.proof_system.proof_strategies.strategy_base\n\nStrategy Base Classes - Base classes for all proof strategies\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 2\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **StrategyConfig**\n  - Methods: 1\n  - Complexity: 18\n- **StrategyResult**\n  - Methods: 1\n  - Complexity: 24\n- **ProofStrategy** (inherits from ABC)\n  - Methods: 10\n  - Complexity: 40\n- **ComposableStrategy** (inherits from ProofStrategy)\n  - Methods: 6\n  - Complexity: 28\n- **CachingStrategy** (inherits from ProofStrategy)\n  - Methods: 7\n  - Complexity: 30\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.proof_system.proof_strategies.adaptive_strategy",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/proof_strategies/adaptive_strategy.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.proof_system.proof_strategies.adaptive_strategy\n\nAPI endpoints for independent_core.proof_system.proof_strategies.adaptive_strategy\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //analyze/context\n\n#### POST //analyze/context\n\nAnalyze input context for approach selection\n\n**Parameters:**\n\n- **input_data** (query) *required*: string - Parameter: input_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//analyze/context?input_data=example_input_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//analyze/context\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //context/to/pattern/key\n\n#### POST //context/to/pattern/key\n\nConvert context to pattern key\n\n**Parameters:**\n\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//context/to/pattern/key?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//context/to/pattern/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //estimate/problem/complexity\n\n#### POST //estimate/problem/complexity\n\nEstimate problem complexity\n\n**Parameters:**\n\n- **input_data** (query) *required*: string - Parameter: input_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//estimate/problem/complexity?input_data=example_input_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//estimate/problem/complexity\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //identify/domain\n\n#### POST //identify/domain\n\nIdentify problem domain\n\n**Parameters:**\n\n- **input_data** (query) *required*: string - Parameter: input_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//identify/domain?input_data=example_input_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//identify/domain\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //input/to/pattern/key\n\n#### POST //input/to/pattern/key\n\nConvert input to pattern key for similarity matching\n\n**Parameters:**\n\n- **input_data** (query) *required*: string - Parameter: input_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//input/to/pattern/key?input_data=example_input_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//input/to/pattern/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /estimate/complexity\n\n#### POST /estimate/complexity\n\nEstimate computational complexity\n\n**Parameters:**\n\n- **input_data** (query) *required*: string - Parameter: input_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/estimate/complexity?input_data=example_input_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/estimate/complexity\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/depth\n\n#### GET /get/depth\n\nAPI endpoint: get_depth\n\n**Parameters:**\n\n- **obj** (query) *required*: string - Parameter: obj\n- **current_depth** (query) *required*: string - Parameter: current_depth\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/depth?obj=example_obj&current_depth=example_current_depth\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/depth\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"obj\": \"example_obj\",\n    \"current_depth\": \"example_current_depth\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.proof_system.proof_strategies.adaptive_strategy\",\n    \"description\": \"API endpoints for independent_core.proof_system.proof_strategies.adaptive_strategy\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/estimate/complexity\": {\n      \"post\": {\n        \"summary\": \"Estimate computational complexity\",\n        \"description\": \"Estimate computational complexity\",\n        \"operationId\": \"estimate_complexity\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"estimated_iterations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"estimated_time_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"problem_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"constraint_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"complexity_class\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//analyze/context\": {\n      \"post\": {\n        \"summary\": \"Analyze input context for approach selection\",\n        \"description\": \"Analyze input context for approach selection\",\n        \"operationId\": \"_analyze_context\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//context/to/pattern/key\": {\n      \"post\": {\n        \"summary\": \"Convert context to pattern key\",\n        \"description\": \"Convert context to pattern key\",\n        \"operationId\": \"_context_to_pattern_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//estimate/problem/complexity\": {\n      \"post\": {\n        \"summary\": \"Estimate problem complexity\",\n        \"description\": \"Estimate problem complexity\",\n        \"operationId\": \"_estimate_problem_complexity\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//input/to/pattern/key\": {\n      \"post\": {\n        \"summary\": \"Convert input to pattern key for similarity matching\",\n        \"description\": \"Convert input to pattern key for similarity matching\",\n        \"operationId\": \"_input_to_pattern_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//identify/domain\": {\n      \"post\": {\n        \"summary\": \"Identify problem domain\",\n        \"description\": \"Identify problem domain\",\n        \"operationId\": \"_identify_domain\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: input_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/depth\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_depth\",\n        \"description\": \"API endpoint: get_depth\",\n        \"operationId\": \"get_depth\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"obj\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: obj\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"current_depth\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: current_depth\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.proof_system.proof_strategies.adaptive_strategy\n\n## Overview\n\nAdaptive Strategy - Adaptive proof strategy implementation\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/proof_strategies/adaptive_strategy.py`\n\n## Dependencies\n\n- numpy\n- typing\n- threading\n- dataclasses\n- json\n- strategy_base\n- time\n\n## Code Structure\n\n- **Total Lines:** 855\n- **Code Lines:** 607\n- **Comment Lines:** 83\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.proof_system.proof_strategies.ensemble_strategy",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/proof_strategies/ensemble_strategy.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.proof_system.proof_strategies.ensemble_strategy\n\nAPI endpoints for independent_core.proof_system.proof_strategies.ensemble_strategy\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //merge/proof/data\n\n#### POST //merge/proof/data\n\nMerge proof data from multiple strategies\n\n**Parameters:**\n\n- **results** (query) *required*: string - Parameter: results\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//merge/proof/data?results=example_results\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//merge/proof/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"results\": \"example_results\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/strategy/rankings\n\n#### GET /get/strategy/rankings\n\nGet current strategy rankings by performance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/strategy/rankings\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/strategy/rankings\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/performance\n\n#### PUT /update/performance\n\nUpdate strategy performance metrics\n\n**Parameters:**\n\n- **success** (query) *required*: bool - Parameter: success\n- **confidence** (query) *required*: float - Parameter: confidence\n- **execution_time** (query) *required*: float - Parameter: execution_time\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/performance?success=example_success&confidence=example_confidence&execution_time=example_execution_time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/performance\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"success\": \"example_success\",\n    \"confidence\": \"example_confidence\",\n    \"execution_time\": \"example_execution_time\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.proof_system.proof_strategies.ensemble_strategy\",\n    \"description\": \"API endpoints for independent_core.proof_system.proof_strategies.ensemble_strategy\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/performance\": {\n      \"put\": {\n        \"summary\": \"Update strategy performance metrics\",\n        \"description\": \"Update strategy performance metrics\",\n        \"operationId\": \"update_performance\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"success\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: success\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"confidence\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: confidence\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"execution_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: execution_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//merge/proof/data\": {\n      \"post\": {\n        \"summary\": \"Merge proof data from multiple strategies\",\n        \"description\": \"Merge proof data from multiple strategies\",\n        \"operationId\": \"_merge_proof_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"results\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: results\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/strategy/rankings\": {\n      \"get\": {\n        \"summary\": \"Get current strategy rankings by performance\",\n        \"description\": \"Get current strategy rankings by performance\",\n        \"operationId\": \"get_strategy_rankings\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.proof_system.proof_strategies.ensemble_strategy\n\n## Overview\n\nEnsemble Strategy - Ensemble proof strategy implementation\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/proof_system/proof_strategies/ensemble_strategy.py`\n\n## Dependencies\n\n- numpy\n- concurrent.futures\n- typing\n- threading\n- dataclasses\n- json\n- strategy_base\n- time\n\n## Code Structure\n\n- **Total Lines:** 677\n- **Code Lines:** 470\n- **Comment Lines:** 72\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.sheaf_compressor",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_compressor.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.sheaf.sheaf_compressor\n\nAPI endpoints for independent_core.compression_systems.sheaf.sheaf_compressor\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/restriction\n\n#### GET /get/restriction\n\nGet restriction map between cells.\n\n**Parameters:**\n\n- **source** (query) *required*: str - Parameter: source\n- **target** (query) *required*: str - Parameter: target\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/restriction?source=example_source&target=example_target\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/restriction\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"source\": \"example_source\",\n    \"target\": \"example_target\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.sheaf.sheaf_compressor\",\n    \"description\": \"API endpoints for independent_core.compression_systems.sheaf.sheaf_compressor\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/restriction\": {\n      \"get\": {\n        \"summary\": \"Get restriction map between cells.\",\n        \"description\": \"Get restriction map between cells.\",\n        \"operationId\": \"get_restriction\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"source\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: source\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"target\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.sheaf_compressor\n\n## Overview\n\nSheaf Theory Compression System Core Implementation\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_compressor.py`\n\n## Dependencies\n\n- proof_system.confidence_generator\n- numpy\n- typing\n- proof_system.algebraic_rule_enforcer\n- pickle\n- hashlib\n- dataclasses\n- base.compression_base\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1034\n- **Code Lines:** 755\n- **Comment Lines:** 84\n\n## Complexity Indicators\n\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.sheaf.sheaf_compressor\n\nSheaf Theory Compression System Core Implementation\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 2\n- **Dependencies:** 9\n\n## Class Hierarchy\n\n- **CellularSheaf**\n  - Methods: 4\n  - Complexity: 27\n- **RestrictionMap**\n  - Methods: 5\n  - Complexity: 28\n- **SheafValidation**\n  - Methods: 9\n  - Complexity: 69\n- **SheafCompressionSystem** (inherits from CompressionBase)\n  - Methods: 40\n  - Complexity: 224\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.sheaf_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.sheaf.sheaf_integration\n\nAPI endpoints for independent_core.compression_systems.sheaf.sheaf_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/integrated/sheaf/system\n\n#### POST /create/integrated/sheaf/system\n\nCreate a fully integrated sheaf system.\n\nArgs:\n    brain_core: BrainCore instance\n    domain_registry: DomainRegistry instance\n    training_manager: TrainingManager instance\n    sheaf_config: Configuration for sheaf compression system\n    orchestrator_config: Configuration for orchestrator\n    \nReturns:\n    Configured SheafSystemOrchestrator instance\n\n**Parameters:**\n\n- **brain_core** (query) *required*: BrainCore - BrainCore instance\n- **domain_registry** (query) *required*: DomainRegistry - DomainRegistry instance\n- **training_manager** (query) *required*: TrainingManager - TrainingManager instance\n- **sheaf_config** (query) *required*: string - Configuration for sheaf compression system\n- **orchestrator_config** (query) *required*: string - Configuration for orchestrator\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/integrated/sheaf/system?brain_core=example_brain_core&domain_registry=example_domain_registry&training_manager=example_training_manager&sheaf_config=example_sheaf_config&orchestrator_config=example_orchestrator_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/integrated/sheaf/system\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain_core\": \"example_brain_core\",\n    \"domain_registry\": \"example_domain_registry\",\n    \"training_manager\": \"example_training_manager\",\n    \"sheaf_config\": \"example_sheaf_config\",\n    \"orchestrator_config\": \"example_orchestrator_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /detect/domain/capabilities\n\n#### POST /detect/domain/capabilities\n\nDetect domain capabilities using sheaf analysis.\n\nArgs:\n    data: Input data to analyze\n    use_compression: Whether to compress data first\n    \nReturns:\n    Dictionary of domain capabilities\n\n**Parameters:**\n\n- **data** (body) *required*: Any - Input data to analyze\n- **use_compression** (query) *required*: bool - Whether to compress data first\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000/detect/domain/capabilities?use_compression=example_use_compression\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/detect/domain/capabilities\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nparams = {\n    \"use_compression\": \"example_use_compression\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/integration/statistics\n\n#### GET /get/integration/statistics\n\nGet statistics about sheaf-brain integration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/integration/statistics\n\nGet statistics about sheaf-domain integration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/integration/statistics\n\nGet statistics about sheaf-training integration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/system/status\n\n#### GET /get/system/status\n\nGet comprehensive system status.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/system/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/system/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /predict/with/sheaf\n\n#### POST /predict/with/sheaf\n\nMake prediction with sheaf-aware enhancements.\n\nArgs:\n    input_data: Input data for prediction\n    domain: Optional domain specification\n    use_compression: Whether to use sheaf compression\n    \nReturns:\n    Tuple of prediction result and sheaf metrics\n\n**Parameters:**\n\n- **input_data** (query) *required*: Any - Input data for prediction\n- **domain** (query) *required*: string - Optional domain specification\n- **use_compression** (query) *required*: bool - Whether to use sheaf compression\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/predict/with/sheaf?input_data=example_input_data&domain=example_domain&use_compression=example_use_compression\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/predict/with/sheaf\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"input_data\": \"example_input_data\",\n    \"domain\": \"example_domain\",\n    \"use_compression\": \"example_use_compression\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.sheaf.sheaf_integration\",\n    \"description\": \"API endpoints for independent_core.compression_systems.sheaf.sheaf_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/integrated/sheaf/system\": {\n      \"post\": {\n        \"summary\": \"Create a fully integrated sheaf system.\\n\\nArgs:\\n    brain_core: BrainCore instance\\n    domain_registry: DomainRegistry instance\\n    training_manager: TrainingManager instance\\n    sheaf_config: Configuration for sheaf compression system\\n    orchestrator_config: Configuration for orchestrator\\n    \\nReturns:\\n    Configured SheafSystemOrchestrator instance\",\n        \"description\": \"Create a fully integrated sheaf system.\\n\\nArgs:\\n    brain_core: BrainCore instance\\n    domain_registry: DomainRegistry instance\\n    training_manager: TrainingManager instance\\n    sheaf_config: Configuration for sheaf compression system\\n    orchestrator_config: Configuration for orchestrator\\n    \\nReturns:\\n    Configured SheafSystemOrchestrator instance\",\n        \"operationId\": \"create_integrated_sheaf_system\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain_core\",\n            \"in\": \"query\",\n            \"description\": \"BrainCore instance\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"BrainCore\"\n            }\n          },\n          {\n            \"name\": \"domain_registry\",\n            \"in\": \"query\",\n            \"description\": \"DomainRegistry instance\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DomainRegistry\"\n            }\n          },\n          {\n            \"name\": \"training_manager\",\n            \"in\": \"query\",\n            \"description\": \"TrainingManager instance\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"TrainingManager\"\n            }\n          },\n          {\n            \"name\": \"sheaf_config\",\n            \"in\": \"query\",\n            \"description\": \"Configuration for sheaf compression system\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"orchestrator_config\",\n            \"in\": \"query\",\n            \"description\": \"Configuration for orchestrator\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/predict/with/sheaf\": {\n      \"post\": {\n        \"summary\": \"Make prediction with sheaf-aware enhancements.\\n\\nArgs:\\n    input_data: Input data for prediction\\n    domain: Optional domain specification\\n    use_compression: Whether to use sheaf compression\\n    \\nReturns:\\n    Tuple of prediction result and sheaf metrics\",\n        \"description\": \"Make prediction with sheaf-aware enhancements.\\n\\nArgs:\\n    input_data: Input data for prediction\\n    domain: Optional domain specification\\n    use_compression: Whether to use sheaf compression\\n    \\nReturns:\\n    Tuple of prediction result and sheaf metrics\",\n        \"operationId\": \"predict_with_sheaf\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"input_data\",\n            \"in\": \"query\",\n            \"description\": \"Input data for prediction\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"domain\",\n            \"in\": \"query\",\n            \"description\": \"Optional domain specification\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"use_compression\",\n            \"in\": \"query\",\n            \"description\": \"Whether to use sheaf compression\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/integration/statistics\": {\n      \"get\": {\n        \"summary\": \"Get statistics about sheaf-training integration.\",\n        \"description\": \"Get statistics about sheaf-training integration.\",\n        \"operationId\": \"get_integration_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/detect/domain/capabilities\": {\n      \"post\": {\n        \"summary\": \"Detect domain capabilities using sheaf analysis.\\n\\nArgs:\\n    data: Input data to analyze\\n    use_compression: Whether to compress data first\\n    \\nReturns:\\n    Dictionary of domain capabilities\",\n        \"description\": \"Detect domain capabilities using sheaf analysis.\\n\\nArgs:\\n    data: Input data to analyze\\n    use_compression: Whether to compress data first\\n    \\nReturns:\\n    Dictionary of domain capabilities\",\n        \"operationId\": \"detect_domain_capabilities\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"use_compression\",\n            \"in\": \"query\",\n            \"description\": \"Whether to compress data first\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"data\": {\n                    \"type\": \"Any\",\n                    \"description\": \"Input data to analyze\"\n                  }\n                },\n                \"required\": [\n                  \"data\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/system/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive system status.\",\n        \"description\": \"Get comprehensive system status.\",\n        \"operationId\": \"get_system_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"integration_status\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"brain\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"domain\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"training\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.sheaf_integration\n\n## Overview\n\nSheaf Integration System\n\nThis module provides integration classes for connecting the sheaf compression system\nwith the brain core, domain registry, and training manager components.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_integration.py`\n\n## Dependencies\n\n- pathlib\n- brain_core\n- threading\n- json\n- datetime\n- time\n- numpy\n- enum\n- uuid\n- torch\n- traceback\n- training_manager\n- typing\n- sheaf_core\n- domain_registry\n- concurrent.futures\n- logging\n- sheaf_advanced\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 2159\n- **Code Lines:** 1599\n- **Comment Lines:** 150\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.compression_systems.sheaf.sheaf_integration\n\nSheaf Integration System\n\nThis module provides integration classes for connecting the sheaf compression system\nwith the brain core, domain registry, and training manager components.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_integration.py\n- **Total Classes:** 14\n- **Total Functions:** 2\n- **Dependencies:** pathlib, brain_core, threading, json, datetime, time, numpy, enum, uuid, torch, traceback, training_manager, typing, sheaf_core, domain_registry, concurrent.futures, logging, sheaf_advanced, dataclasses, collections\n\n## Contents\n**Classes (14):** SheafIntegrationError, SheafBrainIntegrationError, SheafDomainIntegrationError, SheafTrainingIntegrationError, SheafOrchestrationError, SheafPredictionMetrics, SheafDomainState, SheafTrainingMetrics, SheafBrainIntegration, SheafDomainIntegration, SheafTrainingIntegration, IntegrationStatus, SystemHealthMetrics, SheafSystemOrchestrator\n**Functions (2):** create_integrated_sheaf_system, validate_sheaf_integration\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nNo examples available\n",
        "architecture": "# Architecture: independent_core.compression_systems.sheaf.sheaf_integration\n\nSheaf Integration System\n\nThis module provides integration classes for connecting the sheaf compression system\nwith the brain core, domain registry, and training manager components.\n\n## Components Overview\n\n- **Classes:** 14\n- **Functions:** 2\n- **Dependencies:** 20\n\n## Class Hierarchy\n\n- **SheafIntegrationError** (inherits from Exception)\n  - Methods: 0\n  - Complexity: 2\n- **SheafBrainIntegrationError** (inherits from SheafIntegrationError)\n  - Methods: 0\n  - Complexity: 2\n- **SheafDomainIntegrationError** (inherits from SheafIntegrationError)\n  - Methods: 0\n  - Complexity: 2\n- **SheafTrainingIntegrationError** (inherits from SheafIntegrationError)\n  - Methods: 0\n  - Complexity: 2\n- **SheafOrchestrationError** (inherits from SheafIntegrationError)\n  - Methods: 0\n  - Complexity: 2\n- **SheafPredictionMetrics**\n  - Methods: 1\n  - Complexity: 13\n- **SheafDomainState**\n  - Methods: 1\n  - Complexity: 10\n- **SheafTrainingMetrics**\n  - Methods: 1\n  - Complexity: 13\n- **SheafBrainIntegration**\n  - Methods: 27\n  - Complexity: 139\n- **SheafDomainIntegration**\n  - Methods: 15\n  - Complexity: 112\n- **SheafTrainingIntegration**\n  - Methods: 10\n  - Complexity: 62\n- **IntegrationStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **SystemHealthMetrics**\n  - Methods: 1\n  - Complexity: 12\n- **SheafSystemOrchestrator**\n  - Methods: 11\n  - Complexity: 49\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.integration_example_advanced",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/integration_example_advanced.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.sheaf.integration_example_advanced",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.integration_example_advanced\n\n## Overview\n\nAdvanced Sheaf Theory Features Integration Example\nDemonstrates cellular sheaf construction, restriction maps, cohomology, and reconstruction\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/integration_example_advanced.py`\n\n## Dependencies\n\n- numpy\n- independent_core.compression_systems.sheaf\n- typing\n- torch\n- time\n\n## Code Structure\n\n- **Total Lines:** 551\n- **Code Lines:** 356\n- **Comment Lines:** 56\n\n",
        "integration_guide": "\n# independent_core.compression_systems.sheaf.integration_example_advanced\n\nAdvanced Sheaf Theory Features Integration Example\nDemonstrates cellular sheaf construction, restriction maps, cohomology, and reconstruction\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/integration_example_advanced.py\n- **Total Classes:** 0\n- **Total Functions:** 7\n- **Dependencies:** numpy, independent_core.compression_systems.sheaf, typing, torch, time\n\n## Contents\n**Functions (7):** demonstrate_cellular_sheaf_builder, demonstrate_restriction_map_processor, demonstrate_cohomology_calculator, demonstrate_reconstruction_engine, demonstrate_complete_workflow, demonstrate_integration_with_existing_systems, demonstrate_performance_analysis\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: demonstrate_restriction_map_processor\n\n## Examples\nAdvanced Sheaf Theory Features Integration Example\n\nDemonstrates cellular sheaf construction, restriction maps, cohomology, and reconstruction\n\"\"\"\n\n\ndef demonstrate_cellular_sheaf_builder():\n\n\"\"\"Demonstrate cellular sheaf construction with different partition strategies\"\"\"\n\n\nprint(\"=== Cellular Sheaf Builder Demonstration ===\")\n\n# Create test data - 2D image-like tensor\n\ndef demonstrate_restriction_map_processor():\n\n\"\"\"Demonstrate restriction map computation with consistency validation\"\"\"\n\n\nprint(f\"\\n=== Restriction Map Processor Demonstration ===\")\n\n# Create test sheaf\n\ndef demonstrate_cohomology_calculator():\n\n\"\"\"Demonstrate sheaf cohomology computation\"\"\"\n\n\nprint(f\"\\n=== Sheaf Cohomology Calculator Demonstration ===\")\n\n# Create test sheaf with restriction maps\n\ndef demonstrate_reconstruction_engine():\n\n\"\"\"Demonstrate reconstruction from sheaf data\"\"\"\n\n\nprint(f\"\\n=== Sheaf Reconstruction Engine Demonstration ===\")\n\n# Create test data with known structure\n\ndef demonstrate_complete_workflow():\n\n\"\"\"Demonstrate complete advanced sheaf workflow\"\"\"\n\n\ndef demonstrate_integration_with_existing_systems():\n\n\"\"\"Demonstrate integration with existing compression systems\"\"\"\n\n\ndef demonstrate_performance_analysis():\n\n\"\"\"Demonstrate performance characteristics of advanced features\"\"\"\n\n\n# Run all demonstrations\n\nprint(\"Advanced Sheaf Theory Features Integration Examples\")\n\n# Individual component demonstrations\n\nsheaf = demonstrate_cellular_sheaf_builder()\n\nsheaf_with_maps = demonstrate_restriction_map_processor()\n\n\ndemonstrate_cohomology_calculator()\n\ndemonstrate_reconstruction_engine()\n\n\n# Complete workflow demonstration\n\ndemonstrate_complete_workflow()\n\n# Integration testing\n\ndemonstrate_integration_with_existing_systems()\n\n# Performance analysis\n\ndemonstrate_performance_analysis()\n\n\nprint(\"All advanced sheaf theory demonstrations complete!\")\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.sheaf_core",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_core.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.sheaf.sheaf_core\n\nAPI endpoints for independent_core.compression_systems.sheaf.sheaf_core\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //compute/checksum\n\n#### POST //compute/checksum\n\nCompute checksum for sheaf structure\n\n**Parameters:**\n\n- **sheaf** (query) *required*: CellularSheaf - Parameter: sheaf\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//compute/checksum?sheaf=example_sheaf\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//compute/checksum\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"sheaf\": \"example_sheaf\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /compress\n\n#### POST /compress\n\nCompress data using sheaf theory\n\n**Parameters:**\n\n- **data** (body) *required*: Any - Parameter: data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000/compress\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/compress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/section\n\n#### GET /get/section\n\nGet section data for a specific cell\n\n**Parameters:**\n\n- **cell** (query) *required*: str - Parameter: cell\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/section?cell=example_cell\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/section\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"cell\": \"example_cell\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.sheaf.sheaf_core\",\n    \"description\": \"API endpoints for independent_core.compression_systems.sheaf.sheaf_core\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/section\": {\n      \"get\": {\n        \"summary\": \"Get section data for a specific cell\",\n        \"description\": \"Get section data for a specific cell\",\n        \"operationId\": \"get_section\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"cell\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: cell\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//compute/checksum\": {\n      \"post\": {\n        \"summary\": \"Compute checksum for sheaf structure\",\n        \"description\": \"Compute checksum for sheaf structure\",\n        \"operationId\": \"_compute_checksum\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"sheaf\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: sheaf\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"CellularSheaf\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/compress\": {\n      \"post\": {\n        \"summary\": \"Compress data using sheaf theory\",\n        \"description\": \"Compress data using sheaf theory\",\n        \"operationId\": \"compress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"data\": {\n                    \"type\": \"Any\",\n                    \"description\": \"Parameter: data\"\n                  }\n                },\n                \"required\": [\n                  \"data\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.sheaf_core\n\n## Overview\n\nSheaf Theory Core Compression System Implementation\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_core.py`\n\n## Dependencies\n\n- proof_system.confidence_generator\n- numpy\n- typing\n- proof_system.algebraic_rule_enforcer\n- pickle\n- base.compression_base\n- hashlib\n- datetime\n- dataclasses\n- json\n- collections\n- scipy.ndimage\n\n## Code Structure\n\n- **Total Lines:** 1064\n- **Code Lines:** 734\n- **Comment Lines:** 127\n\n## Complexity Indicators\n\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.sheaf.sheaf_core\n\nSheaf Theory Core Compression System Implementation\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 5\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **RestrictionMap**\n  - Methods: 2\n  - Complexity: 25\n- **CellularSheaf**\n  - Methods: 5\n  - Complexity: 53\n- **SheafValidation**\n  - Methods: 9\n  - Complexity: 61\n- **SheafCompressionSystem** (inherits from CompressionBase)\n  - Methods: 20\n  - Complexity: 176\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.sheaf_advanced",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_advanced.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.sheaf.sheaf_advanced",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.sheaf_advanced\n\n## Overview\n\nAdvanced Sheaf Theory compression features for the independent core.\nImplements cellular sheaf structures, restriction maps, and advanced operations.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_advanced.py`\n\n## Dependencies\n\n- cohomology_validator\n- itertools\n- numpy\n- scipy.linalg\n- scipy.sparse.linalg\n- networkx\n- typing\n- sklearn.cluster\n- sheaf_structures\n- torch\n- base\n- scipy.sparse\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1579\n- **Code Lines:** 1081\n- **Comment Lines:** 171\n\n## Complexity Indicators\n\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.sheaf.sheaf_advanced\n\nAdvanced Sheaf Theory compression features for the independent core.\nImplements cellular sheaf structures, restriction maps, and advanced operations.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 6\n- **Dependencies:** 14\n\n## Class Hierarchy\n\n- **CellularSheafBuilder**\n  - Methods: 19\n  - Complexity: 156\n- **RestrictionMapProcessor**\n  - Methods: 11\n  - Complexity: 100\n- **SheafCohomologyCalculator**\n  - Methods: 10\n  - Complexity: 66\n- **SheafReconstructionEngine**\n  - Methods: 11\n  - Complexity: 94\n- **SheafAdvancedIntegration**\n  - Methods: 5\n  - Complexity: 17\n## Integration Points\n\n- Class: RestrictionMapProcessor\n- Function: integrate_restriction_processor\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.cohomology_validator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/cohomology_validator.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.sheaf.cohomology_validator",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.cohomology_validator\n\n## Overview\n\nCohomology validation for sheaf compression systems.\nAdvanced mathematical validation of cohomological properties.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/cohomology_validator.py`\n\n## Dependencies\n\n- itertools\n- numpy\n- typing\n- sheaf_structures\n- collections\n\n## Code Structure\n\n- **Total Lines:** 643\n- **Code Lines:** 433\n- **Comment Lines:** 67\n\n## Complexity Indicators\n\n- High function count\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.sheaf_service_core",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_service_core.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.sheaf.sheaf_service_core\n\nAPI endpoints for independent_core.compression_systems.sheaf.sheaf_service_core\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **registry** (query) *required*: SheafServiceRegistry - Parameter: registry\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?registry=example_registry&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"registry\": \"example_registry\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //process/request/with/retries\n\n#### POST //process/request/with/retries\n\nProcess request with retry logic and circuit breaking\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **load_balancing_strategy** (query) *required*: LoadBalancingStrategy - Parameter: load_balancing_strategy\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/request/with/retries?request=example_request&load_balancing_strategy=example_load_balancing_strategy\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/request/with/retries\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"load_balancing_strategy\": \"example_load_balancing_strategy\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //reset/circuit/breaker\n\n#### POST //reset/circuit/breaker\n\nReset circuit breaker after successful request\n\n**Parameters:**\n\n- **service_id** (query) *required*: str - Parameter: service_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//reset/circuit/breaker?service_id=example_service_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//reset/circuit/breaker\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_id\": \"example_service_id\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //update/average/response/time\n\n#### POST //update/average/response/time\n\nUpdate running average of response time\n\n**Parameters:**\n\n- **new_time** (query) *required*: float - Parameter: new_time\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//update/average/response/time?new_time=example_new_time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//update/average/response/time\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"new_time\": \"example_new_time\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //update/service/health/scores\n\n#### POST //update/service/health/scores\n\nUpdate health scores for all registered services\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//update/service/health/scores\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//update/service/health/scores\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /batch/submit/requests\n\n#### POST /batch/submit/requests\n\nSubmit multiple requests for batch processing\n\n**Parameters:**\n\n- **requests** (query) *required*: string - Parameter: requests\n- **load_balancing_strategy** (query) *required*: LoadBalancingStrategy - Parameter: load_balancing_strategy\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/batch/submit/requests?requests=example_requests&load_balancing_strategy=example_load_balancing_strategy\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/batch/submit/requests\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"requests\": \"example_requests\",\n    \"load_balancing_strategy\": \"example_load_balancing_strategy\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/service\n\n#### POST /create/service\n\nCreate and register a new sheaf service\n\n**Parameters:**\n\n- **service_id** (query) *required*: str - Parameter: service_id\n- **service_config** (query) *required*: string - Parameter: service_config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/service?service_id=example_service_id&service_config=example_service_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_id\": \"example_service_id\",\n    \"service_config\": \"example_service_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/sheaf/service/system\n\n#### POST /create/sheaf/service/system\n\nFactory function to create a complete sheaf service system\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/sheaf/service/system?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/sheaf/service/system\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/orchestrator/status\n\n#### GET /get/orchestrator/status\n\nGet current orchestrator status and metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/orchestrator/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/orchestrator/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/registry/status\n\n#### GET /get/registry/status\n\nGet overall registry status and statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/registry/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/registry/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service/capabilities\n\n#### GET /get/service/capabilities\n\nReturn the operations this service can handle\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/capabilities\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/capabilities\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service/health\n\n#### GET /get/service/health\n\nGet current service health status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/health\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /invoke/sheaf/compression\n\n#### POST /invoke/sheaf/compression\n\nHandle sheaf compression request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/invoke/sheaf/compression?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/invoke/sheaf/compression\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /submit/request\n\n#### POST /submit/request\n\nSubmit a request for processing with load balancing and fault tolerance\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **load_balancing_strategy** (query) *required*: LoadBalancingStrategy - Parameter: load_balancing_strategy\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/submit/request?request=example_request&load_balancing_strategy=example_load_balancing_strategy\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/submit/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"load_balancing_strategy\": \"example_load_balancing_strategy\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/sheaf/request\n\n#### POST /validate/sheaf/request\n\nValidate sheaf-specific request parameters\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/sheaf/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/sheaf/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /wait/for/responses\n\n#### POST /wait/for/responses\n\nWait for multiple request futures to complete\n\n**Parameters:**\n\n- **futures** (query) *required*: string - Parameter: futures\n- **timeout** (query) *required*: string - Parameter: timeout\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/wait/for/responses?futures=example_futures&timeout=example_timeout\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/wait/for/responses\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"futures\": \"example_futures\",\n    \"timeout\": \"example_timeout\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.sheaf.sheaf_service_core\",\n    \"description\": \"API endpoints for independent_core.compression_systems.sheaf.sheaf_service_core\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/sheaf/service/system\": {\n      \"post\": {\n        \"summary\": \"Factory function to create a complete sheaf service system\",\n        \"description\": \"Factory function to create a complete sheaf service system\",\n        \"operationId\": \"create_sheaf_service_system\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/invoke/sheaf/compression\": {\n      \"post\": {\n        \"summary\": \"Handle sheaf compression request\",\n        \"description\": \"Handle sheaf compression request\",\n        \"operationId\": \"invoke_sheaf_compression\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/sheaf/request\": {\n      \"post\": {\n        \"summary\": \"Validate sheaf-specific request parameters\",\n        \"description\": \"Validate sheaf-specific request parameters\",\n        \"operationId\": \"validate_sheaf_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/service/health\": {\n      \"get\": {\n        \"summary\": \"Get current service health status\",\n        \"description\": \"Get current service health status\",\n        \"operationId\": \"get_service_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"service_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"uptime_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"success_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"average_response_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_request_time\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/service/capabilities\": {\n      \"get\": {\n        \"summary\": \"Return the operations this service can handle\",\n        \"description\": \"Return the operations this service can handle\",\n        \"operationId\": \"get_service_capabilities\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//update/average/response/time\": {\n      \"post\": {\n        \"summary\": \"Update running average of response time\",\n        \"description\": \"Update running average of response time\",\n        \"operationId\": \"_update_average_response_time\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"new_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: new_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/registry/status\": {\n      \"get\": {\n        \"summary\": \"Get overall registry status and statistics\",\n        \"description\": \"Get overall registry status and statistics\",\n        \"operationId\": \"get_registry_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_services\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_services\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"operation_coverage\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"service_details\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//update/service/health/scores\": {\n      \"post\": {\n        \"summary\": \"Update health scores for all registered services\",\n        \"description\": \"Update health scores for all registered services\",\n        \"operationId\": \"_update_service_health_scores\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"registry\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: registry\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SheafServiceRegistry\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/submit/request\": {\n      \"post\": {\n        \"summary\": \"Submit a request for processing with load balancing and fault tolerance\",\n        \"description\": \"Submit a request for processing with load balancing and fault tolerance\",\n        \"operationId\": \"submit_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"load_balancing_strategy\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: load_balancing_strategy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"LoadBalancingStrategy\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/batch/submit/requests\": {\n      \"post\": {\n        \"summary\": \"Submit multiple requests for batch processing\",\n        \"description\": \"Submit multiple requests for batch processing\",\n        \"operationId\": \"batch_submit_requests\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"requests\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: requests\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"load_balancing_strategy\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: load_balancing_strategy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"LoadBalancingStrategy\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/wait/for/responses\": {\n      \"post\": {\n        \"summary\": \"Wait for multiple request futures to complete\",\n        \"description\": \"Wait for multiple request futures to complete\",\n        \"operationId\": \"wait_for_responses\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"futures\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: futures\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"timeout\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: timeout\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/orchestrator/status\": {\n      \"get\": {\n        \"summary\": \"Get current orchestrator status and metrics\",\n        \"description\": \"Get current orchestrator status and metrics\",\n        \"operationId\": \"get_orchestrator_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"pending_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_queued_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"executor_active_threads\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"circuit_breakers\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"retry_config\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//process/request/with/retries\": {\n      \"post\": {\n        \"summary\": \"Process request with retry logic and circuit breaking\",\n        \"description\": \"Process request with retry logic and circuit breaking\",\n        \"operationId\": \"_process_request_with_retries\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"load_balancing_strategy\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: load_balancing_strategy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"LoadBalancingStrategy\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//reset/circuit/breaker\": {\n      \"post\": {\n        \"summary\": \"Reset circuit breaker after successful request\",\n        \"description\": \"Reset circuit breaker after successful request\",\n        \"operationId\": \"_reset_circuit_breaker\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/service\": {\n      \"post\": {\n        \"summary\": \"Create and register a new sheaf service\",\n        \"description\": \"Create and register a new sheaf service\",\n        \"operationId\": \"create_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"service_config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.sheaf_service_core\n\n## Overview\n\nSheaf Service Core Implementation\nProduction-ready service layer for sheaf compression operations\nHard failure mode - no fallbacks, all errors surface immediately\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_service_core.py`\n\n## Dependencies\n\n- random\n- concurrent.futures\n- logging\n- enum\n- typing\n- abc\n- uuid\n- asyncio\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 840\n- **Code Lines:** 650\n- **Comment Lines:** 46\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Async programming\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.sheaf.sheaf_service_core\n\nSheaf Service Core Implementation\nProduction-ready service layer for sheaf compression operations\nHard failure mode - no fallbacks, all errors surface immediately\n\n## Components Overview\n\n- **Classes:** 12\n- **Functions:** 1\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **ServiceStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **ServiceOperationType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **ServiceRequest**\n  - Methods: 0\n  - Complexity: 6\n- **ServiceResponse**\n  - Methods: 0\n  - Complexity: 7\n- **ServiceMetrics**\n  - Methods: 0\n  - Complexity: 6\n- **CompressionServiceInterface** (inherits from ABC)\n  - Methods: 3\n  - Complexity: 10\n- **LoadBalancingStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **ServiceInstance**\n  - Methods: 0\n  - Complexity: 10\n- **SheafServiceInterface** (inherits from CompressionServiceInterface)\n  - Methods: 16\n  - Complexity: 66\n- **SheafServiceRegistry**\n  - Methods: 14\n  - Complexity: 61\n- **SheafServiceOrchestrator**\n  - Methods: 10\n  - Complexity: 46\n- **SheafServiceManager**\n  - Methods: 4\n  - Complexity: 17\n## Integration Points\n\n- Class: ServiceStatus\n- Class: ServiceOperationType\n- Class: ServiceRequest\n- Class: ServiceResponse\n- Class: ServiceMetrics\n- Class: CompressionServiceInterface\n- Class: ServiceInstance\n- Class: SheafServiceInterface\n- Class: SheafServiceRegistry\n- Class: SheafServiceOrchestrator\n- Class: SheafServiceManager\n- Function: create_sheaf_service_system\n- Function: start_service\n- Function: stop_service\n- Function: get_service_health\n- Function: get_service_capabilities\n- Function: register_service\n- Function: unregister_service\n- Function: discover_services\n- Function: select_service\n- Function: _update_service_health_scores\n- Function: create_service\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.integration_example",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/integration_example.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.sheaf.integration_example",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.integration_example\n\n## Overview\n\nSheaf Theory Compression System Integration Example\nDemonstrates integration with BrainCore and other independent_core components\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/integration_example.py`\n\n## Dependencies\n\n- numpy\n- independent_core.compression_systems.sheaf\n- typing\n- independent_core.proof_system.confidence_generator\n- independent_core.proof_system.algebraic_rule_enforcer\n- independent_core.brain_core\n\n## Code Structure\n\n- **Total Lines:** 320\n- **Code Lines:** 222\n- **Comment Lines:** 36\n\n",
        "integration_guide": "\n# independent_core.compression_systems.sheaf.integration_example\n\nSheaf Theory Compression System Integration Example\nDemonstrates integration with BrainCore and other independent_core components\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/integration_example.py\n- **Total Classes:** 0\n- **Total Functions:** 4\n- **Dependencies:** numpy, independent_core.compression_systems.sheaf, typing, independent_core.proof_system.confidence_generator, independent_core.proof_system.algebraic_rule_enforcer, independent_core.brain_core\n\n## Contents\n**Functions (4):** integrate_sheaf_with_brain_core, demonstrate_sheaf_validation, custom_data_rule, custom_morphism\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nSheaf Theory Compression System Integration Example\n\nDemonstrates integration with BrainCore and other independent_core components\n\"\"\"\n\n\n\"\"\"Demonstrate integration of Sheaf compression with BrainCore\"\"\"\n\n# Initialize BrainCore\n\n# Example 1: Compress dictionary data\n\n# Example 2: Compress 2D array (image-like data)\n\n# Example 3: Compress time series data\n\n# Demonstrate restriction maps\n\nprint(f\"\\nDemonstrating restriction from {first_cell} to {neighbors[0]}\")\n\n# Example 4: Custom algebraic rules\n\n# Example 5: Confidence generation for sheaf structures\n\n# Example 6: Working with global sections\n\n# Example 7: Compute cohomology\n\n# Example 8: Compression metrics\n\n# Example 9: Error handling demonstration\n\nprint(\"\\nDemonstrating NO FALLBACK error handling:\")\n\n\n# Example 10: Advanced sheaf operations\n\ndef demonstrate_sheaf_validation():\n\n\"\"\"Demonstrate the validation system\"\"\"\n\nprint(\"\\n=== Sheaf Validation Demonstration ===\")\n\n\n# Run integration demonstration\n\n# Run validation demonstration\n\ndemonstrate_sheaf_validation()\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.sheaf_validation",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_validation.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.sheaf.sheaf_validation\n\nAPI endpoints for independent_core.compression_systems.sheaf.sheaf_validation\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/validation/statistics\n\n#### GET /get/validation/statistics\n\nGet validation performance statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/validation/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/validation/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.sheaf.sheaf_validation\",\n    \"description\": \"API endpoints for independent_core.compression_systems.sheaf.sheaf_validation\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/validation/statistics\": {\n      \"get\": {\n        \"summary\": \"Get validation performance statistics\",\n        \"description\": \"Get validation performance statistics\",\n        \"operationId\": \"get_validation_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.sheaf_validation\n\n## Overview\n\nComprehensive validation for sheaf structures and mathematical properties.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_validation.py`\n\n## Dependencies\n\n- numpy\n- typing\n- sheaf_structures\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 910\n- **Code Lines:** 616\n- **Comment Lines:** 83\n\n## Complexity Indicators\n\n- High function count\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.sheaf_service_middleware",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_service_middleware.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.sheaf.sheaf_service_middleware\n\nAPI endpoints for independent_core.compression_systems.sheaf.sheaf_service_middleware\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nInitialize middleware with configuration\n\n⏱️ Rate limited\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nInitialize configuration manager\n\n**Parameters:**\n\n- **config_path** (query) *required*: string - Parameter: config_path\n- **encryption_key** (query) *required*: string - Parameter: encryption_key\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config_path=example_config_path&encryption_key=example_encryption_key\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_path\": \"example_config_path\",\n    \"encryption_key\": \"example_encryption_key\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //caching/middleware\n\n#### POST //caching/middleware\n\nCheck cache for existing results\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//caching/middleware?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//caching/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //calculate/average/latency\n\n#### POST //calculate/average/latency\n\nCalculate average latency in milliseconds\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//calculate/average/latency\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//calculate/average/latency\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //calculate/error/rate\n\n#### POST //calculate/error/rate\n\nCalculate error rate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//calculate/error/rate\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//calculate/error/rate\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //calculate/throughput\n\n#### POST //calculate/throughput\n\nCalculate throughput in requests per second\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//calculate/throughput\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//calculate/throughput\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //circuit/breaking/middleware\n\n#### POST //circuit/breaking/middleware\n\nApply circuit breaking pattern\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//circuit/breaking/middleware?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//circuit/breaking/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //collect/service/metrics\n\n#### POST //collect/service/metrics\n\nCollect service metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//collect/service/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//collect/service/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //create/rate/limiter\n\n#### POST //create/rate/limiter\n\nCreate rate limiting configuration\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//create/rate/limiter\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//create/rate/limiter\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //error/handling/middleware\n\n#### POST //error/handling/middleware\n\nHandle errors in the request\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//error/handling/middleware?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//error/handling/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/cache/key\n\n#### POST //generate/cache/key\n\nGenerate cache key for request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/cache/key?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/cache/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/middleware/error\n\n#### POST //handle/middleware/error\n\nHandle middleware processing errors\n\n**Parameters:**\n\n- **error** (query) *required*: Exception - Parameter: error\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/middleware/error?error=example_error&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/middleware/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //initialize/middleware\n\n#### POST //initialize/middleware\n\nInitialize default middleware components\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/middleware\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //initialize/performance/monitors\n\n#### POST //initialize/performance/monitors\n\nInitialize performance monitoring\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/performance/monitors\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/performance/monitors\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //initialize/validators\n\n#### POST //initialize/validators\n\nInitialize request validators\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/validators\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/validators\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //load/defaults\n\n#### POST //load/defaults\n\nLoad default configuration\n\n🔒 Authentication required\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000//load/defaults\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/defaults\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //load/from/file\n\n#### POST //load/from/file\n\nLoad configuration from file\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//load/from/file\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//load/from/file\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //logging/middleware\n\n#### POST //logging/middleware\n\nLog request details\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//logging/middleware?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//logging/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //monitor/cache/effectiveness\n\n#### POST //monitor/cache/effectiveness\n\nMonitor cache hit rates\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//monitor/cache/effectiveness?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//monitor/cache/effectiveness\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //monitor/memory/usage\n\n#### POST //monitor/memory/usage\n\nMonitor memory usage\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//monitor/memory/usage?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//monitor/memory/usage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //monitor/request/latency\n\n#### POST //monitor/request/latency\n\nMonitor request latency\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//monitor/request/latency?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//monitor/request/latency\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //rate/limiting/middleware\n\n#### POST //rate/limiting/middleware\n\nApply rate limiting\n\n⏱️ Rate limited\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//rate/limiting/middleware?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//rate/limiting/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //record/version\n\n#### POST //record/version\n\nRecord configuration version\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n- **source** (query) *required*: ConfigurationSource - Parameter: source\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//record/version?config=example_config&source=example_source\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//record/version\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n    \"source\": \"example_source\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //update/circuit/breaker\n\n#### POST //update/circuit/breaker\n\nUpdate circuit breaker state based on response\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//update/circuit/breaker?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//update/circuit/breaker\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/resource/limits\n\n#### POST //validate/resource/limits\n\nValidate resource usage limits\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/resource/limits?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/resource/limits\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/security/constraints\n\n#### POST //validate/security/constraints\n\nValidate security constraints\n\n🔒 Authentication required\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000//validate/security/constraints?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/security/constraints\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/sheaf/data/format\n\n#### POST //validate/sheaf/data/format\n\nValidate Sheaf-specific data format\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/sheaf/data/format?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/sheaf/data/format\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/sheaf/parameters\n\n#### POST //validate/sheaf/parameters\n\nValidate Sheaf compression parameters\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/sheaf/parameters?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/sheaf/parameters\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validation/middleware\n\n#### POST //validation/middleware\n\nValidate request using registered validators\n\n**Parameters:**\n\n- **context** (query) *required*: MiddlewareContext - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validation/middleware?context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validation/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /add/request/validator\n\n#### POST /add/request/validator\n\nAdd request validator\n\n**Parameters:**\n\n- **validator** (query) *required*: Callable - Parameter: validator\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/add/request/validator?validator=example_validator\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/add/request/validator\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"validator\": \"example_validator\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /add/response/transformer\n\n#### POST /add/response/transformer\n\nAdd response transformer\n\n**Parameters:**\n\n- **transformer** (query) *required*: Callable - Parameter: transformer\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/add/response/transformer?transformer=example_transformer\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/add/response/transformer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"transformer\": \"example_transformer\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/configuration\n\n#### GET /get/configuration\n\nGet configuration value by path\n\n**Parameters:**\n\n- **path** (query) *required*: string - Parameter: path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/configuration?path=example_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"path\": \"example_path\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/configuration/history\n\n#### GET /get/configuration/history\n\nGet configuration version history\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/configuration/history\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/configuration/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/health/report\n\n#### GET /get/health/report\n\nGet comprehensive health report\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/health/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/health/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/health/status\n\n#### GET /get/health/status\n\nGet health status for component(s)\n\n**Parameters:**\n\n- **component** (query) *required*: string - Parameter: component\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/health/status?component=example_component\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/health/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"component\": \"example_component\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/middleware/stats\n\n#### GET /get/middleware/stats\n\nGet middleware statistics\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/middleware/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/middleware/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/overall/health\n\n#### GET /get/overall/health\n\nGet overall health status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/overall/health\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/overall/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/stats\n\n#### GET /get/stats\n\nGet cache statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /process/request\n\n#### POST /process/request\n\nProcess request through middleware chain\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **next_handler** (query) *required*: Callable - Parameter: next_handler\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/process/request?request=example_request&next_handler=example_next_handler\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"next_handler\": \"example_next_handler\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/configuration\n\n#### POST /save/configuration\n\nSave configuration to file\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n- **encrypt** (query) *required*: bool - Parameter: encrypt\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/configuration?config=example_config&encrypt=example_encrypt\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n    \"encrypt\": \"example_encrypt\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/configuration\n\n#### PUT /update/configuration\n\nUpdate configuration with new values\n\n**Parameters:**\n\n- **updates** (query) *required*: string - Parameter: updates\n- **validate** (query) *required*: bool - Parameter: validate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/configuration?updates=example_updates&validate=example_validate\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"updates\": \"example_updates\",\n    \"validate\": \"example_validate\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.sheaf.sheaf_service_middleware\",\n    \"description\": \"API endpoints for independent_core.compression_systems.sheaf.sheaf_service_middleware\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"Initialize configuration manager\",\n        \"description\": \"Initialize configuration manager\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"encryption_key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: encryption_key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/middleware\": {\n      \"post\": {\n        \"summary\": \"Initialize default middleware components\",\n        \"description\": \"Initialize default middleware components\",\n        \"operationId\": \"_initialize_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/validators\": {\n      \"post\": {\n        \"summary\": \"Initialize request validators\",\n        \"description\": \"Initialize request validators\",\n        \"operationId\": \"_initialize_validators\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/performance/monitors\": {\n      \"post\": {\n        \"summary\": \"Initialize performance monitoring\",\n        \"description\": \"Initialize performance monitoring\",\n        \"operationId\": \"_initialize_performance_monitors\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//create/rate/limiter\": {\n      \"post\": {\n        \"summary\": \"Create rate limiting configuration\",\n        \"description\": \"Create rate limiting configuration\",\n        \"operationId\": \"_create_rate_limiter\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"requests_per_second\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"burst_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"window_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"client_limits\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"global_limit\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_cleanup\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/add/request/validator\": {\n      \"post\": {\n        \"summary\": \"Add request validator\",\n        \"description\": \"Add request validator\",\n        \"operationId\": \"add_request_validator\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"validator\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: validator\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Callable\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/add/response/transformer\": {\n      \"post\": {\n        \"summary\": \"Add response transformer\",\n        \"description\": \"Add response transformer\",\n        \"operationId\": \"add_response_transformer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"transformer\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: transformer\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Callable\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/process/request\": {\n      \"post\": {\n        \"summary\": \"Process request through middleware chain\",\n        \"description\": \"Process request through middleware chain\",\n        \"operationId\": \"process_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"next_handler\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: next_handler\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Callable\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//logging/middleware\": {\n      \"post\": {\n        \"summary\": \"Log request details\",\n        \"description\": \"Log request details\",\n        \"operationId\": \"_logging_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validation/middleware\": {\n      \"post\": {\n        \"summary\": \"Validate request using registered validators\",\n        \"description\": \"Validate request using registered validators\",\n        \"operationId\": \"_validation_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//rate/limiting/middleware\": {\n      \"post\": {\n        \"summary\": \"Apply rate limiting\",\n        \"description\": \"Apply rate limiting\",\n        \"operationId\": \"_rate_limiting_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//circuit/breaking/middleware\": {\n      \"post\": {\n        \"summary\": \"Apply circuit breaking pattern\",\n        \"description\": \"Apply circuit breaking pattern\",\n        \"operationId\": \"_circuit_breaking_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//caching/middleware\": {\n      \"post\": {\n        \"summary\": \"Check cache for existing results\",\n        \"description\": \"Check cache for existing results\",\n        \"operationId\": \"_caching_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//error/handling/middleware\": {\n      \"post\": {\n        \"summary\": \"Handle errors in the request\",\n        \"description\": \"Handle errors in the request\",\n        \"operationId\": \"_error_handling_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/sheaf/data/format\": {\n      \"post\": {\n        \"summary\": \"Validate Sheaf-specific data format\",\n        \"description\": \"Validate Sheaf-specific data format\",\n        \"operationId\": \"_validate_sheaf_data_format\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/sheaf/parameters\": {\n      \"post\": {\n        \"summary\": \"Validate Sheaf compression parameters\",\n        \"description\": \"Validate Sheaf compression parameters\",\n        \"operationId\": \"_validate_sheaf_parameters\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/resource/limits\": {\n      \"post\": {\n        \"summary\": \"Validate resource usage limits\",\n        \"description\": \"Validate resource usage limits\",\n        \"operationId\": \"_validate_resource_limits\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/security/constraints\": {\n      \"post\": {\n        \"summary\": \"Validate security constraints\",\n        \"description\": \"Validate security constraints\",\n        \"operationId\": \"_validate_security_constraints\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"//monitor/request/latency\": {\n      \"post\": {\n        \"summary\": \"Monitor request latency\",\n        \"description\": \"Monitor request latency\",\n        \"operationId\": \"_monitor_request_latency\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//monitor/memory/usage\": {\n      \"post\": {\n        \"summary\": \"Monitor memory usage\",\n        \"description\": \"Monitor memory usage\",\n        \"operationId\": \"_monitor_memory_usage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//monitor/cache/effectiveness\": {\n      \"post\": {\n        \"summary\": \"Monitor cache hit rates\",\n        \"description\": \"Monitor cache hit rates\",\n        \"operationId\": \"_monitor_cache_effectiveness\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/cache/key\": {\n      \"post\": {\n        \"summary\": \"Generate cache key for request\",\n        \"description\": \"Generate cache key for request\",\n        \"operationId\": \"_generate_cache_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//update/circuit/breaker\": {\n      \"post\": {\n        \"summary\": \"Update circuit breaker state based on response\",\n        \"description\": \"Update circuit breaker state based on response\",\n        \"operationId\": \"_update_circuit_breaker\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/middleware/error\": {\n      \"post\": {\n        \"summary\": \"Handle middleware processing errors\",\n        \"description\": \"Handle middleware processing errors\",\n        \"operationId\": \"_handle_middleware_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"MiddlewareContext\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/middleware/stats\": {\n      \"get\": {\n        \"summary\": \"Get middleware statistics\",\n        \"description\": \"Get middleware statistics\",\n        \"operationId\": \"get_middleware_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//load/from/file\": {\n      \"post\": {\n        \"summary\": \"Load configuration from file\",\n        \"description\": \"Load configuration from file\",\n        \"operationId\": \"_load_from_file\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//load/defaults\": {\n      \"post\": {\n        \"summary\": \"Load default configuration\",\n        \"description\": \"Load default configuration\",\n        \"operationId\": \"_load_defaults\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"service\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"name\": {\n                          \"type\": \"string\"\n                        },\n                        \"version\": {\n                          \"type\": \"string\"\n                        },\n                        \"description\": {\n                          \"type\": \"string\"\n                        }\n                      }\n                    },\n                    \"performance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"max_workers\": {\n                          \"type\": \"number\"\n                        },\n                        \"thread_pool_size\": {\n                          \"type\": \"number\"\n                        },\n                        \"async_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"batch_size\": {\n                          \"type\": \"number\"\n                        }\n                      }\n                    },\n                    \"limits\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"max_memory_bytes\": {\n                          \"type\": \"number\"\n                        },\n                        \"max_dimensions\": {\n                          \"type\": \"number\"\n                        },\n                        \"max_request_size\": {\n                          \"type\": \"number\"\n                        },\n                        \"rate_limit_rps\": {\n                          \"type\": \"number\"\n                        },\n                        \"rate_limit_burst\": {\n                          \"type\": \"number\"\n                        }\n                      }\n                    },\n                    \"sheaf\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"default_cohomology_dim\": {\n                          \"type\": \"number\"\n                        },\n                        \"default_compression_ratio\": {\n                          \"type\": \"number\"\n                        },\n                        \"use_gpu\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"cache_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"cache_size_mb\": {\n                          \"type\": \"number\"\n                        }\n                      }\n                    },\n                    \"security\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"require_auth\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"token_prefix\": {\n                          \"type\": \"string\"\n                        },\n                        \"allowed_operations\": {\n                          \"type\": \"array\"\n                        }\n                      }\n                    },\n                    \"monitoring\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"metrics_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"health_check_interval\": {\n                          \"type\": \"number\"\n                        },\n                        \"log_level\": {\n                          \"type\": \"string\"\n                        },\n                        \"alert_thresholds\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"latency_ms\": {\n                              \"type\": \"number\"\n                            },\n                            \"error_rate\": {\n                              \"type\": \"number\"\n                            },\n                            \"memory_usage\": {\n                              \"type\": \"number\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"/save/configuration\": {\n      \"post\": {\n        \"summary\": \"Save configuration to file\",\n        \"description\": \"Save configuration to file\",\n        \"operationId\": \"save_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"encrypt\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: encrypt\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/configuration\": {\n      \"put\": {\n        \"summary\": \"Update configuration with new values\",\n        \"description\": \"Update configuration with new values\",\n        \"operationId\": \"update_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"updates\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: updates\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"validate\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: validate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//record/version\": {\n      \"post\": {\n        \"summary\": \"Record configuration version\",\n        \"description\": \"Record configuration version\",\n        \"operationId\": \"_record_version\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"source\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: source\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ConfigurationSource\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/configuration\": {\n      \"get\": {\n        \"summary\": \"Get configuration value by path\",\n        \"description\": \"Get configuration value by path\",\n        \"operationId\": \"get_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/configuration/history\": {\n      \"get\": {\n        \"summary\": \"Get configuration version history\",\n        \"description\": \"Get configuration version history\",\n        \"operationId\": \"get_configuration_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//collect/service/metrics\": {\n      \"post\": {\n        \"summary\": \"Collect service metrics\",\n        \"description\": \"Collect service metrics\",\n        \"operationId\": \"_collect_service_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//calculate/error/rate\": {\n      \"post\": {\n        \"summary\": \"Calculate error rate\",\n        \"description\": \"Calculate error rate\",\n        \"operationId\": \"_calculate_error_rate\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//calculate/average/latency\": {\n      \"post\": {\n        \"summary\": \"Calculate average latency in milliseconds\",\n        \"description\": \"Calculate average latency in milliseconds\",\n        \"operationId\": \"_calculate_average_latency\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//calculate/throughput\": {\n      \"post\": {\n        \"summary\": \"Calculate throughput in requests per second\",\n        \"description\": \"Calculate throughput in requests per second\",\n        \"operationId\": \"_calculate_throughput\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/health/status\": {\n      \"get\": {\n        \"summary\": \"Get health status for component(s)\",\n        \"description\": \"Get health status for component(s)\",\n        \"operationId\": \"get_health_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"component\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: component\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/overall/health\": {\n      \"get\": {\n        \"summary\": \"Get overall health status\",\n        \"description\": \"Get overall health status\",\n        \"operationId\": \"get_overall_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/health/report\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive health report\",\n        \"description\": \"Get comprehensive health report\",\n        \"operationId\": \"get_health_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"overall_status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/stats\": {\n      \"get\": {\n        \"summary\": \"Get cache statistics\",\n        \"description\": \"Get cache statistics\",\n        \"operationId\": \"get_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"size_bytes\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"max_size_bytes\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"utilization\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"hits\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"misses\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"hit_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"evictions\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"invalidations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"eviction_policy\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"ttl_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compression_enabled\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"persistence_enabled\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.sheaf_service_middleware\n\n## Overview\n\nSheaf Service Middleware & Configuration Module\n\nThis module implements middleware components and configuration management for the Sheaf service layer,\nincluding request/response processing, health monitoring, and caching capabilities.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_service_middleware.py`\n\n## Dependencies\n\n- pathlib\n- gpu_memory.gpu_memory_core\n- threading\n- json\n- datetime\n- service_interfaces.service_interfaces_core\n- time\n- numpy\n- enum\n- uuid\n- torch\n- traceback\n- sheaf_integration\n- re\n- zlib\n- typing\n- sheaf_core\n- pickle\n- hashlib\n- psutil\n- concurrent.futures\n- logging\n- cryptography.fernet\n- asyncio\n- base64\n- sheaf_service_core\n- sheaf_advanced\n- dataclasses\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 2463\n- **Code Lines:** 1924\n- **Comment Lines:** 143\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.sheaf.sheaf_service_middleware\n\nSheaf Service Middleware & Configuration Module\n\nThis module implements middleware components and configuration management for the Sheaf service layer,\nincluding request/response processing, health monitoring, and caching capabilities.\n\n## Components Overview\n\n- **Classes:** 12\n- **Functions:** 3\n- **Dependencies:** 30\n\n## Class Hierarchy\n\n- **MiddlewareType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 11\n- **MiddlewareContext**\n  - Methods: 0\n  - Complexity: 9\n- **SheafServiceMiddleware**\n  - Methods: 33\n  - Complexity: 163\n- **ConfigurationSource** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **ConfigurationVersion**\n  - Methods: 0\n  - Complexity: 6\n- **SheafServiceConfiguration**\n  - Methods: 34\n  - Complexity: 167\n- **HealthStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **HealthCheckResult**\n  - Methods: 0\n  - Complexity: 7\n- **SheafServiceHealthMonitor**\n  - Methods: 37\n  - Complexity: 169\n- **CacheEntry**\n  - Methods: 0\n  - Complexity: 10\n- **EvictionPolicy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **SheafServiceCache**\n  - Methods: 20\n  - Complexity: 103\n## Integration Points\n\n- Class: SheafServiceMiddleware\n- Class: SheafServiceConfiguration\n- Class: SheafServiceHealthMonitor\n- Class: SheafServiceCache\n- Function: add_error_handler\n- Function: _initialize_alert_handlers\n- Function: add_alert_handler\n- Function: _check_service_status\n- Function: _collect_service_metrics\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.sheaf_service_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_service_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.sheaf.sheaf_service_integration\n\nAPI endpoints for independent_core.compression_systems.sheaf.sheaf_service_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/cohomology/request\n\n#### POST //handle/cohomology/request\n\nHandle cohomology computation requests.\n\n**Parameters:**\n\n- **request** (query) *required*: string - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/cohomology/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/cohomology/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/compress/request\n\n#### POST //handle/compress/request\n\nHandle compression requests.\n\n**Parameters:**\n\n- **request** (query) *required*: string - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/compress/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/compress/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/decompress/request\n\n#### POST //handle/decompress/request\n\nHandle decompression requests.\n\n**Parameters:**\n\n- **request** (query) *required*: string - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/decompress/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/decompress/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/morphism/request\n\n#### POST //handle/morphism/request\n\nHandle sheaf morphism computation requests.\n\n**Parameters:**\n\n- **request** (query) *required*: string - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/morphism/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/morphism/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/restriction/request\n\n#### POST //handle/restriction/request\n\nHandle restriction map requests.\n\n**Parameters:**\n\n- **request** (query) *required*: string - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/restriction/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/restriction/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/routed/request\n\n#### POST //handle/routed/request\n\nHandle requests routed from domain router.\n\n**Parameters:**\n\n- **request** (query) *required*: string - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/routed/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/routed/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/cohomology/metrics\n\n#### GET /get/cohomology/metrics\n\nGet aggregated cohomology computation metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/cohomology/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/cohomology/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/compression/metrics\n\n#### GET /get/compression/metrics\n\nGet aggregated compression metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/compression/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/compression/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/decompression/metrics\n\n#### GET /get/decompression/metrics\n\nGet aggregated decompression metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/decompression/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/decompression/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/hourly/metrics\n\n#### GET /get/hourly/metrics\n\nGet hourly metrics for the last N hours.\n\n**Parameters:**\n\n- **hours_back** (query) *required*: int - Parameter: hours_back\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hourly/metrics?hours_back=example_hours_back\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hourly/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"hours_back\": \"example_hours_back\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/performance/summary\n\n#### GET /get/performance/summary\n\nGet overall performance summary.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /integrate/with/domain/router\n\n#### POST /integrate/with/domain/router\n\nIntegrate with the domain router for cross-domain communication.\n\n**Parameters:**\n\n- **domain_router** (query) *required*: Any - Parameter: domain_router\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/integrate/with/domain/router?domain_router=example_domain_router\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/integrate/with/domain/router\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"domain_router\": \"example_domain_router\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /record/cohomology/request\n\n#### POST /record/cohomology/request\n\nRecord metrics for a cohomology computation request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/record/cohomology/request?request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/record/cohomology/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /record/compression/request\n\n#### POST /record/compression/request\n\nRecord metrics for a compression request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/record/compression/request?request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/record/compression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /record/decompression/request\n\n#### POST /record/decompression/request\n\nRecord metrics for a decompression request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/record/decompression/request?request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/record/decompression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /register/service/endpoints\n\n#### POST /register/service/endpoints\n\nRegister all sheaf service endpoints.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/register/service/endpoints\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/register/service/endpoints\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /validate/cohomology/request\n\n#### POST /validate/cohomology/request\n\nValidate a cohomology computation request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/cohomology/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/cohomology/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/compression/request\n\n#### POST /validate/compression/request\n\nValidate a compression request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/compression/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/compression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/decompression/request\n\n#### POST /validate/decompression/request\n\nValidate a decompression request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/decompression/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/decompression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/service/response\n\n#### POST /validate/service/response\n\nValidate a service response.\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/service/response?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/service/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.sheaf.sheaf_service_integration\",\n    \"description\": \"API endpoints for independent_core.compression_systems.sheaf.sheaf_service_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/integrate/with/domain/router\": {\n      \"post\": {\n        \"summary\": \"Integrate with the domain router for cross-domain communication.\",\n        \"description\": \"Integrate with the domain router for cross-domain communication.\",\n        \"operationId\": \"integrate_with_domain_router\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"domain_router\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: domain_router\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/register/service/endpoints\": {\n      \"post\": {\n        \"summary\": \"Register all sheaf service endpoints.\",\n        \"description\": \"Register all sheaf service endpoints.\",\n        \"operationId\": \"register_service_endpoints\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/routed/request\": {\n      \"post\": {\n        \"summary\": \"Handle requests routed from domain router.\",\n        \"description\": \"Handle requests routed from domain router.\",\n        \"operationId\": \"_handle_routed_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/compress/request\": {\n      \"post\": {\n        \"summary\": \"Handle compression requests.\",\n        \"description\": \"Handle compression requests.\",\n        \"operationId\": \"_handle_compress_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"compressed_data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compression_ratio\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//handle/decompress/request\": {\n      \"post\": {\n        \"summary\": \"Handle decompression requests.\",\n        \"description\": \"Handle decompression requests.\",\n        \"operationId\": \"_handle_decompress_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//handle/cohomology/request\": {\n      \"post\": {\n        \"summary\": \"Handle cohomology computation requests.\",\n        \"description\": \"Handle cohomology computation requests.\",\n        \"operationId\": \"_handle_cohomology_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"cohomology_groups\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"degree\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//handle/restriction/request\": {\n      \"post\": {\n        \"summary\": \"Handle restriction map requests.\",\n        \"description\": \"Handle restriction map requests.\",\n        \"operationId\": \"_handle_restriction_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"restricted_sheaf\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"subset\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//handle/morphism/request\": {\n      \"post\": {\n        \"summary\": \"Handle sheaf morphism computation requests.\",\n        \"description\": \"Handle sheaf morphism computation requests.\",\n        \"operationId\": \"_handle_morphism_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    },\n                    \"morphism\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/validate/compression/request\": {\n      \"post\": {\n        \"summary\": \"Validate a compression request.\",\n        \"description\": \"Validate a compression request.\",\n        \"operationId\": \"validate_compression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/decompression/request\": {\n      \"post\": {\n        \"summary\": \"Validate a decompression request.\",\n        \"description\": \"Validate a decompression request.\",\n        \"operationId\": \"validate_decompression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/cohomology/request\": {\n      \"post\": {\n        \"summary\": \"Validate a cohomology computation request.\",\n        \"description\": \"Validate a cohomology computation request.\",\n        \"operationId\": \"validate_cohomology_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/service/response\": {\n      \"post\": {\n        \"summary\": \"Validate a service response.\",\n        \"description\": \"Validate a service response.\",\n        \"operationId\": \"validate_service_response\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/record/compression/request\": {\n      \"post\": {\n        \"summary\": \"Record metrics for a compression request.\",\n        \"description\": \"Record metrics for a compression request.\",\n        \"operationId\": \"record_compression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/record/decompression/request\": {\n      \"post\": {\n        \"summary\": \"Record metrics for a decompression request.\",\n        \"description\": \"Record metrics for a decompression request.\",\n        \"operationId\": \"record_decompression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/record/cohomology/request\": {\n      \"post\": {\n        \"summary\": \"Record metrics for a cohomology computation request.\",\n        \"description\": \"Record metrics for a cohomology computation request.\",\n        \"operationId\": \"record_cohomology_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/compression/metrics\": {\n      \"get\": {\n        \"summary\": \"Get aggregated compression metrics.\",\n        \"description\": \"Get aggregated compression metrics.\",\n        \"operationId\": \"get_compression_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/decompression/metrics\": {\n      \"get\": {\n        \"summary\": \"Get aggregated decompression metrics.\",\n        \"description\": \"Get aggregated decompression metrics.\",\n        \"operationId\": \"get_decompression_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/cohomology/metrics\": {\n      \"get\": {\n        \"summary\": \"Get aggregated cohomology computation metrics.\",\n        \"description\": \"Get aggregated cohomology computation metrics.\",\n        \"operationId\": \"get_cohomology_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/hourly/metrics\": {\n      \"get\": {\n        \"summary\": \"Get hourly metrics for the last N hours.\",\n        \"description\": \"Get hourly metrics for the last N hours.\",\n        \"operationId\": \"get_hourly_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"hours_back\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: hours_back\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/summary\": {\n      \"get\": {\n        \"summary\": \"Get overall performance summary.\",\n        \"description\": \"Get overall performance summary.\",\n        \"operationId\": \"get_performance_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.sheaf_service_integration\n\n## Overview\n\nSheaf Service Integration and Validation Components\n\nThis module provides service integration, validation, and metrics\nfor the Sheaf compression system within the Saraphis framework.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_service_integration.py`\n\n## Dependencies\n\n- numpy\n- logging\n- typing\n- independent_core.compression_systems.service_interfaces.service_interfaces_core\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1063\n- **Code Lines:** 789\n- **Comment Lines:** 79\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n\n",
        "integration_guide": "\n# independent_core.compression_systems.sheaf.sheaf_service_integration\n\nSheaf Service Integration and Validation Components\n\nThis module provides service integration, validation, and metrics\nfor the Sheaf compression system within the Saraphis framework.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_service_integration.py\n- **Total Classes:** 3\n- **Total Functions:** 0\n- **Dependencies:** numpy, logging, typing, independent_core.compression_systems.service_interfaces.service_interfaces_core, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (3):** SheafServiceIntegration, SheafServiceValidation, SheafServiceMetrics\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: SheafServiceIntegration\nClass: SheafServiceValidation\nClass: SheafServiceMetrics\nFunction: integrate_with_training_manager\nFunction: register_service_endpoints\nFunction: validate_service_response\n\n## Examples\n'min_samples': 1000,\n\n'min_samples': 500,\n\n'sample_count': len(latencies)\n\n'sample_count': 0\n",
        "architecture": "# Architecture: independent_core.compression_systems.sheaf.sheaf_service_integration\n\nSheaf Service Integration and Validation Components\n\nThis module provides service integration, validation, and metrics\nfor the Sheaf compression system within the Saraphis framework.\n\n## Components Overview\n\n- **Classes:** 3\n- **Functions:** 0\n- **Dependencies:** 9\n\n## Class Hierarchy\n\n- **SheafServiceIntegration**\n  - Methods: 16\n  - Complexity: 82\n- **SheafServiceValidation**\n  - Methods: 8\n  - Complexity: 98\n- **SheafServiceMetrics**\n  - Methods: 9\n  - Complexity: 72\n## Integration Points\n\n- Class: SheafServiceIntegration\n- Class: SheafServiceValidation\n- Class: SheafServiceMetrics\n- Function: integrate_with_training_manager\n- Function: register_service_endpoints\n- Function: validate_service_response\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.sheaf.sheaf_structures",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_structures.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.sheaf.sheaf_structures\n\nAPI endpoints for independent_core.compression_systems.sheaf.sheaf_structures\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/boundary/cells\n\n#### GET /get/boundary/cells\n\nGet cells on the boundary (fewer neighbors than expected for their dimension)\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/boundary/cells\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/boundary/cells\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/neighbors\n\n#### GET /get/neighbors\n\nGet neighbors of a cell\n\n**Parameters:**\n\n- **cell_id** (query) *required*: str - Parameter: cell_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/neighbors?cell_id=example_cell_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/neighbors\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"cell_id\": \"example_cell_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/overlap/region\n\n#### GET /get/overlap/region\n\nGet overlap region information between cells\n\n**Parameters:**\n\n- **cell1** (query) *required*: str - Parameter: cell1\n- **cell2** (query) *required*: str - Parameter: cell2\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/overlap/region?cell1=example_cell1&cell2=example_cell2\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/overlap/region\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"cell1\": \"example_cell1\",\n    \"cell2\": \"example_cell2\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/restriction\n\n#### GET /get/restriction\n\nGet restriction map between cells\n\n**Parameters:**\n\n- **source** (query) *required*: str - Parameter: source\n- **target** (query) *required*: str - Parameter: target\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/restriction?source=example_source&target=example_target\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/restriction\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"source\": \"example_source\",\n    \"target\": \"example_target\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/restriction/statistics\n\n#### GET /get/restriction/statistics\n\nGet statistics about restriction map usage\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/restriction/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/restriction/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/sheaf/statistics\n\n#### GET /get/sheaf/statistics\n\nGet comprehensive statistics about the sheaf structure\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/sheaf/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/sheaf/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /remove/cell\n\n#### DELETE /remove/cell\n\nRemove a cell and all associated data\n\n**Parameters:**\n\n- **cell_id** (query) *required*: str - Parameter: cell_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/cell?cell_id=example_cell_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/cell\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"cell_id\": \"example_cell_id\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.sheaf.sheaf_structures\",\n    \"description\": \"API endpoints for independent_core.compression_systems.sheaf.sheaf_structures\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/remove/cell\": {\n      \"delete\": {\n        \"summary\": \"Remove a cell and all associated data\",\n        \"description\": \"Remove a cell and all associated data\",\n        \"operationId\": \"remove_cell\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"cell_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: cell_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/restriction\": {\n      \"get\": {\n        \"summary\": \"Get restriction map between cells\",\n        \"description\": \"Get restriction map between cells\",\n        \"operationId\": \"get_restriction\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"source\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: source\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"target\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/overlap/region\": {\n      \"get\": {\n        \"summary\": \"Get overlap region information between cells\",\n        \"description\": \"Get overlap region information between cells\",\n        \"operationId\": \"get_overlap_region\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"cell1\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: cell1\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"cell2\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: cell2\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/neighbors\": {\n      \"get\": {\n        \"summary\": \"Get neighbors of a cell\",\n        \"description\": \"Get neighbors of a cell\",\n        \"operationId\": \"get_neighbors\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"cell_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: cell_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/boundary/cells\": {\n      \"get\": {\n        \"summary\": \"Get cells on the boundary (fewer neighbors than expected for their dimension)\",\n        \"description\": \"Get cells on the boundary (fewer neighbors than expected for their dimension)\",\n        \"operationId\": \"get_boundary_cells\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/sheaf/statistics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive statistics about the sheaf structure\",\n        \"description\": \"Get comprehensive statistics about the sheaf structure\",\n        \"operationId\": \"get_sheaf_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/restriction/statistics\": {\n      \"get\": {\n        \"summary\": \"Get statistics about restriction map usage\",\n        \"description\": \"Get statistics about restriction map usage\",\n        \"operationId\": \"get_restriction_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"source_cell\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"target_cell\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"restriction_type\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_hits\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_misses\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_hit_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cached_applications\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cached_compatibilities\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"has_overlap_region\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.sheaf.sheaf_structures\n\n## Overview\n\nCore sheaf data structures and topology management.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/sheaf/sheaf_structures.py`\n\n## Dependencies\n\n- numpy\n- typing\n- pickle\n- hashlib\n- dataclasses\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 623\n- **Code Lines:** 456\n- **Comment Lines:** 50\n\n## Complexity Indicators\n\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.sheaf.sheaf_structures\n\nCore sheaf data structures and topology management.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 2\n- **Functions:** 0\n- **Dependencies:** 7\n\n## Class Hierarchy\n\n- **CellularSheaf**\n  - Methods: 15\n  - Complexity: 139\n- **RestrictionMap**\n  - Methods: 14\n  - Complexity: 79\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.service_interfaces.integration_example",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/service_interfaces/integration_example.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.service_interfaces.integration_example\n\nAPI endpoints for independent_core.compression_systems.service_interfaces.integration_example\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /auth/interceptor\n\n#### POST /auth/interceptor\n\nAPI endpoint: auth_interceptor\n\n🔒 Authentication required\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000/auth/interceptor?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/auth/interceptor\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /cache/interceptor\n\n#### POST /cache/interceptor\n\nAPI endpoint: cache_interceptor\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/cache/interceptor?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/cache/interceptor\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /demonstrate/advanced/features\n\n#### POST /demonstrate/advanced/features\n\nDemonstrate advanced service interface features\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/demonstrate/advanced/features\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/demonstrate/advanced/features\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /demonstrate/api/layer/integration\n\n#### POST /demonstrate/api/layer/integration\n\nDemonstrate integration with API layer\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/demonstrate/api/layer/integration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/demonstrate/api/layer/integration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /demonstrate/compression/system/integration\n\n#### POST /demonstrate/compression/system/integration\n\nDemonstrate integration with compression systems\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/demonstrate/compression/system/integration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/demonstrate/compression/system/integration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /handle/request\n\n#### POST /handle/request\n\nHandle API request through service interface\n\n**Parameters:**\n\n- **endpoint** (query) *required*: str - Parameter: endpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/request?endpoint=example_endpoint\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"endpoint\": \"example_endpoint\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /integrate/service/interface/with/brain/core\n\n#### POST /integrate/service/interface/with/brain/core\n\nDemonstrate integration of Service Interface with BrainCore\n\n🔒 Authentication required\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000/integrate/service/interface/with/brain/core\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/integrate/service/interface/with/brain/core\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /logging/middleware\n\n#### POST /logging/middleware\n\nAPI endpoint: logging_middleware\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **next_func** (query) *required*: string - Parameter: next_func\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/logging/middleware?request=example_request&next_func=example_next_func\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/logging/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"next_func\": \"example_next_func\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /process/data\n\n#### POST /process/data\n\nAPI endpoint: process_data\n\n**Parameters:**\n\n- **data** (body) *required*: str - Parameter: data\n- **algorithm** (query) *required*: str - Parameter: algorithm\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000/process/data?algorithm=example_algorithm\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nparams = {\n    \"algorithm\": \"example_algorithm\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.service_interfaces.integration_example\",\n    \"description\": \"API endpoints for independent_core.compression_systems.service_interfaces.integration_example\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/integrate/service/interface/with/brain/core\": {\n      \"post\": {\n        \"summary\": \"Demonstrate integration of Service Interface with BrainCore\",\n        \"description\": \"Demonstrate integration of Service Interface with BrainCore\",\n        \"operationId\": \"integrate_service_interface_with_brain_core\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"sheaf_structure\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cohomology_degree\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compression_ratio\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"global_sections\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"/demonstrate/compression/system/integration\": {\n      \"post\": {\n        \"summary\": \"Demonstrate integration with compression systems\",\n        \"description\": \"Demonstrate integration with compression systems\",\n        \"operationId\": \"demonstrate_compression_system_integration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"memory_block\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"allocated_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"device_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"allocation_time\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/demonstrate/api/layer/integration\": {\n      \"post\": {\n        \"summary\": \"Demonstrate integration with API layer\",\n        \"description\": \"Demonstrate integration with API layer\",\n        \"operationId\": \"demonstrate_api_layer_integration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/demonstrate/advanced/features\": {\n      \"post\": {\n        \"summary\": \"Demonstrate advanced service interface features\",\n        \"description\": \"Demonstrate advanced service interface features\",\n        \"operationId\": \"demonstrate_advanced_features\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"call_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/logging/middleware\": {\n      \"post\": {\n        \"summary\": \"API endpoint: logging_middleware\",\n        \"description\": \"API endpoint: logging_middleware\",\n        \"operationId\": \"logging_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"next_func\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: next_func\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/auth/interceptor\": {\n      \"post\": {\n        \"summary\": \"API endpoint: auth_interceptor\",\n        \"description\": \"API endpoint: auth_interceptor\",\n        \"operationId\": \"auth_interceptor\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"/cache/interceptor\": {\n      \"post\": {\n        \"summary\": \"API endpoint: cache_interceptor\",\n        \"description\": \"API endpoint: cache_interceptor\",\n        \"operationId\": \"cache_interceptor\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/handle/request\": {\n      \"post\": {\n        \"summary\": \"Handle API request through service interface\",\n        \"description\": \"Handle API request through service interface\",\n        \"operationId\": \"handle_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"endpoint\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: endpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/process/data\": {\n      \"post\": {\n        \"summary\": \"API endpoint: process_data\",\n        \"description\": \"API endpoint: process_data\",\n        \"operationId\": \"process_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"algorithm\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: algorithm\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"processed_data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"algorithm\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"data\": {\n                    \"type\": \"str\",\n                    \"description\": \"Parameter: data\"\n                  }\n                },\n                \"required\": [\n                  \"data\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.service_interfaces.integration_example\n\n## Overview\n\nService Interface Integration Example\nDemonstrates integration with compression systems, BrainCore, and API layer\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/service_interfaces/integration_example.py`\n\n## Dependencies\n\n- typing\n- independent_core.compression_systems.service_interfaces\n- datetime\n- independent_core.brain_core\n- time\n\n## Code Structure\n\n- **Total Lines:** 558\n- **Code Lines:** 389\n- **Comment Lines:** 55\n\n## Complexity Indicators\n\n- High class count\n- High function count\n\n",
        "integration_guide": "\n# independent_core.compression_systems.service_interfaces.integration_example\n\nService Interface Integration Example\nDemonstrates integration with compression systems, BrainCore, and API layer\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/service_interfaces/integration_example.py\n- **Total Classes:** 9\n- **Total Functions:** 7\n- **Dependencies:** typing, independent_core.compression_systems.service_interfaces, datetime, independent_core.brain_core, time\n\n## Contents\n**Classes (9):** MockPadicCompressor, MockSheafCompressor, ErrorService, MockTensorCompressor, MockGPUMemoryManager, MockAPILayer, TestCompressionService, VersionedService, HealthMonitoredService\n**Functions (7):** integrate_service_interface_with_brain_core, demonstrate_compression_system_integration, demonstrate_api_layer_integration, demonstrate_advanced_features, logging_middleware, auth_interceptor, cache_interceptor\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: integrate_service_interface_with_brain_core\nClass: ErrorService\nClass: MockGPUMemoryManager\nClass: TestCompressionService\nClass: VersionedService\nClass: HealthMonitoredService\n\n## Examples\nService Interface Integration Example\n\nDemonstrates integration with compression systems, BrainCore, and API layer\n\"\"\"\n\n\n\"\"\"Demonstrate integration of Service Interface with BrainCore\"\"\"\n\n\nprint(\"=== Service Interface Integration Example ===\")\n\n# Initialize BrainCore\n\n# Example 1: Register mock compression services\n\n# Example 2: Service invocation\n\nmetadata={\"client\": \"example_client\"}\n\n# Example 3: Service contracts and validation\n\n# Example 4: Health monitoring\n\n# Example 5: Middleware demonstration\n\n# Example 6: Request/Response interceptors\n\n# Example 7: Error handling\n\ndef demonstrate_compression_system_integration():\n\n\"\"\"Demonstrate integration with compression systems\"\"\"\n\n\ndef demonstrate_api_layer_integration():\n\n\"\"\"Demonstrate integration with API layer\"\"\"\n\n\ndef demonstrate_advanced_features():\n\n\"\"\"Demonstrate advanced service interface features\"\"\"\n\n\n# Example 1: Version compatibility\n\n# Example 2: Service health monitoring\n\nprint(\"Advanced features demonstration complete!\")\n\n\n\n# Run integration demonstrations\n\ndemonstrate_compression_system_integration()\n\n# Run API layer integration\n\ndemonstrate_api_layer_integration()\n\n# Run advanced features\n\ndemonstrate_advanced_features()\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.service_interfaces.integration_example\n\nService Interface Integration Example\nDemonstrates integration with compression systems, BrainCore, and API layer\n\n## Components Overview\n\n- **Classes:** 9\n- **Functions:** 7\n- **Dependencies:** 5\n\n## Class Hierarchy\n\n- **MockPadicCompressor**\n  - Methods: 2\n  - Complexity: 6\n- **MockSheafCompressor**\n  - Methods: 2\n  - Complexity: 6\n- **ErrorService**\n  - Methods: 1\n  - Complexity: 3\n- **MockTensorCompressor**\n  - Methods: 2\n  - Complexity: 6\n- **MockGPUMemoryManager**\n  - Methods: 2\n  - Complexity: 6\n- **MockAPILayer**\n  - Methods: 2\n  - Complexity: 7\n- **TestCompressionService**\n  - Methods: 1\n  - Complexity: 3\n- **VersionedService**\n  - Methods: 2\n  - Complexity: 6\n- **HealthMonitoredService**\n  - Methods: 2\n  - Complexity: 7\n## Integration Points\n\n- Function: integrate_service_interface_with_brain_core\n- Class: ErrorService\n- Class: MockGPUMemoryManager\n- Class: TestCompressionService\n- Class: VersionedService\n- Class: HealthMonitoredService\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.service_interfaces.service_interfaces_core",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/service_interfaces/service_interfaces_core.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.service_interfaces.service_interfaces_core\n\nAPI endpoints for independent_core.compression_systems.service_interfaces.service_interfaces_core\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### ///post/init//\n\n#### POST ///post/init//\n\nValidate request on initialization\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///post/init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///post/init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST ///post/init//\n\nValidate response on initialization\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///post/init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///post/init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //calculate/health/score\n\n#### POST //calculate/health/score\n\nCalculate overall health score from metrics\n\n**Parameters:**\n\n- **service_metrics** (query) *required*: string - Parameter: service_metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//calculate/health/score?service_metrics=example_service_metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//calculate/health/score\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_metrics\": \"example_service_metrics\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //find/compatible/version\n\n#### POST //find/compatible/version\n\nFind compatible service version\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **requested_version** (query) *required*: str - Parameter: requested_version\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//find/compatible/version?service_name=example_service_name&requested_version=example_requested_version\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//find/compatible/version\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"requested_version\": \"example_requested_version\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //health/check/middleware\n\n#### POST //health/check/middleware\n\nHealth check middleware\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **next_func** (query) *required*: Callable - Parameter: next_func\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//health/check/middleware?request=example_request&next_func=example_next_func\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//health/check/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"next_func\": \"example_next_func\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //initialize/validation/rules\n\n#### POST //initialize/validation/rules\n\nInitialize default validation rules\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/validation/rules\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/validation/rules\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //invoke/service/handler\n\n#### POST //invoke/service/handler\n\nInvoke the actual service handler\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//invoke/service/handler?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//invoke/service/handler\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //metrics/middleware\n\n#### POST //metrics/middleware\n\nMetrics collection middleware\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **next_func** (query) *required*: Callable - Parameter: next_func\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//metrics/middleware?request=example_request&next_func=example_next_func\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//metrics/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"next_func\": \"example_next_func\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //process/middleware\n\n#### POST //process/middleware\n\nProcess request through middleware stack\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **index** (query) *required*: int - Parameter: index\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/middleware?request=example_request&index=example_index\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"index\": \"example_index\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validation/middleware\n\n#### POST //validation/middleware\n\nValidation middleware\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **next_func** (query) *required*: Callable - Parameter: next_func\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validation/middleware?request=example_request&next_func=example_next_func\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validation/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"next_func\": \"example_next_func\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /add/error\n\n#### POST /add/error\n\nAdd error to response\n\n**Parameters:**\n\n- **error_code** (query) *required*: str - Parameter: error_code\n- **error_message** (query) *required*: str - Parameter: error_message\n- **error_details** (query) *required*: string - Parameter: error_details\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/add/error?error_code=example_error_code&error_message=example_error_message&error_details=example_error_details\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/add/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error_code\": \"example_error_code\",\n    \"error_message\": \"example_error_message\",\n    \"error_details\": \"example_error_details\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /add/request/interceptor\n\n#### POST /add/request/interceptor\n\nAdd request interceptor\n\n**Parameters:**\n\n- **interceptor** (query) *required*: Callable - Parameter: interceptor\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/add/request/interceptor?interceptor=example_interceptor\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/add/request/interceptor\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"interceptor\": \"example_interceptor\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /add/response/interceptor\n\n#### POST /add/response/interceptor\n\nAdd response interceptor\n\n**Parameters:**\n\n- **interceptor** (query) *required*: Callable - Parameter: interceptor\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/add/response/interceptor?interceptor=example_interceptor\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/add/response/interceptor\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"interceptor\": \"example_interceptor\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/metrics/summary\n\n#### GET /get/metrics/summary\n\nGet metrics summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metrics/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metrics/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n#### GET /get/metrics/summary\n\nGet overall metrics summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metrics/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metrics/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service/health\n\n#### GET /get/service/health\n\nGet service health information\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **version** (query) *required*: string - Parameter: version\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/health?service_name=example_service_name&version=example_version\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"version\": \"example_version\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/service/info\n\n#### GET /get/service/info\n\nGet service information\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **version** (query) *required*: string - Parameter: version\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/info?service_name=example_service_name&version=example_version\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"version\": \"example_version\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/signature\n\n#### GET /get/signature\n\nGenerate request signature for caching/tracking\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/signature\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/signature\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /integrate/with/compression/systems\n\n#### POST /integrate/with/compression/systems\n\nIntegrate with compression systems\n\n**Parameters:**\n\n- **compression_system** (query) *required*: Any - Parameter: compression_system\n- **service_interface** (query) *required*: CompressionServiceInterface - Parameter: service_interface\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/integrate/with/compression/systems?compression_system=example_compression_system&service_interface=example_service_interface\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/integrate/with/compression/systems\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"compression_system\": \"example_compression_system\",\n    \"service_interface\": \"example_service_interface\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /invoke/service\n\n#### POST /invoke/service\n\nInvoke a compression service\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/invoke/service?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/invoke/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /is/success\n\n#### POST /is/success\n\nCheck if response indicates success\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/is/success\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/is/success\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /record/request\n\n#### POST /record/request\n\nRecord metrics for request/response pair\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/record/request?request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/record/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /to/dict\n\n#### POST /to/dict\n\nConvert request to dictionary\n\n🔒 Authentication required\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000/to/dict\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/to/dict\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST /to/dict\n\nConvert response to dictionary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/to/dict\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/to/dict\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /update/service/health\n\n#### PUT /update/service/health\n\nUpdate service health status\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **version** (query) *required*: str - Parameter: version\n- **health** (query) *required*: ServiceHealth - Parameter: health\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/service/health?service_name=example_service_name&version=example_version&health=example_health\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/service/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"version\": \"example_version\",\n    \"health\": \"example_health\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/request\n\n#### POST /validate/request\n\nValidate service request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/response\n\n#### POST /validate/response\n\nValidate service response\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/response?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/version/compatibility\n\n#### POST /validate/version/compatibility\n\nCheck version compatibility\n\n**Parameters:**\n\n- **requested_version** (query) *required*: str - Parameter: requested_version\n- **available_version** (query) *required*: str - Parameter: available_version\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/version/compatibility?requested_version=example_requested_version&available_version=example_available_version\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/version/compatibility\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"requested_version\": \"example_requested_version\",\n    \"available_version\": \"example_available_version\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.service_interfaces.service_interfaces_core\",\n    \"description\": \"API endpoints for independent_core.compression_systems.service_interfaces.service_interfaces_core\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///post/init//\": {\n      \"post\": {\n        \"summary\": \"Validate response on initialization\",\n        \"description\": \"Validate response on initialization\",\n        \"operationId\": \"__post_init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/to/dict\": {\n      \"post\": {\n        \"summary\": \"Convert response to dictionary\",\n        \"description\": \"Convert response to dictionary\",\n        \"operationId\": \"to_dict\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"request_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"errors\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metadata\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"processing_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"service_version\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/signature\": {\n      \"get\": {\n        \"summary\": \"Generate request signature for caching/tracking\",\n        \"description\": \"Generate request signature for caching/tracking\",\n        \"operationId\": \"get_signature\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/is/success\": {\n      \"post\": {\n        \"summary\": \"Check if response indicates success\",\n        \"description\": \"Check if response indicates success\",\n        \"operationId\": \"is_success\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/add/error\": {\n      \"post\": {\n        \"summary\": \"Add error to response\",\n        \"description\": \"Add error to response\",\n        \"operationId\": \"add_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error_code\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error_code\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"error_message\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error_message\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"error_details\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error_details\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/validation/rules\": {\n      \"post\": {\n        \"summary\": \"Initialize default validation rules\",\n        \"description\": \"Initialize default validation rules\",\n        \"operationId\": \"_initialize_validation_rules\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/request\": {\n      \"post\": {\n        \"summary\": \"Validate service request\",\n        \"description\": \"Validate service request\",\n        \"operationId\": \"validate_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/response\": {\n      \"post\": {\n        \"summary\": \"Validate service response\",\n        \"description\": \"Validate service response\",\n        \"operationId\": \"validate_response\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/version/compatibility\": {\n      \"post\": {\n        \"summary\": \"Check version compatibility\",\n        \"description\": \"Check version compatibility\",\n        \"operationId\": \"validate_version_compatibility\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"requested_version\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: requested_version\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"available_version\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: available_version\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/record/request\": {\n      \"post\": {\n        \"summary\": \"Record metrics for request/response pair\",\n        \"description\": \"Record metrics for request/response pair\",\n        \"operationId\": \"record_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/metrics/summary\": {\n      \"get\": {\n        \"summary\": \"Get overall metrics summary\",\n        \"description\": \"Get overall metrics summary\",\n        \"operationId\": \"get_metrics_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/service/info\": {\n      \"get\": {\n        \"summary\": \"Get service information\",\n        \"description\": \"Get service information\",\n        \"operationId\": \"get_service_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"version\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: version\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"version\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metadata\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"health\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/service/health\": {\n      \"put\": {\n        \"summary\": \"Update service health status\",\n        \"description\": \"Update service health status\",\n        \"operationId\": \"update_service_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"version\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: version\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"health\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: health\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceHealth\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/invoke/service\": {\n      \"post\": {\n        \"summary\": \"Invoke a compression service\",\n        \"description\": \"Invoke a compression service\",\n        \"operationId\": \"invoke_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//process/middleware\": {\n      \"post\": {\n        \"summary\": \"Process request through middleware stack\",\n        \"description\": \"Process request through middleware stack\",\n        \"operationId\": \"_process_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"index\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: index\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//invoke/service/handler\": {\n      \"post\": {\n        \"summary\": \"Invoke the actual service handler\",\n        \"description\": \"Invoke the actual service handler\",\n        \"operationId\": \"_invoke_service_handler\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//find/compatible/version\": {\n      \"post\": {\n        \"summary\": \"Find compatible service version\",\n        \"description\": \"Find compatible service version\",\n        \"operationId\": \"_find_compatible_version\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"requested_version\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: requested_version\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/add/request/interceptor\": {\n      \"post\": {\n        \"summary\": \"Add request interceptor\",\n        \"description\": \"Add request interceptor\",\n        \"operationId\": \"add_request_interceptor\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"interceptor\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: interceptor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Callable\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/add/response/interceptor\": {\n      \"post\": {\n        \"summary\": \"Add response interceptor\",\n        \"description\": \"Add response interceptor\",\n        \"operationId\": \"add_response_interceptor\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"interceptor\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: interceptor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Callable\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validation/middleware\": {\n      \"post\": {\n        \"summary\": \"Validation middleware\",\n        \"description\": \"Validation middleware\",\n        \"operationId\": \"_validation_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"next_func\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: next_func\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Callable\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//metrics/middleware\": {\n      \"post\": {\n        \"summary\": \"Metrics collection middleware\",\n        \"description\": \"Metrics collection middleware\",\n        \"operationId\": \"_metrics_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"next_func\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: next_func\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Callable\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//health/check/middleware\": {\n      \"post\": {\n        \"summary\": \"Health check middleware\",\n        \"description\": \"Health check middleware\",\n        \"operationId\": \"_health_check_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"next_func\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: next_func\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Callable\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/service/health\": {\n      \"get\": {\n        \"summary\": \"Get service health information\",\n        \"description\": \"Get service health information\",\n        \"operationId\": \"get_service_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"version\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: version\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"service\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"overall_health\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//calculate/health/score\": {\n      \"post\": {\n        \"summary\": \"Calculate overall health score from metrics\",\n        \"description\": \"Calculate overall health score from metrics\",\n        \"operationId\": \"_calculate_health_score\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_metrics\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/integrate/with/compression/systems\": {\n      \"post\": {\n        \"summary\": \"Integrate with compression systems\",\n        \"description\": \"Integrate with compression systems\",\n        \"operationId\": \"integrate_with_compression_systems\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"compression_system\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: compression_system\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"service_interface\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_interface\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"CompressionServiceInterface\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.service_interfaces.service_interfaces_core\n\n## Overview\n\nService Interface Definitions for Compression Systems\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/service_interfaces/service_interfaces_core.py`\n\n## Dependencies\n\n- json\n- enum\n- typing\n- uuid\n- abc\n- hashlib\n- dataclasses\n- datetime\n- re\n- time\n\n## Code Structure\n\n- **Total Lines:** 931\n- **Code Lines:** 700\n- **Comment Lines:** 60\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.service_interfaces.service_interfaces_core\n\nService Interface Definitions for Compression Systems\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 9\n- **Functions:** 0\n- **Dependencies:** 10\n\n## Class Hierarchy\n\n- **ServiceStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **ServiceHealth** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **ServiceRequest**\n  - Methods: 3\n  - Complexity: 25\n- **ServiceResponse**\n  - Methods: 4\n  - Complexity: 28\n- **ServiceValidation**\n  - Methods: 8\n  - Complexity: 62\n- **ServiceMetrics**\n  - Methods: 3\n  - Complexity: 19\n- **ServiceRegistry**\n  - Methods: 7\n  - Complexity: 61\n- **CompressionServiceInterface**\n  - Methods: 19\n  - Complexity: 96\n- **ServiceInterfaceIntegration**\n  - Methods: 3\n  - Complexity: 10\n## Integration Points\n\n- Class: ServiceStatus\n- Class: ServiceHealth\n- Class: ServiceRequest\n- Class: ServiceResponse\n- Class: ServiceValidation\n- Class: ServiceMetrics\n- Class: ServiceRegistry\n- Class: CompressionServiceInterface\n- Class: ServiceInterfaceIntegration\n- Function: register_service_contract\n- Function: register_service\n- Function: unregister_service\n- Function: discover_service\n- Function: list_services\n- Function: get_service_info\n- Function: update_service_health\n- Function: register_service\n- Function: unregister_service\n- Function: invoke_service\n- Function: _invoke_service_handler\n- Function: get_service_health\n- Function: register_service_contract\n- Function: list_services\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.gpu_memory.gpu_memory_core",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/gpu_memory/gpu_memory_core.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.gpu_memory.gpu_memory_core\n\nAPI endpoints for independent_core.compression_systems.gpu_memory.gpu_memory_core\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //prewarm/memory/allocator\n\n#### POST //prewarm/memory/allocator\n\nPre-warm the memory allocator for large allocations.\n\n**Parameters:**\n\n- **memory_mb** (query) *required*: float - Parameter: memory_mb\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//prewarm/memory/allocator?memory_mb=example_memory_mb\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//prewarm/memory/allocator\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"memory_mb\": \"example_memory_mb\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/memory/info\n\n#### GET /get/memory/info\n\nGet comprehensive memory information.\n\nArgs:\n    device_id: Device ID (None for current device)\n    \nReturns:\n    Memory information dictionary\n\n**Parameters:**\n\n- **device_id** (query) *required*: integer - Device ID (None for current device)\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/memory/info?device_id=example_device_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/memory/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"device_id\": \"example_device_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/performance/metrics\n\n#### GET /get/performance/metrics\n\nGet comprehensive performance metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/stream\n\n#### GET /get/stream\n\nGet a CUDA stream from the pool.\n\nArgs:\n    device_id: Device ID (None for current device)\n    priority: Stream priority ('high', 'normal', 'low')\n    \nYields:\n    CUDA stream\n\n**Parameters:**\n\n- **device_id** (query) *required*: integer - Device ID (None for current device)\n- **priority** (query) *required*: str - Stream priority ('high', 'normal', 'low')\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/stream?device_id=example_device_id&priority=example_priority\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/stream\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"device_id\": \"example_device_id\",\n    \"priority\": \"example_priority\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /prepare/for/computation\n\n#### POST /prepare/for/computation\n\nPrepare GPU resources for computation.\n\nArgs:\n    estimated_memory_mb: Estimated memory requirement in MB\n    computation_type: Type of computation for optimization\n    \nReturns:\n    Preparation result with optimization details\n\n**Parameters:**\n\n- **estimated_memory_mb** (query) *required*: float - Estimated memory requirement in MB\n- **computation_type** (query) *required*: str - Type of computation for optimization\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/prepare/for/computation?estimated_memory_mb=example_estimated_memory_mb&computation_type=example_computation_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/prepare/for/computation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"estimated_memory_mb\": \"example_estimated_memory_mb\",\n    \"computation_type\": \"example_computation_type\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.gpu_memory.gpu_memory_core\",\n    \"description\": \"API endpoints for independent_core.compression_systems.gpu_memory.gpu_memory_core\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/prepare/for/computation\": {\n      \"post\": {\n        \"summary\": \"Prepare GPU resources for computation.\\n\\nArgs:\\n    estimated_memory_mb: Estimated memory requirement in MB\\n    computation_type: Type of computation for optimization\\n    \\nReturns:\\n    Preparation result with optimization details\",\n        \"description\": \"Prepare GPU resources for computation.\\n\\nArgs:\\n    estimated_memory_mb: Estimated memory requirement in MB\\n    computation_type: Type of computation for optimization\\n    \\nReturns:\\n    Preparation result with optimization details\",\n        \"operationId\": \"prepare_for_computation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"estimated_memory_mb\",\n            \"in\": \"query\",\n            \"description\": \"Estimated memory requirement in MB\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"computation_type\",\n            \"in\": \"query\",\n            \"description\": \"Type of computation for optimization\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"success\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"available_memory_mb\": {\n                      \"type\": \"number\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/stream\": {\n      \"get\": {\n        \"summary\": \"Get a CUDA stream from the pool.\\n\\nArgs:\\n    device_id: Device ID (None for current device)\\n    priority: Stream priority ('high', 'normal', 'low')\\n    \\nYields:\\n    CUDA stream\",\n        \"description\": \"Get a CUDA stream from the pool.\\n\\nArgs:\\n    device_id: Device ID (None for current device)\\n    priority: Stream priority ('high', 'normal', 'low')\\n    \\nYields:\\n    CUDA stream\",\n        \"operationId\": \"get_stream\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"device_id\",\n            \"in\": \"query\",\n            \"description\": \"Device ID (None for current device)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          },\n          {\n            \"name\": \"priority\",\n            \"in\": \"query\",\n            \"description\": \"Stream priority ('high', 'normal', 'low')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/memory/info\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive memory information.\\n\\nArgs:\\n    device_id: Device ID (None for current device)\\n    \\nReturns:\\n    Memory information dictionary\",\n        \"description\": \"Get comprehensive memory information.\\n\\nArgs:\\n    device_id: Device ID (None for current device)\\n    \\nReturns:\\n    Memory information dictionary\",\n        \"operationId\": \"get_memory_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"device_id\",\n            \"in\": \"query\",\n            \"description\": \"Device ID (None for current device)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"device_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//prewarm/memory/allocator\": {\n      \"post\": {\n        \"summary\": \"Pre-warm the memory allocator for large allocations.\",\n        \"description\": \"Pre-warm the memory allocator for large allocations.\",\n        \"operationId\": \"_prewarm_memory_allocator\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"memory_mb\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: memory_mb\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive performance metrics.\",\n        \"description\": \"Get comprehensive performance metrics.\",\n        \"operationId\": \"get_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"devices\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_streams\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"memory_info\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_interval\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"memory_threshold\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"fragmentation_threshold\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.gpu_memory.gpu_memory_core\n\n## Overview\n\nGPU Memory Optimizer - Comprehensive GPU memory optimization and CUDA stream management.\nHandles GPU memory allocation, stream optimization, kernel management, and coordinated resource optimization.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/gpu_memory/gpu_memory_core.py`\n\n## Dependencies\n\n- functools\n- numpy\n- torch.cuda\n- logging\n- contextlib\n- typing\n- warnings\n- torch\n- asyncio\n- gc\n- threading\n- dataclasses\n- weakref\n- queue\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1484\n- **Code Lines:** 1083\n- **Comment Lines:** 118\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Async programming\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.gpu_memory.gpu_memory_core\n\nGPU Memory Optimizer - Comprehensive GPU memory optimization and CUDA stream management.\nHandles GPU memory allocation, stream optimization, kernel management, and coordinated resource optimization.\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **CUDAStream**\n  - Methods: 0\n  - Complexity: 9\n- **GPUMemoryBlock**\n  - Methods: 0\n  - Complexity: 10\n- **GPUOptimizationResult**\n  - Methods: 0\n  - Complexity: 8\n- **KernelConfig**\n  - Methods: 0\n  - Complexity: 7\n- **GPUMemoryOptimizer**\n  - Methods: 55\n  - Complexity: 305\n- **GPUMemoryIntegration**\n  - Methods: 3\n  - Complexity: 11\n## Integration Points\n\n- Function: integrate_with_training_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.gpu_memory.integration_example",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/gpu_memory/integration_example.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.gpu_memory.integration_example",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.gpu_memory.integration_example\n\n## Overview\n\nGPU Memory Manager Integration Example\nDemonstrates integration with BrainCore, TrainingManager, and compression systems\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/gpu_memory/integration_example.py`\n\n## Dependencies\n\n- numpy\n- typing\n- torch\n- independent_core.compression_systems.gpu_memory\n- independent_core.brain_core\n- time\n\n## Code Structure\n\n- **Total Lines:** 405\n- **Code Lines:** 253\n- **Comment Lines:** 51\n\n",
        "integration_guide": "\n# independent_core.compression_systems.gpu_memory.integration_example\n\nGPU Memory Manager Integration Example\nDemonstrates integration with BrainCore, TrainingManager, and compression systems\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/gpu_memory/integration_example.py\n- **Total Classes:** 2\n- **Total Functions:** 4\n- **Dependencies:** numpy, typing, torch, independent_core.compression_systems.gpu_memory, independent_core.brain_core, time\n\n## Contents\n**Classes (2):** MockTrainingManager, MockCompressionSystem\n**Functions (4):** integrate_gpu_memory_with_brain_core, demonstrate_training_manager_integration, demonstrate_compression_integration, demonstrate_error_handling\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: demonstrate_training_manager_integration\nClass: MockTrainingManager\n\n## Examples\nGPU Memory Manager Integration Example\n\nDemonstrates integration with BrainCore, TrainingManager, and compression systems\n\"\"\"\n\n\n\"\"\"Demonstrate integration of GPU Memory Manager with BrainCore\"\"\"\n\n\nprint(\"=== GPU Memory Manager Integration Example ===\")\n\n# Check CUDA availability\n\nprint(\"CUDA not available, using mock demonstration\")\n\n'max_gpu_memory_usage': 0.85\n\n# Example 1: Basic memory allocation\n\ntensor = gpu_manager.allocate_memory(tensor_size, operation=\"example_allocation\")\n\nprint(f\"   Memory utilization: {stats['memory_usage']['utilization']:.2%}\")\n\n# Deallocate\n\n# Example 2: Stream management\n\n# Example 3: Memory optimization\n\n# Example 4: Multi-device operations (if available)\n\n# Example 5: Memory pool statistics\n\n# Example 6: Performance benchmarking\n\ndef demonstrate_training_manager_integration():\n\n\"\"\"Demonstrate integration with TrainingManager\"\"\"\n\n\nprint(\"CUDA not available, skipping demonstration\")\n\n# Mock TrainingManager for demonstration\n\ndef demonstrate_compression_integration():\n\n\"\"\"Demonstrate integration with compression systems\"\"\"\n\n\nprint(\"CUDA not available, skipping demonstration\")\n\ndef demonstrate_error_handling():\n\n\"\"\"Demonstrate NO FALLBACKS error handling\"\"\"\n\n\n# Run integration demonstrations\n\ndemonstrate_training_manager_integration()\n\n# Run compression integration\n\ndemonstrate_compression_integration()\n\n# Test error handling\n\ndemonstrate_error_handling()\n\n# Cleanup\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.integration.gac_padic_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/integration/gac_padic_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.integration.gac_padic_integration\n\nAPI endpoints for independent_core.compression_systems.integration.gac_padic_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/component/info\n\n#### GET /get/component/info\n\nGet component information including P-adic statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/info\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/padic/performance/metrics\n\n#### GET /get/padic/performance/metrics\n\nGet detailed P-adic performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/padic/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/padic/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service/metrics\n\n#### GET /get/service/metrics\n\nGet service performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.integration.gac_padic_integration\",\n    \"description\": \"API endpoints for independent_core.compression_systems.integration.gac_padic_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/component/info\": {\n      \"get\": {\n        \"summary\": \"Get component information including P-adic statistics\",\n        \"description\": \"Get component information including P-adic statistics\",\n        \"operationId\": \"get_component_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/padic/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get detailed P-adic performance metrics\",\n        \"description\": \"Get detailed P-adic performance metrics\",\n        \"operationId\": \"get_padic_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_compressions\": {\n                      \"type\": \"number\"\n                    },\n                    \"padic_usage_rate\": {\n                      \"type\": \"number\"\n                    },\n                    \"topk_usage_rate\": {\n                      \"type\": \"number\"\n                    },\n                    \"failure_rate\": {\n                      \"type\": \"number\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/service/metrics\": {\n      \"get\": {\n        \"summary\": \"Get service performance metrics\",\n        \"description\": \"Get service performance metrics\",\n        \"operationId\": \"get_service_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"service_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"supported_data_types\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"padic_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"memory_usage\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance_stats\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.integration.gac_padic_integration\n\n## Overview\n\nIntegration of P-adic compression with GAC GradientCompressionComponent.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/integration/gac_padic_integration.py`\n\n## Dependencies\n\n- numpy\n- typing\n- torch\n- padic.padic_gradient\n- gac_system.gac_components\n- services.compression_service\n- time\n\n## Code Structure\n\n- **Total Lines:** 337\n- **Code Lines:** 239\n- **Comment Lines:** 29\n\n## Complexity Indicators\n\n- Async programming\n\n",
        "integration_guide": "\n# independent_core.compression_systems.integration.gac_padic_integration\n\nIntegration of P-adic compression with GAC GradientCompressionComponent.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/integration/gac_padic_integration.py\n- **Total Classes:** 2\n- **Total Functions:** 0\n- **Dependencies:** numpy, typing, torch, padic.padic_gradient, gac_system.gac_components, services.compression_service, time\n\n## Contents\n**Classes (2):** PadicGradientCompressionComponent, PadicCompressionService\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: PadicCompressionService\nFunction: _validate_service_config\nFunction: get_service_metrics\n\n## Examples\n\"padic_memory_usage\": self.padic_compressor.get_memory_usage(),\n\n\"padic_usage_rate\": 0.0,\n\n\"topk_usage_rate\": 0.0,\n\n\"padic_usage_rate\": self.padic_stats['padic_compressions'] / total_compressions,\n\n\"topk_usage_rate\": self.padic_stats['topk_compressions'] / total_compressions,\n\n\"memory_efficiency\": self.padic_compressor.get_memory_usage()\n\n'memory_usage': self.padic_compressor.get_memory_usage(),\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_integration_tests",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_integration_tests.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.hybrid_integration_tests",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_integration_tests\n\n## Overview\n\nHybrid Integration Tests - Integration testing for hybrid system components\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_integration_tests.py`\n\n## Dependencies\n\n- hybrid_padic_compressor\n- hybrid_performance_tuner\n- hybrid_performance_analyzer\n- performance_optimizer\n- padic_encoder\n- threading\n- datetime\n- time\n- dynamic_switching_manager\n- hybrid_performance_monitor\n- math\n- enum\n- uuid\n- torch\n- hybrid_padic_structures\n- typing\n- hybrid_test_suite\n- hybrid_performance_optimizer\n- concurrent.futures\n- logging\n- unittest\n- dataclasses\n- collections\n- hybrid_validation_framework\n\n## Code Structure\n\n- **Total Lines:** 1114\n- **Code Lines:** 833\n- **Comment Lines:** 85\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.hybrid_integration_tests\n\nHybrid Integration Tests - Integration testing for hybrid system components\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_integration_tests.py\n- **Total Classes:** 6\n- **Total Functions:** 3\n- **Dependencies:** hybrid_padic_compressor, hybrid_performance_tuner, hybrid_performance_analyzer, performance_optimizer, padic_encoder, threading, datetime, time, dynamic_switching_manager, hybrid_performance_monitor, math, enum, uuid, torch, hybrid_padic_structures, typing, hybrid_test_suite, hybrid_performance_optimizer, concurrent.futures, logging, unittest, dataclasses, collections, hybrid_validation_framework\n\n## Contents\n**Classes (6):** IntegrationTestType, IntegrationTestResult, IntegrationTestExecution, IntegrationTestConfig, IntegrationTestReport, HybridIntegrationTests\n**Functions (3):** run_hybrid_integration_tests, worker_operation, test_operation\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nNo examples available\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_integration_tests\n\nHybrid Integration Tests - Integration testing for hybrid system components\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 3\n- **Dependencies:** 24\n\n## Class Hierarchy\n\n- **IntegrationTestType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **IntegrationTestResult** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **IntegrationTestExecution**\n  - Methods: 1\n  - Complexity: 16\n- **IntegrationTestConfig**\n  - Methods: 1\n  - Complexity: 23\n- **IntegrationTestReport**\n  - Methods: 1\n  - Complexity: 17\n- **HybridIntegrationTests**\n  - Methods: 18\n  - Complexity: 119\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_optimization",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_optimization.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_optimization\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_optimization\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/hybrid/adam/optimizer\n\n#### POST /create/hybrid/adam/optimizer\n\nCreate Adam optimizer for hybrid p-adic weights.\n\nArgs:\n    params: List of hybrid parameters to optimize\n    lr: Learning rate\n    betas: Coefficients for computing running averages\n    eps: Term added for numerical stability\n    weight_decay: Weight decay (L2 penalty)\n    amsgrad: Use AMSGrad variant\n    name: Optional optimizer name\n    \nReturns:\n    Optimizer ID string\n    \nRaises:\n    ValueError: If parameters are invalid\n\n**Parameters:**\n\n- **params** (query) *required*: string - List of hybrid parameters to optimize\n- **lr** (query) *required*: float - Learning rate\n- **betas** (query) *required*: string - Coefficients for computing running averages\n- **eps** (query) *required*: float - Term added for numerical stability\n- **weight_decay** (query) *required*: float - Weight decay (L2 penalty)\n- **amsgrad** (query) *required*: bool - Use AMSGrad variant\n- **name** (query) *required*: string - Optional optimizer name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/hybrid/adam/optimizer?params=example_params&lr=example_lr&betas=example_betas&eps=example_eps&weight_decay=example_weight_decay&amsgrad=example_amsgrad&name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/hybrid/adam/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"params\": \"example_params\",\n    \"lr\": \"example_lr\",\n    \"betas\": \"example_betas\",\n    \"eps\": \"example_eps\",\n    \"weight_decay\": \"example_weight_decay\",\n    \"amsgrad\": \"example_amsgrad\",\n    \"name\": \"example_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/hybrid/rmsprop/optimizer\n\n#### POST /create/hybrid/rmsprop/optimizer\n\nCreate RMSprop optimizer for hybrid p-adic weights.\n\nArgs:\n    params: List of hybrid parameters to optimize\n    lr: Learning rate\n    alpha: Smoothing constant\n    eps: Term added for numerical stability\n    weight_decay: Weight decay (L2 penalty)\n    momentum: Momentum factor\n    centered: Compute centered RMSprop\n    name: Optional optimizer name\n    \nReturns:\n    Optimizer ID string\n    \nRaises:\n    ValueError: If parameters are invalid\n\n**Parameters:**\n\n- **params** (query) *required*: string - List of hybrid parameters to optimize\n- **lr** (query) *required*: float - Learning rate\n- **alpha** (query) *required*: float - Smoothing constant\n- **eps** (query) *required*: float - Term added for numerical stability\n- **weight_decay** (query) *required*: float - Weight decay (L2 penalty)\n- **momentum** (query) *required*: float - Momentum factor\n- **centered** (query) *required*: bool - Compute centered RMSprop\n- **name** (query) *required*: string - Optional optimizer name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/hybrid/rmsprop/optimizer?params=example_params&lr=example_lr&alpha=example_alpha&eps=example_eps&weight_decay=example_weight_decay&momentum=example_momentum&centered=example_centered&name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/hybrid/rmsprop/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"params\": \"example_params\",\n    \"lr\": \"example_lr\",\n    \"alpha\": \"example_alpha\",\n    \"eps\": \"example_eps\",\n    \"weight_decay\": \"example_weight_decay\",\n    \"momentum\": \"example_momentum\",\n    \"centered\": \"example_centered\",\n    \"name\": \"example_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/hybrid/sgd/optimizer\n\n#### POST /create/hybrid/sgd/optimizer\n\nCreate SGD optimizer for hybrid p-adic weights.\n\nArgs:\n    params: List of hybrid parameters to optimize\n    lr: Learning rate\n    momentum: Momentum factor\n    dampening: Dampening for momentum\n    weight_decay: Weight decay (L2 penalty)\n    nesterov: Enable Nesterov momentum\n    name: Optional optimizer name\n    \nReturns:\n    Optimizer ID string\n    \nRaises:\n    ValueError: If parameters are invalid\n\n**Parameters:**\n\n- **params** (query) *required*: string - List of hybrid parameters to optimize\n- **lr** (query) *required*: float - Learning rate\n- **momentum** (query) *required*: float - Momentum factor\n- **dampening** (query) *required*: float - Dampening for momentum\n- **weight_decay** (query) *required*: float - Weight decay (L2 penalty)\n- **nesterov** (query) *required*: bool - Enable Nesterov momentum\n- **name** (query) *required*: string - Optional optimizer name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/hybrid/sgd/optimizer?params=example_params&lr=example_lr&momentum=example_momentum&dampening=example_dampening&weight_decay=example_weight_decay&nesterov=example_nesterov&name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/hybrid/sgd/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"params\": \"example_params\",\n    \"lr\": \"example_lr\",\n    \"momentum\": \"example_momentum\",\n    \"dampening\": \"example_dampening\",\n    \"weight_decay\": \"example_weight_decay\",\n    \"nesterov\": \"example_nesterov\",\n    \"name\": \"example_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/hybrid/optimization/stats\n\n#### GET /get/hybrid/optimization/stats\n\nGet comprehensive optimization statistics.\n\nReturns:\n    Dictionary containing optimization statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hybrid/optimization/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hybrid/optimization/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/optimizer/info\n\n#### GET /get/optimizer/info\n\nGet detailed information about specific optimizer.\n\nArgs:\n    optimizer_name: Name of optimizer\n    \nReturns:\n    Dictionary containing optimizer information\n\n**Parameters:**\n\n- **optimizer_name** (query) *required*: str - Name of optimizer\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimizer/info?optimizer_name=example_optimizer_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimizer/info\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"optimizer_name\": \"example_optimizer_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /remove/optimizer\n\n#### DELETE /remove/optimizer\n\nRemove optimizer and free its resources.\n\nArgs:\n    optimizer_name: Name of optimizer to remove\n    \nReturns:\n    True if removed successfully\n\n**Parameters:**\n\n- **optimizer_name** (query) *required*: str - Name of optimizer to remove\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/optimizer?optimizer_name=example_optimizer_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"optimizer_name\": \"example_optimizer_name\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /update/step\n\n#### PUT /update/step\n\nUpdate statistics with optimization step\n\n**Parameters:**\n\n- **optimizer_type** (query) *required*: str - Parameter: optimizer_type\n- **step_time_ms** (query) *required*: float - Parameter: step_time_ms\n- **success** (query) *required*: bool - Parameter: success\n- **param_count** (query) *required*: int - Parameter: param_count\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/step?optimizer_type=example_optimizer_type&step_time_ms=example_step_time_ms&success=example_success&param_count=example_param_count\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/step\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"optimizer_type\": \"example_optimizer_type\",\n    \"step_time_ms\": \"example_step_time_ms\",\n    \"success\": \"example_success\",\n    \"param_count\": \"example_param_count\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_optimization\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_optimization\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/step\": {\n      \"put\": {\n        \"summary\": \"Update statistics with optimization step\",\n        \"description\": \"Update statistics with optimization step\",\n        \"operationId\": \"update_step\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"optimizer_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: optimizer_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"step_time_ms\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: step_time_ms\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"success\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: success\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"param_count\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: param_count\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/hybrid/sgd/optimizer\": {\n      \"post\": {\n        \"summary\": \"Create SGD optimizer for hybrid p-adic weights.\\n\\nArgs:\\n    params: List of hybrid parameters to optimize\\n    lr: Learning rate\\n    momentum: Momentum factor\\n    dampening: Dampening for momentum\\n    weight_decay: Weight decay (L2 penalty)\\n    nesterov: Enable Nesterov momentum\\n    name: Optional optimizer name\\n    \\nReturns:\\n    Optimizer ID string\\n    \\nRaises:\\n    ValueError: If parameters are invalid\",\n        \"description\": \"Create SGD optimizer for hybrid p-adic weights.\\n\\nArgs:\\n    params: List of hybrid parameters to optimize\\n    lr: Learning rate\\n    momentum: Momentum factor\\n    dampening: Dampening for momentum\\n    weight_decay: Weight decay (L2 penalty)\\n    nesterov: Enable Nesterov momentum\\n    name: Optional optimizer name\\n    \\nReturns:\\n    Optimizer ID string\\n    \\nRaises:\\n    ValueError: If parameters are invalid\",\n        \"operationId\": \"create_hybrid_sgd_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"params\",\n            \"in\": \"query\",\n            \"description\": \"List of hybrid parameters to optimize\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"lr\",\n            \"in\": \"query\",\n            \"description\": \"Learning rate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"momentum\",\n            \"in\": \"query\",\n            \"description\": \"Momentum factor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"dampening\",\n            \"in\": \"query\",\n            \"description\": \"Dampening for momentum\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"weight_decay\",\n            \"in\": \"query\",\n            \"description\": \"Weight decay (L2 penalty)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"nesterov\",\n            \"in\": \"query\",\n            \"description\": \"Enable Nesterov momentum\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Optional optimizer name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/hybrid/adam/optimizer\": {\n      \"post\": {\n        \"summary\": \"Create Adam optimizer for hybrid p-adic weights.\\n\\nArgs:\\n    params: List of hybrid parameters to optimize\\n    lr: Learning rate\\n    betas: Coefficients for computing running averages\\n    eps: Term added for numerical stability\\n    weight_decay: Weight decay (L2 penalty)\\n    amsgrad: Use AMSGrad variant\\n    name: Optional optimizer name\\n    \\nReturns:\\n    Optimizer ID string\\n    \\nRaises:\\n    ValueError: If parameters are invalid\",\n        \"description\": \"Create Adam optimizer for hybrid p-adic weights.\\n\\nArgs:\\n    params: List of hybrid parameters to optimize\\n    lr: Learning rate\\n    betas: Coefficients for computing running averages\\n    eps: Term added for numerical stability\\n    weight_decay: Weight decay (L2 penalty)\\n    amsgrad: Use AMSGrad variant\\n    name: Optional optimizer name\\n    \\nReturns:\\n    Optimizer ID string\\n    \\nRaises:\\n    ValueError: If parameters are invalid\",\n        \"operationId\": \"create_hybrid_adam_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"params\",\n            \"in\": \"query\",\n            \"description\": \"List of hybrid parameters to optimize\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"lr\",\n            \"in\": \"query\",\n            \"description\": \"Learning rate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"betas\",\n            \"in\": \"query\",\n            \"description\": \"Coefficients for computing running averages\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"eps\",\n            \"in\": \"query\",\n            \"description\": \"Term added for numerical stability\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"weight_decay\",\n            \"in\": \"query\",\n            \"description\": \"Weight decay (L2 penalty)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"amsgrad\",\n            \"in\": \"query\",\n            \"description\": \"Use AMSGrad variant\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Optional optimizer name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/hybrid/rmsprop/optimizer\": {\n      \"post\": {\n        \"summary\": \"Create RMSprop optimizer for hybrid p-adic weights.\\n\\nArgs:\\n    params: List of hybrid parameters to optimize\\n    lr: Learning rate\\n    alpha: Smoothing constant\\n    eps: Term added for numerical stability\\n    weight_decay: Weight decay (L2 penalty)\\n    momentum: Momentum factor\\n    centered: Compute centered RMSprop\\n    name: Optional optimizer name\\n    \\nReturns:\\n    Optimizer ID string\\n    \\nRaises:\\n    ValueError: If parameters are invalid\",\n        \"description\": \"Create RMSprop optimizer for hybrid p-adic weights.\\n\\nArgs:\\n    params: List of hybrid parameters to optimize\\n    lr: Learning rate\\n    alpha: Smoothing constant\\n    eps: Term added for numerical stability\\n    weight_decay: Weight decay (L2 penalty)\\n    momentum: Momentum factor\\n    centered: Compute centered RMSprop\\n    name: Optional optimizer name\\n    \\nReturns:\\n    Optimizer ID string\\n    \\nRaises:\\n    ValueError: If parameters are invalid\",\n        \"operationId\": \"create_hybrid_rmsprop_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"params\",\n            \"in\": \"query\",\n            \"description\": \"List of hybrid parameters to optimize\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"lr\",\n            \"in\": \"query\",\n            \"description\": \"Learning rate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"alpha\",\n            \"in\": \"query\",\n            \"description\": \"Smoothing constant\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"eps\",\n            \"in\": \"query\",\n            \"description\": \"Term added for numerical stability\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"weight_decay\",\n            \"in\": \"query\",\n            \"description\": \"Weight decay (L2 penalty)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"momentum\",\n            \"in\": \"query\",\n            \"description\": \"Momentum factor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"centered\",\n            \"in\": \"query\",\n            \"description\": \"Compute centered RMSprop\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Optional optimizer name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/hybrid/optimization/stats\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive optimization statistics.\\n\\nReturns:\\n    Dictionary containing optimization statistics\",\n        \"description\": \"Get comprehensive optimization statistics.\\n\\nReturns:\\n    Dictionary containing optimization statistics\",\n        \"operationId\": \"get_hybrid_optimization_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"overall_stats\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_optimizers_created\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"active_optimizers\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"total_optimization_steps\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"successful_steps\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"failed_steps\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"success_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_step_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_convergence_rate\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"optimizer_type_stats\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"sgd_steps\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"adam_steps\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"rmsprop_steps\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"sgd_usage_ratio\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"adam_usage_ratio\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"rmsprop_usage_ratio\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"performance_stats\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"gpu_memory_usage_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"numerical_instabilities\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"gradient_cache_size\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"operations_history_length\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"parameter_stats\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"parameter_count_distribution\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"learning_rate_distribution\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"most_common_parameter_count\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"optimizer_details\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"prime\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"device\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"max_cache_size\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"last_update\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/optimizer/info\": {\n      \"get\": {\n        \"summary\": \"Get detailed information about specific optimizer.\\n\\nArgs:\\n    optimizer_name: Name of optimizer\\n    \\nReturns:\\n    Dictionary containing optimizer information\",\n        \"description\": \"Get detailed information about specific optimizer.\\n\\nArgs:\\n    optimizer_name: Name of optimizer\\n    \\nReturns:\\n    Dictionary containing optimizer information\",\n        \"operationId\": \"get_optimizer_info\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"optimizer_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of optimizer\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"optimizer_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimizer_type\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"step_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"parameter_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"learning_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"momentum\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"beta1\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"beta2\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"alpha\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"weight_decay\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"enable_two_channel_optimization\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"performance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_step_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_step_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"creation_time\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"last_step_time\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"state_info\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"has_momentum_buffer\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"has_adam_state\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"has_rmsprop_state\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/remove/optimizer\": {\n      \"delete\": {\n        \"summary\": \"Remove optimizer and free its resources.\\n\\nArgs:\\n    optimizer_name: Name of optimizer to remove\\n    \\nReturns:\\n    True if removed successfully\",\n        \"description\": \"Remove optimizer and free its resources.\\n\\nArgs:\\n    optimizer_name: Name of optimizer to remove\\n    \\nReturns:\\n    True if removed successfully\",\n        \"operationId\": \"remove_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"optimizer_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of optimizer to remove\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_optimization\n\n## Overview\n\nHybrid Optimization - Hybrid-compatible optimization algorithms\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_optimization.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- numpy\n- padic_advanced\n- logging\n- math\n- typing\n- uuid\n- torch\n- padic_encoder\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 907\n- **Code Lines:** 674\n- **Comment Lines:** 74\n\n## Complexity Indicators\n\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.compression_systems.padic.hybrid_optimization\n\nHybrid Optimization - Hybrid-compatible optimization algorithms\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_optimization.py\n- **Total Classes:** 4\n- **Total Functions:** 0\n- **Dependencies:** hybrid_padic_structures, numpy, padic_advanced, logging, math, typing, uuid, torch, padic_encoder, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (4):** HybridOptimizerConfig, HybridOptimizerState, HybridOptimizationStats, HybridOptimizationManager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: HybridOptimizationManager\n\n## Examples\ngpu_memory_usage_mb: float = 0.0\n\n# Optimization quality\n\n'sgd_usage_ratio': (\n\n'adam_usage_ratio': (\n\n'rmsprop_usage_ratio': (\n\n'gpu_memory_usage_mb': self.optimization_stats.gpu_memory_usage_mb,\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_optimization\n\nHybrid Optimization - Hybrid-compatible optimization algorithms\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 0\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **HybridOptimizerConfig**\n  - Methods: 1\n  - Complexity: 26\n- **HybridOptimizerState**\n  - Methods: 1\n  - Complexity: 29\n- **HybridOptimizationStats**\n  - Methods: 1\n  - Complexity: 24\n- **HybridOptimizationManager**\n  - Methods: 15\n  - Complexity: 113\n## Integration Points\n\n- Class: HybridOptimizationManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_performance_analyzer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_analyzer.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.hybrid_performance_analyzer",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_performance_analyzer\n\n## Overview\n\nHybrid Performance Analyzer - Deep analysis of hybrid system performance\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_analyzer.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- dynamic_switching_manager\n- hybrid_performance_monitor\n- logging\n- math\n- hybrid_padic_compressor\n- statistics\n- enum\n- typing\n- uuid\n- torch\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1152\n- **Code Lines:** 831\n- **Comment Lines:** 89\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.compression_systems.padic.hybrid_performance_analyzer\n\nHybrid Performance Analyzer - Deep analysis of hybrid system performance\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_analyzer.py\n- **Total Classes:** 11\n- **Total Functions:** 0\n- **Dependencies:** hybrid_padic_structures, dynamic_switching_manager, hybrid_performance_monitor, logging, math, hybrid_padic_compressor, statistics, enum, typing, uuid, torch, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (11):** AnalysisType, BottleneckType, PerformanceCategory, BottleneckAnalysisResult, PerformanceComparisonResult, ResourceAnalysisResult, SwitchingAnalysisResult, OptimizationRecommendation, PerformancePrediction, HybridAnalysisConfig, HybridPerformanceAnalyzer\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\n\"\"\"Result of resource usage analysis\"\"\"\n\ncpu_usage_analysis: Dict[str, Any]\n\nmemory_usage_analysis: Dict[str, Any]\n\nif not isinstance(self.cpu_usage_analysis, dict):\n\nraise TypeError(\"CPU usage analysis must be dict\")\n\nProvides comprehensive analysis of bottlenecks, performance comparisons, resource usage, and optimization opportunities.\n\"\"\"\n\n\ndef analyze_gpu_memory_usage(self) -> ResourceAnalysisResult:\n\"\"\"\n\nAnalyze GPU memory usage patterns.\n\n\n# Analyze GPU memory usage\n\n# Analyze CPU usage\n\ncpu_usage_analysis = self._analyze_cpu_usage_patterns(operation_data)\n\n\n# Analyze memory usage\n\nmemory_usage_analysis = self._analyze_memory_usage_patterns(operation_data)\n\n# Calculate resource efficiency\n\ncpu_usage_analysis=cpu_usage_analysis,\n\nmemory_usage_analysis=memory_usage_analysis,\n\nraise RuntimeError(f\"GPU memory usage analysis failed: {e}\")\n\n\nresource_analysis = self.resource_analysis_cache or self.analyze_gpu_memory_usage()\n\ncpu_usage_values = [op.cpu_usage_percent for op in operations if op.cpu_usage_percent > 0]\n\n\nif not cpu_usage_values:\n\navg_cpu_usage = sum(cpu_usage_values) / len(cpu_usage_values)\n\nmax_cpu_usage = max(cpu_usage_values)\n\n\nif avg_cpu_usage > self.config.cpu_utilization_threshold * 100:\n\nseverity = min(1.0, avg_cpu_usage / 100.0)\n\naffected_ops = [op.operation_name for op in operations if op.cpu_usage_percent > 80.0]\n\n\nimpact_percentage=(avg_cpu_usage / 100.0) * 100,\n\nf\"High CPU usage: {avg_cpu_usage:.1f}% average\",\n\nf\"Peak CPU usage: {max_cpu_usage:.1f}%\",\n\n\"Profile CPU usage in detail\"\n\nf\"High GPU memory usage: {avg_gpu_memory:.1f}MB average\",\n\nf\"Peak GPU memory usage: {max_gpu_memory:.1f}MB\",\n\nmemory_values = [op.memory_usage_mb for op in operations if op.memory_usage_mb > 0]\n\n\naffected_ops = [op.operation_name for op in operations if op.memory_usage_mb > memory_threshold_mb * 0.8]\n\n\nf\"High memory usage: {avg_memory:.1f}MB average\",\n\nf\"Peak memory usage: {max_memory:.1f}MB\",\n\n'average_cpu_usage': sum(op.cpu_usage_percent for op in successful_ops) / len(successful_ops) if successful_ops else 0.0,\n\nif metric in ['average_execution_time_ms', 'average_gpu_memory_mb', 'average_cpu_usage']:\n# Lower is better for these metrics\n\nif metric in ['average_execution_time_ms', 'average_gpu_memory_mb', 'average_cpu_usage']:\n# Lower is better for these metrics\n\n# Calculate costs (higher resource usage, switching overhead)\n\ndef _analyze_cpu_usage_patterns(self, operations): return {}\n\ndef _analyze_memory_usage_patterns(self, operations): return {}\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_performance_analyzer\n\nHybrid Performance Analyzer - Deep analysis of hybrid system performance\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 11\n- **Functions:** 0\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **AnalysisType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **BottleneckType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **PerformanceCategory** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **BottleneckAnalysisResult**\n  - Methods: 1\n  - Complexity: 17\n- **PerformanceComparisonResult**\n  - Methods: 1\n  - Complexity: 16\n- **ResourceAnalysisResult**\n  - Methods: 1\n  - Complexity: 15\n- **SwitchingAnalysisResult**\n  - Methods: 1\n  - Complexity: 15\n- **OptimizationRecommendation**\n  - Methods: 1\n  - Complexity: 23\n- **PerformancePrediction**\n  - Methods: 1\n  - Complexity: 17\n- **HybridAnalysisConfig**\n  - Methods: 1\n  - Complexity: 24\n- **HybridPerformanceAnalyzer**\n  - Methods: 45\n  - Complexity: 197\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_test_suite",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_test_suite.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.hybrid_test_suite",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_test_suite\n\n## Overview\n\nHybrid Test Suite - Comprehensive test suite for hybrid p-adic system\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_test_suite.py`\n\n## Dependencies\n\n- tracemalloc\n- hybrid_padic_compressor\n- padic_encoder\n- gc\n- threading\n- datetime\n- time\n- dynamic_switching_manager\n- hybrid_performance_monitor\n- math\n- enum\n- uuid\n- torch\n- hybrid_padic_structures\n- typing\n- psutil\n- hybrid_performance_optimizer\n- logging\n- unittest\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 897\n- **Code Lines:** 658\n- **Comment Lines:** 63\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_test_suite\n\nHybrid Test Suite - Comprehensive test suite for hybrid p-adic system\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 21\n\n## Class Hierarchy\n\n- **TestCategory** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **TestResult** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **TestExecutionResult**\n  - Methods: 1\n  - Complexity: 17\n- **TestSuiteConfig**\n  - Methods: 1\n  - Complexity: 26\n- **TestSuiteReport**\n  - Methods: 1\n  - Complexity: 19\n- **HybridTestSuite**\n  - Methods: 35\n  - Complexity: 171\n## Integration Points\n\n- Function: _test_manager_integration_impl\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_performance_tests",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_tests.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.hybrid_performance_tests",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_performance_tests\n\n## Overview\n\nHybrid Performance Tests - Performance testing with regression detection\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_tests.py`\n\n## Dependencies\n\n- hybrid_padic_compressor\n- statistics\n- padic_encoder\n- gc\n- threading\n- datetime\n- time\n- dynamic_switching_manager\n- hybrid_performance_monitor\n- math\n- enum\n- uuid\n- torch\n- hybrid_padic_structures\n- typing\n- psutil\n- hybrid_performance_optimizer\n- logging\n- unittest\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 1496\n- **Code Lines:** 1131\n- **Comment Lines:** 99\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.compression_systems.padic.hybrid_performance_tests\n\nHybrid Performance Tests - Performance testing with regression detection\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_tests.py\n- **Total Classes:** 8\n- **Total Functions:** 1\n- **Dependencies:** hybrid_padic_compressor, statistics, padic_encoder, gc, threading, datetime, time, dynamic_switching_manager, hybrid_performance_monitor, math, enum, uuid, torch, hybrid_padic_structures, typing, psutil, hybrid_performance_optimizer, logging, unittest, dataclasses, collections\n\n## Contents\n**Classes (8):** PerformanceTestType, PerformanceMetric, PerformanceTestResult, PerformanceBenchmark, PerformanceTestExecution, PerformanceTestConfig, PerformanceTestReport, HybridPerformanceTests\n**Functions (1):** run_hybrid_performance_tests\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nMEMORY_USAGE = \"memory_usage_mb\"\n\nGPU_MEMORY_USAGE = \"gpu_memory_usage_mb\"\n\nCPU_USAGE = \"cpu_usage_percent\"\n\nmax_memory_usage_mb: float = 500.0\n\nmax_gpu_memory_usage_mb: float = 1024.0\n\ndef test_memory_usage(self, data_size: int) -> PerformanceTestExecution:\n\"\"\"\n\nTest memory usage performance.\n\n\ntest_name = f\"memory_usage_{data_size}\"\n\nmemory_usage = current_memory - initial_memory\n\nmemory_measurements.append(memory_usage)\n\n# Clean up\n\navg_memory_usage = statistics.mean(memory_measurements)\n\nmax_memory_usage = max(memory_measurements)\n\nPerformanceMetric.MEMORY_USAGE: avg_memory_usage\n\nif 'max_memory_usage' in self.benchmarks:\n\nbenchmark_results['max_memory_usage'] = self.benchmarks['max_memory_usage'].evaluate(max_memory_usage)\n\n# Check for memory leaks\n\nmemory_leak_detected = memory_growth > (self.config.max_memory_usage_mb * 0.5)\n\n'avg_memory_usage_mb': avg_memory_usage,\n\n'max_memory_usage_mb': max_memory_usage,\n\ndef test_gpu_memory_usage(self, data_size: int) -> PerformanceTestExecution:\n\"\"\"\n\nTest GPU memory usage performance.\n\n\ntest_name = f\"gpu_memory_usage_{data_size}\"\n\ngpu_memory_usage = current_gpu_memory - initial_gpu_memory\n\ngpu_memory_measurements.append(gpu_memory_usage)\n\n# Clean up\n\npeak_gpu_usage = peak_gpu_memory - initial_gpu_memory\n\n# Calculate GPU memory statistics\n\navg_gpu_memory_usage = statistics.mean(gpu_memory_measurements)\n\nmax_gpu_memory_usage = max(gpu_memory_measurements)\n\n# Clean up\n\nPerformanceMetric.GPU_MEMORY_USAGE: avg_gpu_memory_usage\n\nif 'max_gpu_memory_usage' in self.benchmarks:\n\nbenchmark_results['max_gpu_memory_usage'] = self.benchmarks['max_gpu_memory_usage'].evaluate(peak_gpu_usage)\n\n# Determine result\n\n'avg_gpu_memory_usage_mb': avg_gpu_memory_usage,\n\n'max_gpu_memory_usage_mb': max_gpu_memory_usage,\n\n'peak_gpu_usage_mb': peak_gpu_usage,\n\n'max_memory_usage': PerformanceBenchmark(\n\nbenchmark_name='Maximum Memory Usage',\n\nmetric=PerformanceMetric.MEMORY_USAGE,\n\nexpected_value=self.config.max_memory_usage_mb,\n\ndescription='Memory usage should stay within limits'\n\n'max_gpu_memory_usage': PerformanceBenchmark(\n\nbenchmark_name='Maximum GPU Memory Usage',\n\nmetric=PerformanceMetric.GPU_MEMORY_USAGE,\n\nexpected_value=self.config.max_gpu_memory_usage_mb,\n\ndescription='GPU memory usage should stay within limits'\n\nresult = self.test_memory_usage(data_size)\n\nresult = self.test_gpu_memory_usage(data_size)\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_performance_tests\n\nHybrid Performance Tests - Performance testing with regression detection\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 1\n- **Dependencies:** 21\n\n## Class Hierarchy\n\n- **PerformanceTestType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **PerformanceMetric** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **PerformanceTestResult** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **PerformanceBenchmark**\n  - Methods: 2\n  - Complexity: 20\n- **PerformanceTestExecution**\n  - Methods: 1\n  - Complexity: 19\n- **PerformanceTestConfig**\n  - Methods: 1\n  - Complexity: 31\n- **PerformanceTestReport**\n  - Methods: 1\n  - Complexity: 20\n- **HybridPerformanceTests**\n  - Methods: 29\n  - Complexity: 199\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.padic_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.padic_integration\n\nAPI endpoints for independent_core.compression_systems.padic.padic_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //handle/service/config/change\n\n#### POST //handle/service/config/change\n\nHandle service configuration changes\n\n**Parameters:**\n\n- **key** (query) *required*: str - Parameter: key\n- **value** (query) *required*: Any - Parameter: value\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/service/config/change?key=example_key&value=example_value\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/service/config/change\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key\": \"example_key\",\n    \"value\": \"example_value\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //setup/memory/monitoring\n\n#### POST //setup/memory/monitoring\n\nSetup memory monitoring for Brain Core\n\n**Parameters:**\n\n- **brain** (query) *required*: BrainCore - Parameter: brain\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//setup/memory/monitoring?brain=example_brain\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//setup/memory/monitoring\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"brain\": \"example_brain\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/brain/metrics\n\n#### GET /get/brain/metrics\n\nGet Brain Core integration metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/brain/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/brain/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/component/metrics\n\n#### GET /get/component/metrics\n\nGet metrics for a specific component\n\n**Parameters:**\n\n- **component_id** (query) *required*: str - Parameter: component_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/component/metrics?component_id=example_component_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/component/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"component_id\": \"example_component_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/orchestrator\n\n#### GET /get/orchestrator\n\nGet the current orchestrator instance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/orchestrator\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/orchestrator\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service\n\n#### GET /get/service\n\nGet service interface for external modules\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/service/configuration\n\n#### GET /get/service/configuration\n\nGet the current service configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/configuration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/system/metrics\n\n#### GET /get/system/metrics\n\nGet comprehensive system metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/system/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/system/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/training/metrics\n\n#### GET /get/training/metrics\n\nGet training integration metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/training/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/training/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /monitored/allocate\n\n#### POST /monitored/allocate\n\nMonitor memory allocations\n\n**Parameters:**\n\n- **size** (query) *required*: int - Parameter: size\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/monitored/allocate?size=example_size\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/monitored/allocate\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"size\": \"example_size\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /post/step/hook\n\n#### POST /post/step/hook\n\nAPI endpoint: post_step_hook\n\n**Parameters:**\n\n- **optimizer** (query) *required*: string - Parameter: optimizer\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/post/step/hook?optimizer=example_optimizer\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/post/step/hook\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"optimizer\": \"example_optimizer\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/service/configuration\n\n#### PUT /update/service/configuration\n\nUpdate service configuration\n\n**Parameters:**\n\n- **updates** (query) *required*: string - Parameter: updates\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/service/configuration?updates=example_updates\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/service/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"updates\": \"example_updates\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.padic_integration\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.padic_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/orchestrator\": {\n      \"get\": {\n        \"summary\": \"Get the current orchestrator instance\",\n        \"description\": \"Get the current orchestrator instance\",\n        \"operationId\": \"get_orchestrator\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/component/metrics\": {\n      \"get\": {\n        \"summary\": \"Get metrics for a specific component\",\n        \"description\": \"Get metrics for a specific component\",\n        \"operationId\": \"get_component_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"component_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: component_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//setup/memory/monitoring\": {\n      \"post\": {\n        \"summary\": \"Setup memory monitoring for Brain Core\",\n        \"description\": \"Setup memory monitoring for Brain Core\",\n        \"operationId\": \"_setup_memory_monitoring\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"brain\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: brain\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"BrainCore\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/brain/metrics\": {\n      \"get\": {\n        \"summary\": \"Get Brain Core integration metrics\",\n        \"description\": \"Get Brain Core integration metrics\",\n        \"operationId\": \"get_brain_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"stats\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"memory\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_brains\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compression_ratio\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/training/metrics\": {\n      \"get\": {\n        \"summary\": \"Get training integration metrics\",\n        \"description\": \"Get training integration metrics\",\n        \"operationId\": \"get_training_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/system/metrics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive system metrics\",\n        \"description\": \"Get comprehensive system metrics\",\n        \"operationId\": \"get_system_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"padic_system\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"gac_integration\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"brain_integration\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"training_integration\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"avg_compression_time\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"avg_decompression_time\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"current_queue_size\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"executor_active\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/service\": {\n      \"get\": {\n        \"summary\": \"Get service interface for external modules\",\n        \"description\": \"Get service interface for external modules\",\n        \"operationId\": \"get_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/service/config/change\": {\n      \"post\": {\n        \"summary\": \"Handle service configuration changes\",\n        \"description\": \"Handle service configuration changes\",\n        \"operationId\": \"_handle_service_config_change\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"value\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: value\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/service/configuration\": {\n      \"get\": {\n        \"summary\": \"Get the current service configuration\",\n        \"description\": \"Get the current service configuration\",\n        \"operationId\": \"get_service_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/service/configuration\": {\n      \"put\": {\n        \"summary\": \"Update service configuration\",\n        \"description\": \"Update service configuration\",\n        \"operationId\": \"update_service_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"updates\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: updates\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/monitored/allocate\": {\n      \"post\": {\n        \"summary\": \"Monitor memory allocations\",\n        \"description\": \"Monitor memory allocations\",\n        \"operationId\": \"monitored_allocate\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"size\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: size\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/post/step/hook\": {\n      \"post\": {\n        \"summary\": \"API endpoint: post_step_hook\",\n        \"description\": \"API endpoint: post_step_hook\",\n        \"operationId\": \"post_step_hook\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"optimizer\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: optimizer\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.padic_integration\n\n## Overview\n\nP-Adic Integration System for Independent Core\nIntegrates P-Adic compression with GAC, Brain Core, and training systems\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_integration.py`\n\n## Dependencies\n\n- brain_core\n- torch.nn\n- gc\n- threading\n- padic_service_config\n- contextlib\n- weakref\n- time\n- numpy\n- torch\n- gac_system.gac_components\n- padic_advanced\n- typing\n- gpu_memory\n- queue\n- concurrent.futures\n- padic_compressor\n- asyncio\n- dataclasses\n\n## Code Structure\n\n- **Total Lines:** 1290\n- **Code Lines:** 917\n- **Comment Lines:** 117\n\n## Complexity Indicators\n\n- High function count\n- Async programming\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.padic_integration\n\nP-Adic Integration System for Independent Core\nIntegrates P-Adic compression with GAC, Brain Core, and training systems\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_integration.py\n- **Total Classes:** 5\n- **Total Functions:** 8\n- **Dependencies:** brain_core, torch.nn, gc, threading, padic_service_config, contextlib, weakref, time, numpy, torch, gac_system.gac_components, padic_advanced, typing, gpu_memory, queue, concurrent.futures, padic_compressor, asyncio, dataclasses\n\n## Contents\n**Classes (5):** PadicIntegrationConfig, PadicGACIntegration, PadicBrainIntegration, PadicTrainingIntegration, PadicSystemOrchestrator\n**Functions (8):** initialize_padic_integration, get_orchestrator, shutdown_padic_integration, padic_apply_compression, monitored_allocate, pre_step_hook, post_step_hook, hooked_step\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: get_service\nFunction: _handle_service_config_change\nFunction: get_service_configuration\nFunction: update_service_configuration\n\n## Examples\n\"\"\"Estimate optimizer memory usage\"\"\"\n\n'memory_usage': [],\n\n# Memory usage\n\nself.performance_monitor['memory_usage'].append(memory_used)\n\n# GPU utilization\n\nself.performance_monitor['memory_usage'].append(0)\n\nif self.performance_monitor['memory_usage']:\n\nrecent_memory = np.mean(self.performance_monitor['memory_usage'][-10:])\n\n# High memory usage - trigger compressions\n\n# High queue usage - may need more threads\n\noptimizations['performance']['high_queue_usage'] = True\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.padic_integration\n\nP-Adic Integration System for Independent Core\nIntegrates P-Adic compression with GAC, Brain Core, and training systems\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 8\n- **Dependencies:** 19\n\n## Class Hierarchy\n\n- **PadicIntegrationConfig**\n  - Methods: 0\n  - Complexity: 23\n- **PadicGACIntegration**\n  - Methods: 7\n  - Complexity: 49\n- **PadicBrainIntegration**\n  - Methods: 13\n  - Complexity: 74\n- **PadicTrainingIntegration**\n  - Methods: 12\n  - Complexity: 79\n- **PadicSystemOrchestrator**\n  - Methods: 23\n  - Complexity: 118\n## Integration Points\n\n- Function: get_service\n- Function: _handle_service_config_change\n- Function: get_service_configuration\n- Function: update_service_configuration\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_performance_optimizer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_optimizer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_performance_optimizer\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_performance_optimizer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/hybrid/performance/report\n\n#### GET /get/hybrid/performance/report\n\nGet comprehensive hybrid performance report.\n\nReturns:\n    Dictionary containing performance report\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hybrid/performance/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hybrid/performance/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/with/profile\n\n#### PUT /update/with/profile\n\nUpdate metrics with operation profile\n\n**Parameters:**\n\n- **profile** (query) *required*: HybridOperationProfile - Parameter: profile\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/with/profile?profile=example_profile\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/with/profile\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"profile\": \"example_profile\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_performance_optimizer\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_performance_optimizer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/with/profile\": {\n      \"put\": {\n        \"summary\": \"Update metrics with operation profile\",\n        \"description\": \"Update metrics with operation profile\",\n        \"operationId\": \"update_with_profile\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"profile\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: profile\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"HybridOperationProfile\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/hybrid/performance/report\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive hybrid performance report.\\n\\nReturns:\\n    Dictionary containing performance report\",\n        \"description\": \"Get comprehensive hybrid performance report.\\n\\nReturns:\\n    Dictionary containing performance report\",\n        \"operationId\": \"get_hybrid_performance_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"overview\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"pure_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"success_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_ratio\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"performance_improvement\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"timing_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"average_execution_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_hybrid_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_pure_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_switching_overhead_ms\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"resource_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"average_gpu_memory_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"peak_gpu_memory_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_cpu_usage\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_memory_usage_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_gpu_utilization\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"category_performance\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_status\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"current_phase\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"optimization_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"last_optimization\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"total_optimizations\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"regression_alerts\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"gpu_optimization_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"memory_optimization_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"switching_optimization_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"automatic_tuning_enabled\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"last_update\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_performance_optimizer\n\n## Overview\n\nHybrid Performance Optimizer - Hybrid-specific performance optimization orchestrator\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_optimizer.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- dynamic_switching_manager\n- logging\n- math\n- hybrid_padic_compressor\n- enum\n- typing\n- uuid\n- torch\n- asyncio\n- performance_optimizer\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 996\n- **Code Lines:** 734\n- **Comment Lines:** 81\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.compression_systems.padic.hybrid_performance_optimizer\n\nHybrid Performance Optimizer - Hybrid-specific performance optimization orchestrator\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_optimizer.py\n- **Total Classes:** 6\n- **Total Functions:** 0\n- **Dependencies:** hybrid_padic_structures, dynamic_switching_manager, logging, math, hybrid_padic_compressor, enum, typing, uuid, torch, asyncio, performance_optimizer, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (6):** HybridOptimizationPhase, HybridPerformanceCategory, HybridOperationProfile, HybridPerformanceMetrics, HybridOptimizationConfig, HybridPerformanceOptimizer\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\ncpu_usage_percent: float\n\nmemory_usage_mb: float\n\naverage_cpu_usage: float = 0.0\n\naverage_memory_usage_mb: float = 0.0\n\n# Performance metrics\n\n\"\"\"Update resource usage averages\"\"\"\n# GPU memory\n\n# CPU usage\n\nold_cpu_avg = self.average_cpu_usage\n\nself.average_cpu_usage = (\n\n(old_cpu_avg * (self.total_operations - 1) + profile.cpu_usage_percent) / self.total_operations\n\n# Memory usage\n\nold_mem_avg = self.average_memory_usage_mb\n\nself.average_memory_usage_mb = (\n\n(old_mem_avg * (self.total_operations - 1) + profile.memory_usage_mb) / self.total_operations\n\ncpu_usage_threshold_percent: float = 80.0\n\nmemory_usage_threshold_mb: int = 2048\n\nif not 0 < self.cpu_usage_threshold_percent <= 100:\n\nraise ValueError(\"CPU usage threshold must be between 0 and 100\")\n\ngpu_memory_before = self._get_gpu_memory_usage()\n\ngpu_memory_after = self._get_gpu_memory_usage()\n\nhybrid_mode_used = self._determine_hybrid_mode_usage(operation_name, kwargs)\n\n# Calculate compression ratio if applicable\n\ncpu_usage_percent=self._get_cpu_usage(),\n\nmemory_usage_mb=self._get_memory_usage(),\n\ngpu_optimization = self._optimize_gpu_memory_usage()\n\n'average_cpu_usage': self.performance_metrics.average_cpu_usage,\n\n'average_memory_usage_mb': self.performance_metrics.average_memory_usage_mb,\n\ndef _get_gpu_memory_usage(self) -> float:\n\n\"\"\"Get current GPU memory usage in MB\"\"\"\n\ndef _get_cpu_usage(self) -> float:\n\n\"\"\"Get current CPU usage percentage\"\"\"\n# This would require psutil or similar library for real implementation\n\ndef _get_memory_usage(self) -> float:\n\n\"\"\"Get current memory usage in MB\"\"\"\n# This would require psutil or similar library for real implementation\n\ndef _determine_hybrid_mode_usage(self, operation_name: str, kwargs: Dict[str, Any]) -> bool:\n\"\"\"Determine if hybrid mode was used for operation\"\"\"\n# Check if operation involves hybrid structures\n\ndef _optimize_gpu_memory_usage(self) -> Dict[str, Any]:\n\n\"\"\"Optimize GPU memory usage\"\"\"\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_performance_optimizer\n\nHybrid Performance Optimizer - Hybrid-specific performance optimization orchestrator\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **HybridOptimizationPhase** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **HybridPerformanceCategory** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **HybridOperationProfile**\n  - Methods: 1\n  - Complexity: 22\n- **HybridPerformanceMetrics**\n  - Methods: 3\n  - Complexity: 39\n- **HybridOptimizationConfig**\n  - Methods: 1\n  - Complexity: 25\n- **HybridPerformanceOptimizer**\n  - Methods: 29\n  - Complexity: 151\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.padic_advanced",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_advanced.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.padic_advanced\n\nAPI endpoints for independent_core.compression_systems.padic.padic_advanced\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/adam/optimizer\n\n#### POST /create/adam/optimizer\n\nCreate Adam optimizer\n\n**Parameters:**\n\n- **params** (query) *required*: string - Parameter: params\n- **lr** (query) *required*: float - Parameter: lr\n- **betas** (query) *required*: string - Parameter: betas\n- **eps** (query) *required*: float - Parameter: eps\n- **name** (query) *required*: string - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/adam/optimizer?params=example_params&lr=example_lr&betas=example_betas&eps=example_eps&name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/adam/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"params\": \"example_params\",\n    \"lr\": \"example_lr\",\n    \"betas\": \"example_betas\",\n    \"eps\": \"example_eps\",\n    \"name\": \"example_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/rmsprop/optimizer\n\n#### POST /create/rmsprop/optimizer\n\nCreate RMSprop optimizer\n\n**Parameters:**\n\n- **params** (query) *required*: string - Parameter: params\n- **lr** (query) *required*: float - Parameter: lr\n- **alpha** (query) *required*: float - Parameter: alpha\n- **eps** (query) *required*: float - Parameter: eps\n- **momentum** (query) *required*: float - Parameter: momentum\n- **name** (query) *required*: string - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/rmsprop/optimizer?params=example_params&lr=example_lr&alpha=example_alpha&eps=example_eps&momentum=example_momentum&name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/rmsprop/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"params\": \"example_params\",\n    \"lr\": \"example_lr\",\n    \"alpha\": \"example_alpha\",\n    \"eps\": \"example_eps\",\n    \"momentum\": \"example_momentum\",\n    \"name\": \"example_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/sgd/optimizer\n\n#### POST /create/sgd/optimizer\n\nCreate SGD optimizer\n\n**Parameters:**\n\n- **params** (query) *required*: string - Parameter: params\n- **lr** (query) *required*: float - Parameter: lr\n- **momentum** (query) *required*: float - Parameter: momentum\n- **dampening** (query) *required*: float - Parameter: dampening\n- **name** (query) *required*: string - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/sgd/optimizer?params=example_params&lr=example_lr&momentum=example_momentum&dampening=example_dampening&name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/sgd/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"params\": \"example_params\",\n    \"lr\": \"example_lr\",\n    \"momentum\": \"example_momentum\",\n    \"dampening\": \"example_dampening\",\n    \"name\": \"example_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/all/stats\n\n#### GET /get/all/stats\n\nGet statistics for all optimizers\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/all/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/all/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/clustering/stats\n\n#### GET /get/clustering/stats\n\nGet clustering statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/clustering/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/clustering/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/decompression/stats\n\n#### GET /get/decompression/stats\n\nGet decompression statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/decompression/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/decompression/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/lifting/stats\n\n#### GET /get/lifting/stats\n\nGet lifting performance statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/lifting/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/lifting/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/optimizer/stats\n\n#### GET /get/optimizer/stats\n\nGet optimizer statistics\n\n**Parameters:**\n\n- **optimizer_name** (query) *required*: str - Parameter: optimizer_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimizer/stats?optimizer_name=example_optimizer_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimizer/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"optimizer_name\": \"example_optimizer_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /remove/optimizer\n\n#### DELETE /remove/optimizer\n\nRemove optimizer\n\n**Parameters:**\n\n- **optimizer_name** (query) *required*: str - Parameter: optimizer_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/optimizer?optimizer_name=example_optimizer_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"optimizer_name\": \"example_optimizer_name\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.padic_advanced\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.padic_advanced\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/lifting/stats\": {\n      \"get\": {\n        \"summary\": \"Get lifting performance statistics\",\n        \"description\": \"Get lifting performance statistics\",\n        \"operationId\": \"get_lifting_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/clustering/stats\": {\n      \"get\": {\n        \"summary\": \"Get clustering statistics\",\n        \"description\": \"Get clustering statistics\",\n        \"operationId\": \"get_clustering_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/decompression/stats\": {\n      \"get\": {\n        \"summary\": \"Get decompression statistics\",\n        \"description\": \"Get decompression statistics\",\n        \"operationId\": \"get_decompression_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/sgd/optimizer\": {\n      \"post\": {\n        \"summary\": \"Create SGD optimizer\",\n        \"description\": \"Create SGD optimizer\",\n        \"operationId\": \"create_sgd_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"params\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: params\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"lr\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: lr\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"momentum\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: momentum\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"dampening\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: dampening\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/adam/optimizer\": {\n      \"post\": {\n        \"summary\": \"Create Adam optimizer\",\n        \"description\": \"Create Adam optimizer\",\n        \"operationId\": \"create_adam_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"params\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: params\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"lr\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: lr\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"betas\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: betas\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"eps\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: eps\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/rmsprop/optimizer\": {\n      \"post\": {\n        \"summary\": \"Create RMSprop optimizer\",\n        \"description\": \"Create RMSprop optimizer\",\n        \"operationId\": \"create_rmsprop_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"params\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: params\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"lr\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: lr\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"alpha\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: alpha\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"eps\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: eps\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"momentum\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: momentum\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/optimizer/stats\": {\n      \"get\": {\n        \"summary\": \"Get optimizer statistics\",\n        \"description\": \"Get optimizer statistics\",\n        \"operationId\": \"get_optimizer_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"optimizer_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: optimizer_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/remove/optimizer\": {\n      \"delete\": {\n        \"summary\": \"Remove optimizer\",\n        \"description\": \"Remove optimizer\",\n        \"operationId\": \"remove_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"optimizer_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: optimizer_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/all/stats\": {\n      \"get\": {\n        \"summary\": \"Get statistics for all optimizers\",\n        \"description\": \"Get statistics for all optimizers\",\n        \"operationId\": \"get_all_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.padic_advanced\n\n## Overview\n\nAdvanced P-adic Compression Features\nIncludes Hensel lifting, hierarchical clustering, GPU optimization, and p-adic optimizers\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_advanced.py`\n\n## Dependencies\n\n- numpy\n- padic_compressor\n- contextlib\n- typing\n- abc\n- torch\n- padic_encoder\n- threading\n- dataclasses\n- weakref\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1863\n- **Code Lines:** 1335\n- **Comment Lines:** 163\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.padic_advanced\n\nAdvanced P-adic Compression Features\nIncludes Hensel lifting, hierarchical clustering, GPU optimization, and p-adic optimizers\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 13\n- **Functions:** 0\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **HenselLiftingConfig**\n  - Methods: 1\n  - Complexity: 16\n- **HenselLiftingProcessor**\n  - Methods: 13\n  - Complexity: 69\n- **ClusteringConfig**\n  - Methods: 1\n  - Complexity: 15\n- **ClusterNode**\n  - Methods: 4\n  - Complexity: 28\n- **HierarchicalClusteringManager**\n  - Methods: 29\n  - Complexity: 177\n- **GPUDecompressionConfig**\n  - Methods: 1\n  - Complexity: 15\n- **PadicDecompressionEngine**\n  - Methods: 19\n  - Complexity: 91\n- **PadicOptimizer** (inherits from ABC)\n  - Methods: 3\n  - Complexity: 10\n- **PadicSGD** (inherits from PadicOptimizer)\n  - Methods: 3\n  - Complexity: 17\n- **PadicAdam** (inherits from PadicOptimizer)\n  - Methods: 6\n  - Complexity: 28\n- **PadicRMSprop** (inherits from PadicOptimizer)\n  - Methods: 7\n  - Complexity: 33\n- **PadicOptimizationManager**\n  - Methods: 10\n  - Complexity: 35\n- **PadicAdvancedIntegration**\n  - Methods: 4\n  - Complexity: 13\n## Integration Points\n\n- Class: HenselLiftingProcessor\n- Class: HierarchicalClusteringManager\n- Class: PadicOptimizationManager\n- Function: integrate_optimization_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.test_hybrid_structures",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_structures.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.test_hybrid_structures",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.test_hybrid_structures\n\n## Overview\n\nCompatibility tests for hybrid p-adic structures\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_structures.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- pytest\n- typing\n- torch\n- padic_encoder\n- fractions\n- time\n\n## Code Structure\n\n- **Total Lines:** 358\n- **Code Lines:** 261\n- **Comment Lines:** 34\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.test_hybrid_structures\n\nCompatibility tests for hybrid p-adic structures\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 1\n- **Functions:** 2\n- **Dependencies:** 7\n\n## Class Hierarchy\n\n- **TestHybridPadicCompatibility**\n  - Methods: 12\n  - Complexity: 44\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.direction_coordinator",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/direction_coordinator.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.direction_coordinator\n\nAPI endpoints for independent_core.compression_systems.padic.direction_coordinator\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nInitialize direction coordinator\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/performance/recommendations\n\n#### POST //generate/performance/recommendations\n\nGenerate performance recommendations\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/performance/recommendations\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/performance/recommendations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //get/coordination/trends\n\n#### POST //get/coordination/trends\n\nGet coordination trends\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/coordination/trends\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/coordination/trends\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //get/current/performance\n\n#### POST //get/current/performance\n\nGet current performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/current/performance\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/current/performance\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //get/recent/performance/summary\n\n#### POST //get/recent/performance/summary\n\nGet recent performance summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/recent/performance/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/recent/performance/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/coordination/analytics\n\n#### GET /get/coordination/analytics\n\nGet comprehensive coordination analytics.\n\nReturns:\n    Coordination analytics data\n    \nRaises:\n    RuntimeError: If analytics generation fails\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/coordination/analytics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/coordination/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /handle/direction/switching/errors\n\n#### POST /handle/direction/switching/errors\n\nHandle direction switching errors.\n\nArgs:\n    error: Error that occurred\n    context: Error context\n    \nReturns:\n    Error handling results\n    \nRaises:\n    ValueError: If inputs are invalid\n    RuntimeError: If error handling fails\n\n**Parameters:**\n\n- **error** (query) *required*: Exception - Error that occurred\n- **context** (query) *required*: string - Error context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/direction/switching/errors?error=example_error&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/direction/switching/errors\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/switching/policy\n\n#### PUT /update/switching/policy\n\nUpdate switching policy based on direction analysis.\n\nArgs:\n    direction_analysis: Direction analysis results\n    \nReturns:\n    Policy update results\n    \nRaises:\n    ValueError: If direction analysis is invalid\n    RuntimeError: If policy update fails\n\n**Parameters:**\n\n- **direction_analysis** (query) *required*: string - Direction analysis results\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/switching/policy?direction_analysis=example_direction_analysis\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/switching/policy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"direction_analysis\": \"example_direction_analysis\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.direction_coordinator\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.direction_coordinator\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"Initialize direction coordinator\",\n        \"description\": \"Initialize direction coordinator\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/switching/policy\": {\n      \"put\": {\n        \"summary\": \"Update switching policy based on direction analysis.\\n\\nArgs:\\n    direction_analysis: Direction analysis results\\n    \\nReturns:\\n    Policy update results\\n    \\nRaises:\\n    ValueError: If direction analysis is invalid\\n    RuntimeError: If policy update fails\",\n        \"description\": \"Update switching policy based on direction analysis.\\n\\nArgs:\\n    direction_analysis: Direction analysis results\\n    \\nReturns:\\n    Policy update results\\n    \\nRaises:\\n    ValueError: If direction analysis is invalid\\n    RuntimeError: If policy update fails\",\n        \"operationId\": \"update_switching_policy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"direction_analysis\",\n            \"in\": \"query\",\n            \"description\": \"Direction analysis results\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/handle/direction/switching/errors\": {\n      \"post\": {\n        \"summary\": \"Handle direction switching errors.\\n\\nArgs:\\n    error: Error that occurred\\n    context: Error context\\n    \\nReturns:\\n    Error handling results\\n    \\nRaises:\\n    ValueError: If inputs are invalid\\n    RuntimeError: If error handling fails\",\n        \"description\": \"Handle direction switching errors.\\n\\nArgs:\\n    error: Error that occurred\\n    context: Error context\\n    \\nReturns:\\n    Error handling results\\n    \\nRaises:\\n    ValueError: If inputs are invalid\\n    RuntimeError: If error handling fails\",\n        \"operationId\": \"handle_direction_switching_errors\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Error that occurred\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Error context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/coordination/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive coordination analytics.\\n\\nReturns:\\n    Coordination analytics data\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"description\": \"Get comprehensive coordination analytics.\\n\\nReturns:\\n    Coordination analytics data\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"operationId\": \"get_coordination_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//get/current/performance\": {\n      \"post\": {\n        \"summary\": \"Get current performance metrics\",\n        \"description\": \"Get current performance metrics\",\n        \"operationId\": \"_get_current_performance\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"coordination_efficiency\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"success_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"override_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"average_response_time_ms\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//generate/performance/recommendations\": {\n      \"post\": {\n        \"summary\": \"Generate performance recommendations\",\n        \"description\": \"Generate performance recommendations\",\n        \"operationId\": \"_generate_performance_recommendations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//get/recent/performance/summary\": {\n      \"post\": {\n        \"summary\": \"Get recent performance summary\",\n        \"description\": \"Get recent performance summary\",\n        \"operationId\": \"_get_recent_performance_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//get/coordination/trends\": {\n      \"post\": {\n        \"summary\": \"Get coordination trends\",\n        \"description\": \"Get coordination trends\",\n        \"operationId\": \"_get_coordination_trends\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"trend\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.direction_coordinator\n\n## Overview\n\nDirection Coordinator - Coordination between direction analysis and switching systems\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/direction_coordinator.py`\n\n## Dependencies\n\n- gac_system.gac_types\n- logging\n- math\n- gac_system.direction_state\n- enum\n- typing\n- torch\n- direction_analyzer\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1238\n- **Code Lines:** 905\n- **Comment Lines:** 92\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.direction_coordinator\n\nDirection Coordinator - Coordination between direction analysis and switching systems\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **CoordinationStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **CoordinationMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **CoordinationPriority** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **CoordinationDecision**\n  - Methods: 1\n  - Complexity: 16\n- **CoordinationPolicy**\n  - Methods: 1\n  - Complexity: 14\n- **CoordinationPerformanceMetrics**\n  - Methods: 0\n  - Complexity: 9\n- **CoordinationConfig**\n  - Methods: 1\n  - Complexity: 25\n- **DirectionCoordinator**\n  - Methods: 48\n  - Complexity: 243\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.test_hybrid_gpu_ops",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_gpu_ops.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.test_hybrid_gpu_ops",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.test_hybrid_gpu_ops\n\n## Overview\n\nComprehensive tests for hybrid p-adic GPU operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_gpu_ops.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- pytest\n- typing\n- hybrid_padic_gpu_ops\n- torch\n- gc\n- padic_encoder\n- time\n\n## Code Structure\n\n- **Total Lines:** 778\n- **Code Lines:** 554\n- **Comment Lines:** 52\n\n## Complexity Indicators\n\n- High function count\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.test_hybrid_gpu_ops\n\nComprehensive tests for hybrid p-adic GPU operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 2\n- **Dependencies:** 8\n\n## Class Hierarchy\n\n- **TestGPUOperationConfig**\n  - Methods: 4\n  - Complexity: 13\n- **TestHybridPadicGPUOps**\n  - Methods: 16\n  - Complexity: 56\n- **TestHybridPadicGPUOptimizer**\n  - Methods: 9\n  - Complexity: 31\n- **TestHybridPadicGPUManager**\n  - Methods: 11\n  - Complexity: 37\n## Integration Points\n\n- Class: TestHybridPadicGPUManager\n- Function: test_manager_initialization\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.bounding_strategy_manager",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/bounding_strategy_manager.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.bounding_strategy_manager\n\nAPI endpoints for independent_core.compression_systems.padic.bounding_strategy_manager\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/current/metrics\n\n#### GET /get/current/metrics\n\nGet current strategy management metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/current/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/current/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/strategy/recommendations\n\n#### GET /get/strategy/recommendations\n\nGet strategy recommendations based on performance data.\n\nArgs:\n    performance_data: Historical performance data\n    \nReturns:\n    List of strategy recommendations\n    \nRaises:\n    ValueError: If performance data is invalid\n    RuntimeError: If recommendation generation fails\n\n**Parameters:**\n\n- **performance_data** (query) *required*: string - Historical performance data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/strategy/recommendations?performance_data=example_performance_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/strategy/recommendations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"performance_data\": \"example_performance_data\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.bounding_strategy_manager\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.bounding_strategy_manager\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/strategy/recommendations\": {\n      \"get\": {\n        \"summary\": \"Get strategy recommendations based on performance data.\\n\\nArgs:\\n    performance_data: Historical performance data\\n    \\nReturns:\\n    List of strategy recommendations\\n    \\nRaises:\\n    ValueError: If performance data is invalid\\n    RuntimeError: If recommendation generation fails\",\n        \"description\": \"Get strategy recommendations based on performance data.\\n\\nArgs:\\n    performance_data: Historical performance data\\n    \\nReturns:\\n    List of strategy recommendations\\n    \\nRaises:\\n    ValueError: If performance data is invalid\\n    RuntimeError: If recommendation generation fails\",\n        \"operationId\": \"get_strategy_recommendations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"performance_data\",\n            \"in\": \"query\",\n            \"description\": \"Historical performance data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/current/metrics\": {\n      \"get\": {\n        \"summary\": \"Get current strategy management metrics\",\n        \"description\": \"Get current strategy management metrics\",\n        \"operationId\": \"get_current_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"current_strategy\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"selection_mode\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_strategies_evaluated\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_validations_performed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_optimization\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"strategy_performance_summary\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.bounding_strategy_manager\n\n## Overview\n\nBounding Strategy Manager - Management of bounding strategies for hybrid operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/bounding_strategy_manager.py`\n\n## Dependencies\n\n- numpy\n- gac_system.gac_types\n- logging\n- math\n- gac_system.direction_state\n- statistics\n- typing\n- enum\n- hybrid_bounding_engine\n- torch\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1201\n- **Code Lines:** 904\n- **Comment Lines:** 83\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.bounding_strategy_manager\n\nBounding Strategy Manager - Management of bounding strategies for hybrid operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/bounding_strategy_manager.py\n- **Total Classes:** 7\n- **Total Functions:** 0\n- **Dependencies:** numpy, gac_system.gac_types, logging, math, gac_system.direction_state, statistics, typing, enum, hybrid_bounding_engine, torch, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (7):** StrategySelectionMode, StrategyValidationLevel, StrategyPerformanceMetrics, StrategyRecommendation, StrategyValidationResult, BoundingStrategyConfig, BoundingStrategyManager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: BoundingStrategyManager\n\n## Examples\nvalidation_sample_size: int = 10\n\n# Optimization parameters\n\nmemory_eff = sum(r.memory_usage.get('memory_efficiency', 1.0) for r in results) / total_operations\n\nif metrics.total_operations >= 5:  # Minimum sample size\n# Calculate combined performance score\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.bounding_strategy_manager\n\nBounding Strategy Manager - Management of bounding strategies for hybrid operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **StrategySelectionMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **StrategyValidationLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **StrategyPerformanceMetrics**\n  - Methods: 1\n  - Complexity: 20\n- **StrategyRecommendation**\n  - Methods: 1\n  - Complexity: 15\n- **StrategyValidationResult**\n  - Methods: 0\n  - Complexity: 11\n- **BoundingStrategyConfig**\n  - Methods: 1\n  - Complexity: 32\n- **BoundingStrategyManager**\n  - Methods: 36\n  - Complexity: 208\n## Integration Points\n\n- Class: BoundingStrategyManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_service_middleware",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_service_middleware.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_service_middleware\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_service_middleware\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **config** (query) *required*: MiddlewareConfig - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **config** (query) *required*: MiddlewareConfig - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **config** (query) *required*: MiddlewareConfig - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nInitialize hybrid service middleware\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### ///post/init//\n\n#### POST ///post/init//\n\nValidate middleware configuration\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///post/init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///post/init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //generate/cache/key\n\n#### POST //generate/cache/key\n\nGenerate cache key for request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/cache/key?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/cache/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //get/client/id\n\n#### POST //get/client/id\n\nExtract client ID from request\n\n🔒 Authentication required\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000//get/client/id?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/client/id\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //initialize/default/middleware\n\n#### POST //initialize/default/middleware\n\nInitialize default middleware components\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/default/middleware\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/default/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //log/request\n\n#### POST //log/request\n\nLog request details\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//log/request?request=example_request&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//log/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //optimize/request/tensors\n\n#### POST //optimize/request/tensors\n\nOptimize tensors in request payload\n\n🔒 Authentication required\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000//optimize/request/tensors?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//optimize/request/tensors\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //optimize/response/tensors\n\n#### POST //optimize/response/tensors\n\nOptimize tensors in response data\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//optimize/response/tensors?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//optimize/response/tensors\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //process/request/impl\n\n#### POST //process/request/impl\n\nImplementation of request processing - override in subclasses\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/request/impl?request=example_request&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/request/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //process/request/impl\n\nAPI endpoint: _process_request_impl\n\n⏱️ Rate limited\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/request/impl?request=example_request&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/request/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //process/request/impl\n\nAPI endpoint: _process_request_impl\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/request/impl?request=example_request&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/request/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //process/request/impl\n\nAPI endpoint: _process_request_impl\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/request/impl?request=example_request&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/request/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //process/request/impl\n\nAPI endpoint: _process_request_impl\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/request/impl?request=example_request&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/request/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //process/request/impl\n\nAPI endpoint: _process_request_impl\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/request/impl?request=example_request&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/request/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //process/response/impl\n\n#### POST //process/response/impl\n\nImplementation of response processing - override in subclasses\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/response/impl?response=example_response&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/response/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //process/response/impl\n\nAPI endpoint: _process_response_impl\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/response/impl?response=example_response&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/response/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //process/response/impl\n\nAPI endpoint: _process_response_impl\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/response/impl?response=example_response&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/response/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //process/response/impl\n\nAPI endpoint: _process_response_impl\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/response/impl?response=example_response&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/response/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST //process/response/impl\n\nAPI endpoint: _process_response_impl\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//process/response/impl?response=example_response&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//process/response/impl\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //track/error\n\n#### POST //track/error\n\nTrack error details\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//track/error?response=example_response&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//track/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //track/performance\n\n#### POST //track/performance\n\nTrack performance metrics\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n- **context** (query) *required*: string - Parameter: context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//track/performance?response=example_response&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//track/performance\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/payload/content\n\n#### POST //validate/payload/content\n\nValidate payload content\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/payload/content?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/payload/content\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/payload/size\n\n#### POST //validate/payload/size\n\nValidate payload size\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/payload/size?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/payload/size\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/request/structure\n\n#### POST //validate/request/structure\n\nValidate request structure\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/request/structure?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/request/structure\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/response/structure\n\n#### POST //validate/response/structure\n\nValidate response structure\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/response/structure?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/response/structure\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/middleware/metrics\n\n#### GET /get/middleware/metrics\n\nGet comprehensive middleware metrics.\n\nReturns:\n    Dictionary containing performance metrics\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/middleware/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/middleware/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/middleware/status\n\n#### GET /get/middleware/status\n\nGet status of all middleware components.\n\nReturns:\n    Dictionary containing middleware status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/middleware/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/middleware/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/summary\n\n#### GET /get/performance/summary\n\nGet performance metrics summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /process/request\n\n#### POST /process/request\n\nProcess incoming request.\n\nArgs:\n    request: Service request to process\n    context: Processing context\n    \nReturns:\n    Tuple of (modified_request, should_continue)\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request to process\n- **context** (query) *required*: string - Processing context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/process/request?request=example_request&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST /process/request\n\nProcess request through middleware pipeline.\n\nArgs:\n    request: Service request to process\n    \nReturns:\n    Tuple of (modified_request, should_continue, context)\n    \nRaises:\n    ValueError: If request is invalid\n    RuntimeError: If processing fails\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request to process\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/process/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /process/response\n\n#### POST /process/response\n\nProcess outgoing response.\n\nArgs:\n    response: Service response to process\n    context: Processing context\n    \nReturns:\n    Modified response\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Service response to process\n- **context** (query) *required*: string - Processing context\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/process/response?response=example_response&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST /process/response\n\nProcess response through middleware pipeline.\n\nArgs:\n    response: Service response to process\n    context: Processing context from request processing\n    \nReturns:\n    Modified response\n    \nRaises:\n    ValueError: If response is invalid\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Service response to process\n- **context** (query) *required*: string - Processing context from request processing\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/process/response?response=example_response&context=example_context\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n    \"context\": \"example_context\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /remove/middleware\n\n#### DELETE /remove/middleware\n\nRemove middleware component by name.\n\nArgs:\n    middleware_name: Name of middleware to remove\n    \nReturns:\n    True if middleware was removed\n\n**Parameters:**\n\n- **middleware_name** (query) *required*: str - Name of middleware to remove\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X DELETE -H \"Content-Type: application/json\" \"http://localhost:8000/remove/middleware?middleware_name=example_middleware_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/remove/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"middleware_name\": \"example_middleware_name\",\n}\n\nresponse = requests.delete(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /update/processing/metrics\n\n#### PUT /update/processing/metrics\n\nUpdate processing metrics\n\n**Parameters:**\n\n- **processing_time** (query) *required*: float - Parameter: processing_time\n- **passed** (query) *required*: bool - Parameter: passed\n- **modified** (query) *required*: bool - Parameter: modified\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/processing/metrics?processing_time=example_processing_time&passed=example_passed&modified=example_modified\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/processing/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"processing_time\": \"example_processing_time\",\n    \"passed\": \"example_passed\",\n    \"modified\": \"example_modified\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_service_middleware\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_service_middleware\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///post/init//\": {\n      \"post\": {\n        \"summary\": \"Validate middleware configuration\",\n        \"description\": \"Validate middleware configuration\",\n        \"operationId\": \"__post_init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/processing/metrics\": {\n      \"put\": {\n        \"summary\": \"Update processing metrics\",\n        \"description\": \"Update processing metrics\",\n        \"operationId\": \"update_processing_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"processing_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: processing_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"passed\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: passed\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"modified\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: modified\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/process/request\": {\n      \"post\": {\n        \"summary\": \"Process request through middleware pipeline.\\n\\nArgs:\\n    request: Service request to process\\n    \\nReturns:\\n    Tuple of (modified_request, should_continue, context)\\n    \\nRaises:\\n    ValueError: If request is invalid\\n    RuntimeError: If processing fails\",\n        \"description\": \"Process request through middleware pipeline.\\n\\nArgs:\\n    request: Service request to process\\n    \\nReturns:\\n    Tuple of (modified_request, should_continue, context)\\n    \\nRaises:\\n    ValueError: If request is invalid\\n    RuntimeError: If processing fails\",\n        \"operationId\": \"process_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request to process\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/process/response\": {\n      \"post\": {\n        \"summary\": \"Process response through middleware pipeline.\\n\\nArgs:\\n    response: Service response to process\\n    context: Processing context from request processing\\n    \\nReturns:\\n    Modified response\\n    \\nRaises:\\n    ValueError: If response is invalid\",\n        \"description\": \"Process response through middleware pipeline.\\n\\nArgs:\\n    response: Service response to process\\n    context: Processing context from request processing\\n    \\nReturns:\\n    Modified response\\n    \\nRaises:\\n    ValueError: If response is invalid\",\n        \"operationId\": \"process_response\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Service response to process\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Processing context from request processing\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//process/request/impl\": {\n      \"post\": {\n        \"summary\": \"API endpoint: _process_request_impl\",\n        \"description\": \"API endpoint: _process_request_impl\",\n        \"operationId\": \"_process_request_impl\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//process/response/impl\": {\n      \"post\": {\n        \"summary\": \"API endpoint: _process_response_impl\",\n        \"description\": \"API endpoint: _process_response_impl\",\n        \"operationId\": \"_process_response_impl\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"Initialize hybrid service middleware\",\n        \"description\": \"Initialize hybrid service middleware\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//get/client/id\": {\n      \"post\": {\n        \"summary\": \"Extract client ID from request\",\n        \"description\": \"Extract client ID from request\",\n        \"operationId\": \"_get_client_id\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"//generate/cache/key\": {\n      \"post\": {\n        \"summary\": \"Generate cache key for request\",\n        \"description\": \"Generate cache key for request\",\n        \"operationId\": \"_generate_cache_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/request/structure\": {\n      \"post\": {\n        \"summary\": \"Validate request structure\",\n        \"description\": \"Validate request structure\",\n        \"operationId\": \"_validate_request_structure\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/payload/size\": {\n      \"post\": {\n        \"summary\": \"Validate payload size\",\n        \"description\": \"Validate payload size\",\n        \"operationId\": \"_validate_payload_size\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/payload/content\": {\n      \"post\": {\n        \"summary\": \"Validate payload content\",\n        \"description\": \"Validate payload content\",\n        \"operationId\": \"_validate_payload_content\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/response/structure\": {\n      \"post\": {\n        \"summary\": \"Validate response structure\",\n        \"description\": \"Validate response structure\",\n        \"operationId\": \"_validate_response_structure\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//optimize/request/tensors\": {\n      \"post\": {\n        \"summary\": \"Optimize tensors in request payload\",\n        \"description\": \"Optimize tensors in request payload\",\n        \"operationId\": \"_optimize_request_tensors\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"//optimize/response/tensors\": {\n      \"post\": {\n        \"summary\": \"Optimize tensors in response data\",\n        \"description\": \"Optimize tensors in response data\",\n        \"operationId\": \"_optimize_response_tensors\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//log/request\": {\n      \"post\": {\n        \"summary\": \"Log request details\",\n        \"description\": \"Log request details\",\n        \"operationId\": \"_log_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//track/performance\": {\n      \"post\": {\n        \"summary\": \"Track performance metrics\",\n        \"description\": \"Track performance metrics\",\n        \"operationId\": \"_track_performance\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//track/error\": {\n      \"post\": {\n        \"summary\": \"Track error details\",\n        \"description\": \"Track error details\",\n        \"operationId\": \"_track_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          },\n          {\n            \"name\": \"context\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: context\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/summary\": {\n      \"get\": {\n        \"summary\": \"Get performance metrics summary\",\n        \"description\": \"Get performance metrics summary\",\n        \"operationId\": \"get_performance_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/default/middleware\": {\n      \"post\": {\n        \"summary\": \"Initialize default middleware components\",\n        \"description\": \"Initialize default middleware components\",\n        \"operationId\": \"_initialize_default_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/remove/middleware\": {\n      \"delete\": {\n        \"summary\": \"Remove middleware component by name.\\n\\nArgs:\\n    middleware_name: Name of middleware to remove\\n    \\nReturns:\\n    True if middleware was removed\",\n        \"description\": \"Remove middleware component by name.\\n\\nArgs:\\n    middleware_name: Name of middleware to remove\\n    \\nReturns:\\n    True if middleware was removed\",\n        \"operationId\": \"remove_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"middleware_name\",\n            \"in\": \"query\",\n            \"description\": \"Name of middleware to remove\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/middleware/status\": {\n      \"get\": {\n        \"summary\": \"Get status of all middleware components.\\n\\nReturns:\\n    Dictionary containing middleware status\",\n        \"description\": \"Get status of all middleware components.\\n\\nReturns:\\n    Dictionary containing middleware status\",\n        \"operationId\": \"get_middleware_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"initialized\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_components\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_requests_processed\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"startup_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"uptime_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"components\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"components_by_type\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/middleware/metrics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive middleware metrics.\\n\\nReturns:\\n    Dictionary containing performance metrics\",\n        \"description\": \"Get comprehensive middleware metrics.\\n\\nReturns:\\n    Dictionary containing performance metrics\",\n        \"operationId\": \"get_middleware_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_service_middleware\n\n## Overview\n\nHybrid Service Middleware - Middleware for request/response processing\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_service_middleware.py`\n\n## Dependencies\n\n- logging\n- enum\n- typing\n- uuid\n- torch\n- asyncio\n- service_interfaces.service_interfaces_core\n- hashlib\n- datetime\n- threading\n- dataclasses\n- json\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1010\n- **Code Lines:** 759\n- **Comment Lines:** 50\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_service_middleware\n\nHybrid Service Middleware - Middleware for request/response processing\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 11\n- **Functions:** 0\n- **Dependencies:** 14\n\n## Class Hierarchy\n\n- **MiddlewareType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 11\n- **MiddlewarePriority** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **MiddlewareConfig**\n  - Methods: 1\n  - Complexity: 35\n- **MiddlewareMetrics**\n  - Methods: 1\n  - Complexity: 19\n- **MiddlewareComponent**\n  - Methods: 5\n  - Complexity: 16\n- **RateLimitingMiddleware** (inherits from MiddlewareComponent)\n  - Methods: 3\n  - Complexity: 13\n- **CachingMiddleware** (inherits from MiddlewareComponent)\n  - Methods: 6\n  - Complexity: 27\n- **ValidationMiddleware** (inherits from MiddlewareComponent)\n  - Methods: 8\n  - Complexity: 43\n- **GPUOptimizationMiddleware** (inherits from MiddlewareComponent)\n  - Methods: 7\n  - Complexity: 35\n- **MonitoringMiddleware** (inherits from MiddlewareComponent)\n  - Methods: 7\n  - Complexity: 32\n- **HybridServiceMiddleware**\n  - Methods: 12\n  - Complexity: 85\n## Integration Points\n\n- Class: HybridServiceMiddleware\n- Function: _get_client_id\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.padic_encoder",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_encoder.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.padic_encoder",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.padic_encoder\n\n## Overview\n\nP-adic number encoding and mathematical operations.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_encoder.py`\n\n## Dependencies\n\n- numpy\n- math\n- typing\n- torch\n- fractions\n- dataclasses\n\n## Code Structure\n\n- **Total Lines:** 289\n- **Code Lines:** 228\n- **Comment Lines:** 18\n\n## Complexity Indicators\n\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.direction_analyzer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/direction_analyzer.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.direction_analyzer",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.direction_analyzer\n\n## Overview\n\nDirection Analyzer - Advanced direction analysis for hybrid switching optimization\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/direction_analyzer.py`\n\n## Dependencies\n\n- numpy\n- gac_system.gac_types\n- logging\n- math\n- gac_system.direction_state\n- statistics\n- typing\n- enum\n- torch\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1200\n- **Code Lines:** 834\n- **Comment Lines:** 107\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.direction_analyzer\n\nDirection Analyzer - Advanced direction analysis for hybrid switching optimization\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 14\n\n## Class Hierarchy\n\n- **DirectionPatternType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 9\n- **DirectionTrendType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **DirectionPatternAnalysis**\n  - Methods: 1\n  - Complexity: 14\n- **DirectionTrendAnalysis**\n  - Methods: 1\n  - Complexity: 15\n- **DirectionStabilityAnalysis**\n  - Methods: 1\n  - Complexity: 15\n- **DirectionOptimizationRecommendation**\n  - Methods: 1\n  - Complexity: 16\n- **DirectionAnalyzerConfig**\n  - Methods: 1\n  - Complexity: 27\n- **DirectionAnalyzer**\n  - Methods: 42\n  - Complexity: 212\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.bounding_performance_optimizer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/bounding_performance_optimizer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.bounding_performance_optimizer\n\nAPI endpoints for independent_core.compression_systems.padic.bounding_performance_optimizer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/performance/summary\n\n#### GET /get/performance/summary\n\nGet comprehensive performance summary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.bounding_performance_optimizer\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.bounding_performance_optimizer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/performance/summary\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive performance summary\",\n        \"description\": \"Get comprehensive performance summary\",\n        \"operationId\": \"get_performance_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_profiles\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_history_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"regression_history_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"current_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"baseline_metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_optimizations\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_active\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_monitoring_update\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"performance_alerts_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_size\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.bounding_performance_optimizer\n\n## Overview\n\nBounding Performance Optimizer - Performance optimization for bounding operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/bounding_performance_optimizer.py`\n\n## Dependencies\n\n- numpy\n- gac_system.gac_types\n- logging\n- math\n- gac_system.direction_state\n- enum\n- typing\n- hybrid_bounding_engine\n- torch\n- psutil\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1496\n- **Code Lines:** 1088\n- **Comment Lines:** 127\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.compression_systems.padic.bounding_performance_optimizer\n\nBounding Performance Optimizer - Performance optimization for bounding operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/bounding_performance_optimizer.py\n- **Total Classes:** 8\n- **Total Functions:** 0\n- **Dependencies:** numpy, gac_system.gac_types, logging, math, gac_system.direction_state, enum, typing, hybrid_bounding_engine, torch, psutil, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (8):** OptimizationType, PerformanceMetricType, RegressionType, PerformanceProfile, OptimizationResult, RegressionDetectionResult, BoundingPerformanceConfig, BoundingPerformanceOptimizer\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nMEMORY_USAGE = \"memory_usage\"\n\nmemory_usage_mb: float\n\nif self.memory_usage_mb < 0:\n\nraise ValueError(\"Memory usage must be non-negative\")\n\n\n\nprofiling_sample_rate: float = 0.1  # Profile 10% of operations\n\nmax_memory_usage_mb: float = 1024.0\n\nmin_samples_for_optimization: int = 20\n\nif not (0.0 <= self.profiling_sample_rate <= 1.0):\n\nraise ValueError(\"Profiling sample rate must be between 0.0 and 1.0\")\n\ninitial_memory = self._get_memory_usage()\n\ninitial_gpu_memory = self._get_gpu_memory_usage()\n\nfinal_memory = self._get_memory_usage()\n\nfinal_gpu_memory = self._get_gpu_memory_usage()\n\nmemory_usage_mb = final_memory - initial_memory\n\nexecution_time_ms, memory_usage_mb, gpu_utilization\n\nexecution_time_ms, memory_usage_mb, gpu_utilization, cpu_utilization\n\nexecution_time_ms, memory_usage_mb, gpu_utilization, bottleneck_analysis\n\nmemory_usage_mb=max(0.0, memory_usage_mb),\n\nOptimize GPU memory usage for bounding operations.\n\n\n# Adjust based on memory usage patterns\n\nif performance_analysis.get('average_memory_mb', 0.0) > self.config.max_memory_usage_mb:\n\nmemory_adjustments = self._adjust_for_memory_usage(performance_data)\n\nadjustment_results['parameter_adjustments']['memory_usage'] = memory_adjustments\n\n'memory_usage_mb': 100.0,\n\ndef _get_memory_usage(self) -> float:\n\n\"\"\"Get current memory usage in MB\"\"\"\n\ndef _get_gpu_memory_usage(self) -> float:\n\n\"\"\"Get current GPU memory usage in MB\"\"\"\n\ndef _calculate_efficiency_score(self, execution_time_ms: float, memory_usage_mb: float, gpu_utilization: float) -> float:\n\"\"\"Calculate efficiency score for operation\"\"\"\n# Normalize metrics to [0, 1] range\n\nmemory_score = min(1.0, self.config.max_memory_usage_mb / (abs(memory_usage_mb) + 1.0))\n\ndef _analyze_bottlenecks(self, execution_time_ms: float, memory_usage_mb: float,\n\nif abs(memory_usage_mb) > self.config.max_memory_usage_mb * 0.8:\n\nbottlenecks['memory_bottleneck'] = abs(memory_usage_mb) / self.config.max_memory_usage_mb\n\n# GPU utilization bottleneck\n\ndef _identify_optimization_opportunities(self, execution_time_ms: float, memory_usage_mb: float,\n\nif abs(memory_usage_mb) > self.config.max_memory_usage_mb * 0.5:\n\nopportunities.append('memory_usage_optimization')\n\nself.current_metrics['memory_usage_mb'] = (\n\nalpha * profile.memory_usage_mb +\n\n(1 - alpha) * self.current_metrics.get('memory_usage_mb', profile.memory_usage_mb)\n\n# Analyze current cache usage\n\n\"\"\"Optimize gradient memory usage\"\"\"\n\nmemories = [p.memory_usage_mb for p in stable_profiles[-50:]]\n\nself.performance_baselines['memory_usage_mb'] = memories\n\naffected_metrics=['memory_usage_mb'],\n\nif 'memory_usage_mb' not in self.performance_baselines:\n\nbaseline_memories = self.performance_baselines['memory_usage_mb']\n\ncurrent_memories = [abs(p.memory_usage_mb) for p in recent_profiles[-20:]]\n\n\nmemories = [p.memory_usage_mb for p in recent_profiles]\n\n# Check for high memory usage\n\nhigh_memory_operations = [p for p in recent_profiles if abs(p.memory_usage_mb) > self.config.max_memory_usage_mb]\n\n'type': 'high_memory_usage',\n\n'max_memory_mb': max(abs(p.memory_usage_mb) for p in high_memory_operations),\n\navg_memory = sum(abs(p.memory_usage_mb) for p in recent_profiles) / len(recent_profiles)\n\nif avg_memory > self.config.max_memory_usage_mb * 0.8:\n\nrecommendations.append(\"Consider enabling memory optimization to reduce memory usage\")\n\n# Efficiency-based recommendations\n\ndef _adjust_for_memory_usage(self, performance_data: List[Dict[str, Any]]) -> Dict[str, Any]:\n\n\"\"\"Adjust parameters for memory usage optimization\"\"\"\n\n'target_memory': self.config.max_memory_usage_mb,\n\n'expected_improvement': min(0.4, (avg_memory - self.config.max_memory_usage_mb) / avg_memory)\n\nif avg_memory > self.config.max_memory_usage_mb:\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.bounding_performance_optimizer\n\nBounding Performance Optimizer - Performance optimization for bounding operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **OptimizationType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **PerformanceMetricType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **RegressionType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **PerformanceProfile**\n  - Methods: 1\n  - Complexity: 22\n- **OptimizationResult**\n  - Methods: 0\n  - Complexity: 12\n- **RegressionDetectionResult**\n  - Methods: 0\n  - Complexity: 11\n- **BoundingPerformanceConfig**\n  - Methods: 1\n  - Complexity: 34\n- **BoundingPerformanceOptimizer**\n  - Methods: 47\n  - Complexity: 235\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.padic_service_config",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_service_config.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.padic_service_config\n\nAPI endpoints for independent_core.compression_systems.padic.padic_service_config\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //get/config/schema\n\n#### POST //get/config/schema\n\nGet configuration schema with Saraphis-specific validations.\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/config/schema\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/config/schema\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //get/default/config\n\n#### POST //get/default/config\n\nGet default configuration tailored for Saraphis P-adic system.\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/default/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/default/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/clustering/config\n\n#### GET /get/clustering/config\n\nGet ClusteringConfig object from current configuration.\n\nReturns:\n    ClusteringConfig instance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/clustering/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/clustering/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/gpu/config\n\n#### GET /get/gpu/config\n\nGet GPUDecompressionConfig object from current configuration.\n\nReturns:\n    GPUDecompressionConfig instance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/gpu/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/gpu/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/hensel/config\n\n#### GET /get/hensel/config\n\nGet HenselLiftingConfig object from current configuration.\n\nReturns:\n    HenselLiftingConfig instance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hensel/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hensel/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/history\n\n#### GET /get/history\n\nGet configuration history.\n\nArgs:\n    count: Optional number of entries to retrieve\n    \nReturns:\n    List of historical configurations\n\n**Parameters:**\n\n- **count** (query) *required*: string - Optional number of entries to retrieve\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/history?count=example_count\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/history\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"count\": \"example_count\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/integration/config\n\n#### GET /get/integration/config\n\nGet PadicIntegrationConfig object from current configuration.\n\nReturns:\n    PadicIntegrationConfig instance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /load/configuration\n\n#### POST /load/configuration\n\nLoad configuration from file.\n\nArgs:\n    path: Optional path override\n    \nReturns:\n    True if successful\n\n**Parameters:**\n\n- **path** (query) *required*: string - Optional path override\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/configuration?path=example_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"path\": \"example_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /save/configuration\n\n#### POST /save/configuration\n\nSave configuration to file.\n\nArgs:\n    path: Optional path override\n    \nReturns:\n    True if successful\n\n**Parameters:**\n\n- **path** (query) *required*: string - Optional path override\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/save/configuration?path=example_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/save/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"path\": \"example_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.padic_service_config\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.padic_service_config\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/load/configuration\": {\n      \"post\": {\n        \"summary\": \"Load configuration from file.\\n\\nArgs:\\n    path: Optional path override\\n    \\nReturns:\\n    True if successful\",\n        \"description\": \"Load configuration from file.\\n\\nArgs:\\n    path: Optional path override\\n    \\nReturns:\\n    True if successful\",\n        \"operationId\": \"load_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"path\",\n            \"in\": \"query\",\n            \"description\": \"Optional path override\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/save/configuration\": {\n      \"post\": {\n        \"summary\": \"Save configuration to file.\\n\\nArgs:\\n    path: Optional path override\\n    \\nReturns:\\n    True if successful\",\n        \"description\": \"Save configuration to file.\\n\\nArgs:\\n    path: Optional path override\\n    \\nReturns:\\n    True if successful\",\n        \"operationId\": \"save_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"path\",\n            \"in\": \"query\",\n            \"description\": \"Optional path override\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/history\": {\n      \"get\": {\n        \"summary\": \"Get configuration history.\\n\\nArgs:\\n    count: Optional number of entries to retrieve\\n    \\nReturns:\\n    List of historical configurations\",\n        \"description\": \"Get configuration history.\\n\\nArgs:\\n    count: Optional number of entries to retrieve\\n    \\nReturns:\\n    List of historical configurations\",\n        \"operationId\": \"get_history\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Optional number of entries to retrieve\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/integration/config\": {\n      \"get\": {\n        \"summary\": \"Get PadicIntegrationConfig object from current configuration.\\n\\nReturns:\\n    PadicIntegrationConfig instance\",\n        \"description\": \"Get PadicIntegrationConfig object from current configuration.\\n\\nReturns:\\n    PadicIntegrationConfig instance\",\n        \"operationId\": \"get_integration_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/hensel/config\": {\n      \"get\": {\n        \"summary\": \"Get HenselLiftingConfig object from current configuration.\\n\\nReturns:\\n    HenselLiftingConfig instance\",\n        \"description\": \"Get HenselLiftingConfig object from current configuration.\\n\\nReturns:\\n    HenselLiftingConfig instance\",\n        \"operationId\": \"get_hensel_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/clustering/config\": {\n      \"get\": {\n        \"summary\": \"Get ClusteringConfig object from current configuration.\\n\\nReturns:\\n    ClusteringConfig instance\",\n        \"description\": \"Get ClusteringConfig object from current configuration.\\n\\nReturns:\\n    ClusteringConfig instance\",\n        \"operationId\": \"get_clustering_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/gpu/config\": {\n      \"get\": {\n        \"summary\": \"Get GPUDecompressionConfig object from current configuration.\\n\\nReturns:\\n    GPUDecompressionConfig instance\",\n        \"description\": \"Get GPUDecompressionConfig object from current configuration.\\n\\nReturns:\\n    GPUDecompressionConfig instance\",\n        \"operationId\": \"get_gpu_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//get/default/config\": {\n      \"post\": {\n        \"summary\": \"Get default configuration tailored for Saraphis P-adic system.\",\n        \"description\": \"Get default configuration tailored for Saraphis P-adic system.\",\n        \"operationId\": \"_get_default_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"padic\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"default_p\": {\n                          \"type\": \"number\"\n                        },\n                        \"default_precision\": {\n                          \"type\": \"number\"\n                        },\n                        \"max_precision\": {\n                          \"type\": \"number\"\n                        },\n                        \"compression_ratio\": {\n                          \"type\": \"number\"\n                        },\n                        \"enable_gpu\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"cache_size\": {\n                          \"type\": \"number\"\n                        },\n                        \"hensel_lifting\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"max_iterations\": {\n                              \"type\": \"number\"\n                            },\n                            \"convergence_tolerance\": {\n                              \"type\": \"number\"\n                            },\n                            \"damping_factor\": {\n                              \"type\": \"number\"\n                            },\n                            \"adaptive_damping\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"min_damping\": {\n                              \"type\": \"number\"\n                            },\n                            \"max_damping\": {\n                              \"type\": \"number\"\n                            },\n                            \"enable_validation\": {\n                              \"type\": \"unknown\"\n                            }\n                          }\n                        },\n                        \"clustering\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"max_clusters\": {\n                              \"type\": \"number\"\n                            },\n                            \"min_cluster_size\": {\n                              \"type\": \"number\"\n                            },\n                            \"distance_threshold\": {\n                              \"type\": \"number\"\n                            },\n                            \"adaptive_clustering\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"rebalance_threshold\": {\n                              \"type\": \"number\"\n                            },\n                            \"max_iterations\": {\n                              \"type\": \"number\"\n                            },\n                            \"convergence_tolerance\": {\n                              \"type\": \"number\"\n                            },\n                            \"enable_gpu_acceleration\": {\n                              \"type\": \"unknown\"\n                            }\n                          }\n                        },\n                        \"gpu_decompression\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"device_id\": {\n                              \"type\": \"number\"\n                            },\n                            \"memory_fraction\": {\n                              \"type\": \"number\"\n                            },\n                            \"batch_size\": {\n                              \"type\": \"number\"\n                            },\n                            \"enable_tensor_cores\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"stream_count\": {\n                              \"type\": \"number\"\n                            },\n                            \"enable_memory_pooling\": {\n                              \"type\": \"unknown\"\n                            },\n                            \"max_workspace_size\": {\n                              \"type\": \"number\"\n                            },\n                            \"enable_mixed_precision\": {\n                              \"type\": \"unknown\"\n                            }\n                          }\n                        }\n                      }\n                    },\n                    \"service\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"max_batch_size\": {\n                          \"type\": \"number\"\n                        },\n                        \"request_timeout\": {\n                          \"type\": \"number\"\n                        },\n                        \"enable_authentication\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"enable_rate_limiting\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"max_requests_per_minute\": {\n                          \"type\": \"number\"\n                        },\n                        \"enable_response_compression\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"max_concurrent_requests\": {\n                          \"type\": \"number\"\n                        },\n                        \"enable_caching\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"cache_size_mb\": {\n                          \"type\": \"number\"\n                        }\n                      }\n                    },\n                    \"orchestration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"max_queue_size\": {\n                          \"type\": \"number\"\n                        },\n                        \"max_workers\": {\n                          \"type\": \"number\"\n                        },\n                        \"load_balancing_strategy\": {\n                          \"type\": \"string\"\n                        },\n                        \"cache_ttl\": {\n                          \"type\": \"number\"\n                        },\n                        \"history_size\": {\n                          \"type\": \"number\"\n                        }\n                      }\n                    },\n                    \"monitoring\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"health_check_interval\": {\n                          \"type\": \"number\"\n                        },\n                        \"stale_service_timeout\": {\n                          \"type\": \"number\"\n                        },\n                        \"metrics_aggregation_interval\": {\n                          \"type\": \"number\"\n                        },\n                        \"time_series_window\": {\n                          \"type\": \"number\"\n                        },\n                        \"enable_metrics_collection\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"metrics_buffer_size\": {\n                          \"type\": \"number\"\n                        }\n                      }\n                    },\n                    \"integration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"brain_core_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"training_manager_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"gpu_memory_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"gradient_compression_ratio\": {\n                          \"type\": \"number\"\n                        },\n                        \"adaptive_precision\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"precision_min\": {\n                          \"type\": \"number\"\n                        },\n                        \"precision_max\": {\n                          \"type\": \"number\"\n                        },\n                        \"precision_step\": {\n                          \"type\": \"number\"\n                        },\n                        \"gac_compression_threshold\": {\n                          \"type\": \"number\"\n                        },\n                        \"gac_async_processing\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"brain_priority\": {\n                          \"type\": \"number\"\n                        },\n                        \"brain_auto_register\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"brain_memory_limit\": {\n                          \"type\": \"number\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//get/config/schema\": {\n      \"post\": {\n        \"summary\": \"Get configuration schema with Saraphis-specific validations.\",\n        \"description\": \"Get configuration schema with Saraphis-specific validations.\",\n        \"operationId\": \"_get_config_schema\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"type\": {\n                      \"type\": \"string\"\n                    },\n                    \"properties\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"padic\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"type\": {\n                              \"type\": \"string\"\n                            },\n                            \"properties\": {\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"default_p\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"default_precision\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"max_precision\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"compression_ratio\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"enable_gpu\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"cache_size\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"hensel_lifting\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"properties\": {\n                                      \"type\": \"object\",\n                                      \"properties\": {\n                                        \"max_iterations\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"convergence_tolerance\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"damping_factor\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"adaptive_damping\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            }\n                                          }\n                                        },\n                                        \"min_damping\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"max_damping\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"enable_validation\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                },\n                                \"clustering\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"properties\": {\n                                      \"type\": \"object\",\n                                      \"properties\": {\n                                        \"max_clusters\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"min_cluster_size\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"distance_threshold\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"adaptive_clustering\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            }\n                                          }\n                                        },\n                                        \"rebalance_threshold\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"max_iterations\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"convergence_tolerance\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"enable_gpu_acceleration\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                },\n                                \"gpu_decompression\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"properties\": {\n                                      \"type\": \"object\",\n                                      \"properties\": {\n                                        \"device_id\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"memory_fraction\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"batch_size\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"enable_tensor_cores\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            }\n                                          }\n                                        },\n                                        \"stream_count\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            },\n                                            \"maximum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"enable_memory_pooling\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            }\n                                          }\n                                        },\n                                        \"max_workspace_size\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            },\n                                            \"minimum\": {\n                                              \"type\": \"number\"\n                                            }\n                                          }\n                                        },\n                                        \"enable_mixed_precision\": {\n                                          \"type\": \"object\",\n                                          \"properties\": {\n                                            \"type\": {\n                                              \"type\": \"string\"\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        },\n                        \"service\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"type\": {\n                              \"type\": \"string\"\n                            },\n                            \"properties\": {\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"max_batch_size\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"request_timeout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"enable_authentication\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"enable_rate_limiting\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"max_requests_per_minute\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"enable_response_compression\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"max_concurrent_requests\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"enable_caching\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"cache_size_mb\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        },\n                        \"orchestration\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"type\": {\n                              \"type\": \"string\"\n                            },\n                            \"properties\": {\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"max_queue_size\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"max_workers\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"load_balancing_strategy\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"enum\": {\n                                      \"type\": \"array\"\n                                    }\n                                  }\n                                },\n                                \"cache_ttl\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"history_size\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        },\n                        \"monitoring\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"type\": {\n                              \"type\": \"string\"\n                            },\n                            \"properties\": {\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"health_check_interval\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"stale_service_timeout\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"metrics_aggregation_interval\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"time_series_window\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"enable_metrics_collection\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"metrics_buffer_size\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        },\n                        \"integration\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"type\": {\n                              \"type\": \"string\"\n                            },\n                            \"properties\": {\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"brain_core_enabled\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"training_manager_enabled\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"gpu_memory_enabled\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"gradient_compression_ratio\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"adaptive_precision\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"precision_min\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"precision_max\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"precision_step\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"gac_compression_threshold\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"gac_async_processing\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"brain_priority\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    },\n                                    \"maximum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                },\n                                \"brain_auto_register\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    }\n                                  }\n                                },\n                                \"brain_memory_limit\": {\n                                  \"type\": \"object\",\n                                  \"properties\": {\n                                    \"type\": {\n                                      \"type\": \"string\"\n                                    },\n                                    \"minimum\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.padic_service_config\n\n## Overview\n\nP-Adic Service Configuration Module\n\nProvides unified configuration management for P-Adic services with validation,\nhistory tracking, and change notification capabilities.\n\nIntegrates with existing Saraphis independent core P-adic compression system.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_service_config.py`\n\n## Dependencies\n\n- pathlib\n- sys\n- json\n- logging\n- padic_advanced\n- typing\n- padic_integration\n- datetime\n- collections\n- os\n\n## Code Structure\n\n- **Total Lines:** 696\n- **Code Lines:** 576\n- **Comment Lines:** 25\n\n## Complexity Indicators\n\n- High function count\n\n",
        "configuration_guide": "\n# independent_core.compression_systems.padic.padic_service_config\n\nP-Adic Service Configuration Module\n\nProvides unified configuration management for P-Adic services with validation,\nhistory tracking, and change notification capabilities.\n\nIntegrates with existing Saraphis independent core P-adic compression system.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_service_config.py\n- **Total Classes:** 1\n- **Total Functions:** 0\n- **Dependencies:** pathlib, sys, json, logging, padic_advanced, typing, padic_integration, datetime, collections, os\n\n## Contents\n**Classes (1):** PadicServiceConfiguration\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: PadicServiceConfiguration\n\n## Examples\nNo examples available\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.padic_service_config\n\nP-Adic Service Configuration Module\n\nProvides unified configuration management for P-Adic services with validation,\nhistory tracking, and change notification capabilities.\n\nIntegrates with existing Saraphis independent core P-adic compression system.\n\n## Components Overview\n\n- **Classes:** 1\n- **Functions:** 0\n- **Dependencies:** 10\n\n## Class Hierarchy\n\n- **PadicServiceConfiguration**\n  - Methods: 25\n  - Complexity: 126\n## Integration Points\n\n- Class: PadicServiceConfiguration\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "configuration_guide missing required section: Overview",
        "configuration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.integration_example_advanced",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/integration_example_advanced.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.integration_example_advanced",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.integration_example_advanced\n\n## Overview\n\nAdvanced P-adic Features Integration Example\nDemonstrates Hensel lifting, hierarchical clustering, GPU decompression, and p-adic optimizers\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/integration_example_advanced.py`\n\n## Dependencies\n\n- numpy\n- typing\n- torch\n- independent_core.compression_systems.padic\n- time\n\n## Code Structure\n\n- **Total Lines:** 513\n- **Code Lines:** 350\n- **Comment Lines:** 52\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.integration_example_advanced\n\nAdvanced P-adic Features Integration Example\nDemonstrates Hensel lifting, hierarchical clustering, GPU decompression, and p-adic optimizers\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/integration_example_advanced.py\n- **Total Classes:** 0\n- **Total Functions:** 5\n- **Dependencies:** numpy, typing, torch, independent_core.compression_systems.padic, time\n\n## Contents\n**Functions (5):** demonstrate_hensel_lifting, demonstrate_hierarchical_clustering, demonstrate_gpu_decompression, demonstrate_padic_optimizers, demonstrate_integrated_system\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nAdvanced P-adic Features Integration Example\n\nDemonstrates Hensel lifting, hierarchical clustering, GPU decompression, and p-adic optimizers\n\"\"\"\n\n\ndef demonstrate_hensel_lifting():\n\n\"\"\"Demonstrate Hensel lifting for precision enhancement\"\"\"\n\n\nprint(\"=== Hensel Lifting Demonstration ===\")\n\n# Configure Hensel lifting\n\n# Create sample p-adic weight\n\ncoefficients = [3, 1, 4, 1, 5]  # Sample coefficients\n\ndef demonstrate_hierarchical_clustering():\n\n\"\"\"Demonstrate hierarchical clustering with ultrametric distances\"\"\"\n\n\nprint(f\"\\n=== Hierarchical Clustering Demonstration ===\")\n\n# Configure clustering\n\n# Create sample p-adic weights for clustering\n\nfor i in range(50):  # Create 50 sample weights\n# Generate coefficients with some structure\n\nprint(f\"Created {len(weights)} sample p-adic weights\")\n\n\n# Cache usage statistics\n\ncache_usage = clustering_metadata['cache_usage']\n\nprint(f\"    Cache size: {cache_usage['size']}\")\n\nprint(f\"    Cache hits: {cache_usage['hits']}\")\n\nprint(f\"    Cache misses: {cache_usage['misses']}\")\n\n# Cohomology information\n\ndef demonstrate_gpu_decompression():\n\n\"\"\"Demonstrate GPU-optimized progressive decompression\"\"\"\n\n\nprint(f\"\\n=== GPU Decompression Demonstration ===\")\n\n# Check CUDA availability\n\nprint(\"CUDA not available, skipping GPU decompression demonstration\")\n\n# Create sample p-adic weights\n\n# Memory usage\n\nmemory_usage = decompression_metadata['memory_usage']\n\nprint(f\"  Memory usage:\")\n\nprint(f\"    Utilization: {memory_usage['utilization']:.2%}\")\n\nprint(f\"    Allocated: {memory_usage['allocated_bytes']:,} bytes\")\n\n# Validate output tensor\n\ndef demonstrate_padic_optimizers():\n\n\"\"\"Demonstrate p-adic optimization algorithms\"\"\"\n\n\nprint(f\"\\n=== P-adic Optimizers Demonstration ===\")\n\n\n# Create sample parameters (p-adic weights)\n\n# Create sample gradients\n\ndef demonstrate_integrated_system():\n\n\"\"\"Demonstrate full integration of advanced P-adic features\"\"\"\n\n\n# Test integrated system with sample data\n\nsample_weight = compressed['encoded_data'][0]\n\nlifted_weight, _ = compression_system.lift_precision(sample_weight, 10)\n\nprint(f\"  ✓ Hensel lifting: {sample_weight.precision} -> {lifted_weight.precision}\")\n\n# Test clustering on compressed weights\n\nweights_sample = compressed['encoded_data'][:20]  # Use subset for speed\n\nroot_node, _ = compression_system.build_clusters(weights_sample)\n\nweights_sample = compressed['encoded_data'][:5]  # Small sample for optimization\n\ngradients_sample = [w.copy() for w in weights_sample]  # Mock gradients\n\n\nweights_sample, lr=0.01, name=\"integrated_test\"\n\ncompression_system.optimization_manager.step(optimizer_name, gradients_sample)\n\nprint(f\"\\n✓ Integrated advanced P-adic system demonstration complete!\")\n\n\n# Run all demonstrations\n\nprint(\"Advanced P-adic Features Integration Examples\")\n\ndemonstrate_hensel_lifting()\n\ndemonstrate_hierarchical_clustering()\n\ndemonstrate_gpu_decompression()\n\ndemonstrate_padic_optimizers()\n\ndemonstrate_integrated_system()\n\n\nprint(\"All advanced P-adic demonstrations complete!\")\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_performance_monitor",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_monitor.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_performance_monitor\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_performance_monitor\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/hybrid/performance/metrics\n\n#### GET /get/hybrid/performance/metrics\n\nGet current hybrid performance metrics.\n\nReturns:\n    Dictionary containing performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hybrid/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hybrid/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/with/operation\n\n#### PUT /update/with/operation\n\nUpdate metrics with new operation data\n\n**Parameters:**\n\n- **operation_data** (query) *required*: HybridOperationMonitorData - Parameter: operation_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/with/operation?operation_data=example_operation_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/with/operation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation_data\": \"example_operation_data\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_performance_monitor\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_performance_monitor\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/with/operation\": {\n      \"put\": {\n        \"summary\": \"Update metrics with new operation data\",\n        \"description\": \"Update metrics with new operation data\",\n        \"operationId\": \"update_with_operation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"operation_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: operation_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"HybridOperationMonitorData\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/hybrid/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get current hybrid performance metrics.\\n\\nReturns:\\n    Dictionary containing performance metrics\",\n        \"description\": \"Get current hybrid performance metrics.\\n\\nReturns:\\n    Dictionary containing performance metrics\",\n        \"operationId\": \"get_hybrid_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"monitoring_status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"monitoring_level\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"operation_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"pure_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"successful_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"failed_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"success_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_ratio\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"performance_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"average_execution_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_hybrid_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_pure_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"min_execution_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"max_execution_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_performance_score\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"performance_stability\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"resource_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"average_gpu_memory_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"peak_gpu_memory_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_cpu_usage\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_memory_usage_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_gpu_utilization\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"switching_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_switching_events\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_to_pure_switches\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"pure_to_hybrid_switches\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_switching_overhead_ms\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"monitoring_info\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"monitoring_start_time\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"last_update\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"monitoring_duration_hours\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"active_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"operation_history_length\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_performance_monitor\n\n## Overview\n\nHybrid Performance Monitor - Real-time monitoring of hybrid system performance\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_monitor.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- dynamic_switching_manager\n- logging\n- hybrid_padic_compressor\n- enum\n- typing\n- uuid\n- torch\n- asyncio\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1111\n- **Code Lines:** 824\n- **Comment Lines:** 92\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.compression_systems.padic.hybrid_performance_monitor\n\nHybrid Performance Monitor - Real-time monitoring of hybrid system performance\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_monitor.py\n- **Total Classes:** 8\n- **Total Functions:** 0\n- **Dependencies:** hybrid_padic_structures, dynamic_switching_manager, logging, hybrid_padic_compressor, enum, typing, uuid, torch, asyncio, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (8):** MonitoringLevel, AlertSeverity, MonitoringStatus, HybridOperationMonitorData, HybridPerformanceAlert, HybridMonitoringMetrics, HybridMonitoringConfig, HybridPerformanceMonitor\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\ncpu_usage_percent: float = 0.0\n\nmemory_usage_mb: float = 0.0\n\n# Memory efficiency score (lower usage is better)\n\naverage_gpu_memory_usage_mb: float = 0.0\n\npeak_gpu_memory_usage_mb: float = 0.0\n\naverage_cpu_usage_percent: float = 0.0\n\naverage_memory_usage_mb: float = 0.0\n\n\"\"\"Update resource usage metrics\"\"\"\n# GPU memory\n\nold_gpu_avg = self.average_gpu_memory_usage_mb\n\nself.average_gpu_memory_usage_mb = (\n\nself.peak_gpu_memory_usage_mb = max(self.peak_gpu_memory_usage_mb, operation_data.gpu_memory_peak_mb)\n\n\n# CPU usage\n\nif operation_data.cpu_usage_percent > 0:\n\nold_cpu_avg = self.average_cpu_usage_percent\n\nself.average_cpu_usage_percent = (\n\n(old_cpu_avg * (self.total_operations_monitored - 1) + operation_data.cpu_usage_percent) /\n\n# Memory usage\n\nif operation_data.memory_usage_mb > 0:\n\nold_mem_avg = self.average_memory_usage_mb\n\nself.average_memory_usage_mb = (\n\n(old_mem_avg * (self.total_operations_monitored - 1) + operation_data.memory_usage_mb) /\n\ncpu_usage_threshold_percent: float = 80.0\n\nmemory_usage_threshold_mb: float = 2048.0\n\nProvides comprehensive monitoring of hybrid operations, resource usage, and performance metrics.\n\"\"\"\n\n\nself.resource_usage_history: deque = deque(maxlen=200)\n\ngpu_memory_before_mb=self._get_gpu_memory_usage(),\n\ncpu_usage_percent=self._get_cpu_usage(),\n\nmemory_usage_mb=self._get_memory_usage(),\n\nmonitor_data.gpu_memory_after_mb = self._get_gpu_memory_usage()\n\n'average_gpu_memory_mb': self.monitoring_metrics.average_gpu_memory_usage_mb,\n\n'peak_gpu_memory_mb': self.monitoring_metrics.peak_gpu_memory_usage_mb,\n\n'average_cpu_usage': self.monitoring_metrics.average_cpu_usage_percent,\n\n'average_memory_usage_mb': self.monitoring_metrics.average_memory_usage_mb,\n\n'hybrid_usage_trend': self._calculate_hybrid_usage_trend(recent_operations),\n\n'resource_usage_trends': self._analyze_resource_trends(recent_operations),\n\nif self.monitoring_metrics.peak_gpu_memory_usage_mb > self.config.gpu_memory_threshold_mb:\n\nmessage=f\"Peak GPU memory usage ({self.monitoring_metrics.peak_gpu_memory_usage_mb:.2f}MB) \"\n\nmetric_name=\"peak_gpu_memory_usage_mb\",\n\nmetric_value=self.monitoring_metrics.peak_gpu_memory_usage_mb,\n\n# Check CPU usage alerts\n\nif self.monitoring_metrics.average_cpu_usage_percent > self.config.cpu_usage_threshold_percent:\n\nalert_type=\"cpu_usage_high\",\n\nmessage=f\"Average CPU usage ({self.monitoring_metrics.average_cpu_usage_percent:.1f}%) \"\n\nf\"exceeds threshold ({self.config.cpu_usage_threshold_percent}%)\",\n\nmetric_name=\"average_cpu_usage_percent\",\n\nmetric_value=self.monitoring_metrics.average_cpu_usage_percent,\n\nthreshold=self.config.cpu_usage_threshold_percent,\n\nself.resource_usage_history.clear()\n\n# Update resource usage history\n\ncurrent_usage = {\n\n'gpu_memory_mb': self._get_gpu_memory_usage(),\n\n'cpu_usage_percent': self._get_cpu_usage(),\n\n'memory_usage_mb': self._get_memory_usage(),\n\nself.resource_usage_history.append(current_usage)\n\n# Generate alerts if needed\n\ndef _get_gpu_memory_usage(self) -> float:\n\n\"\"\"Get current GPU memory usage in MB\"\"\"\n\ndef _get_cpu_usage(self) -> float:\n\n\"\"\"Get current CPU usage percentage\"\"\"\n# This would require psutil or similar library for real implementation\n\ndef _get_memory_usage(self) -> float:\n\n\"\"\"Get current memory usage in MB\"\"\"\n# This would require psutil or similar library for real implementation\n\ndef _calculate_hybrid_usage_trend(self, operations: List[HybridOperationMonitorData]) -> Dict[str, Any]:\n\n\"\"\"Calculate hybrid usage trend\"\"\"\n\n\"\"\"Analyze resource usage trends\"\"\"\n\ncpu_usage_values = [op.cpu_usage_percent for op in operations if op.cpu_usage_percent > 0]\n\n\n'cpu_usage_trend': self._calculate_trend(cpu_usage_values)\n\n# Hybrid usage insights\n\nhybrid_trend = trends.get('hybrid_usage_trend', {})\n\ninsights.append(\"Hybrid mode usage is decreasing - check switching logic\")\n\n# Stability insights\n\nself.resource_usage_history.clear()\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_performance_monitor\n\nHybrid Performance Monitor - Real-time monitoring of hybrid system performance\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 14\n\n## Class Hierarchy\n\n- **MonitoringLevel** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **AlertSeverity** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **MonitoringStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **HybridOperationMonitorData**\n  - Methods: 2\n  - Complexity: 29\n- **HybridPerformanceAlert**\n  - Methods: 1\n  - Complexity: 18\n- **HybridMonitoringMetrics**\n  - Methods: 3\n  - Complexity: 49\n- **HybridMonitoringConfig**\n  - Methods: 1\n  - Complexity: 26\n- **HybridPerformanceMonitor**\n  - Methods: 27\n  - Complexity: 134\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.dynamic_switching_manager",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/dynamic_switching_manager.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.dynamic_switching_manager\n\nAPI endpoints for independent_core.compression_systems.padic.dynamic_switching_manager\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/switching/analytics\n\n#### GET /get/switching/analytics\n\nGet comprehensive switching analytics.\n\nReturns:\n    Dictionary containing switching analytics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/switching/analytics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/switching/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/switching/config\n\n#### PUT /update/switching/config\n\nUpdate switching configuration.\n\nArgs:\n    config: New switching configuration\n    \nRaises:\n    TypeError: If config is invalid\n\n**Parameters:**\n\n- **config** (query) *required*: SwitchingConfig - New switching configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/switching/config?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/switching/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/switching/metrics\n\n#### PUT /update/switching/metrics\n\nUpdate analytics with switching event\n\n**Parameters:**\n\n- **event** (query) *required*: SwitchingEvent - Parameter: event\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/switching/metrics?event=example_event\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/switching/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"event\": \"example_event\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.dynamic_switching_manager\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.dynamic_switching_manager\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/switching/metrics\": {\n      \"put\": {\n        \"summary\": \"Update analytics with switching event\",\n        \"description\": \"Update analytics with switching event\",\n        \"operationId\": \"update_switching_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"event\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: event\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SwitchingEvent\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/switching/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive switching analytics.\\n\\nReturns:\\n    Dictionary containing switching analytics\",\n        \"description\": \"Get comprehensive switching analytics.\\n\\nReturns:\\n    Dictionary containing switching analytics\",\n        \"operationId\": \"get_switching_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"summary\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_switches\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"successful_switches\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"failed_switches\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"success_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_switching_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_decision_confidence\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"switching_patterns\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"switches_by_trigger\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"switches_by_mode_transition\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"current_state\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"current_mode\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"switching_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"last_switch_time\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"time_since_last_switch_seconds\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"recent_activity\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"recent_switches_count\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"switches_in_last_minute\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"can_switch_now\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"performance\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"performance_improvement_ratio\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"recent_performance_trend\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"auto_switch_confidence_threshold\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_data_size_threshold\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"pure_data_size_threshold\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"min_switching_interval_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"max_switches_per_minute\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"last_update\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/switching/config\": {\n      \"put\": {\n        \"summary\": \"Update switching configuration.\\n\\nArgs:\\n    config: New switching configuration\\n    \\nRaises:\\n    TypeError: If config is invalid\",\n        \"description\": \"Update switching configuration.\\n\\nArgs:\\n    config: New switching configuration\\n    \\nRaises:\\n    TypeError: If config is invalid\",\n        \"operationId\": \"update_switching_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"New switching configuration\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"SwitchingConfig\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.dynamic_switching_manager\n\n## Overview\n\nDynamic Switching Manager - Main orchestrator for dynamic switching between hybrid and pure p-adic compression\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/dynamic_switching_manager.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- gac_system.enhanced_bounder\n- switching_performance_monitor\n- logging\n- gac_system.direction_state\n- hybrid_padic_compressor\n- enum\n- typing\n- uuid\n- torch\n- asyncio\n- performance_optimizer\n- switching_decision_engine\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 768\n- **Code Lines:** 561\n- **Comment Lines:** 65\n\n## Complexity Indicators\n\n- High class count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.dynamic_switching_manager\n\nDynamic Switching Manager - Main orchestrator for dynamic switching between hybrid and pure p-adic compression\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/dynamic_switching_manager.py\n- **Total Classes:** 6\n- **Total Functions:** 0\n- **Dependencies:** hybrid_padic_structures, gac_system.enhanced_bounder, switching_performance_monitor, logging, gac_system.direction_state, hybrid_padic_compressor, enum, typing, uuid, torch, asyncio, performance_optimizer, switching_decision_engine, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (6):** CompressionMode, SwitchingTrigger, SwitchingEvent, SwitchingConfig, SwitchingAnalytics, DynamicSwitchingManager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: DynamicSwitchingManager\n\n## Examples\nusage_ratio = allocated / total\n\nreturn usage_ratio > self.config.gpu_memory_pressure_threshold\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.dynamic_switching_manager\n\nDynamic Switching Manager - Main orchestrator for dynamic switching between hybrid and pure p-adic compression\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 18\n\n## Class Hierarchy\n\n- **CompressionMode** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **SwitchingTrigger** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **SwitchingEvent**\n  - Methods: 1\n  - Complexity: 23\n- **SwitchingConfig**\n  - Methods: 1\n  - Complexity: 32\n- **SwitchingAnalytics**\n  - Methods: 1\n  - Complexity: 15\n- **DynamicSwitchingManager**\n  - Methods: 17\n  - Complexity: 110\n## Integration Points\n\n- Class: DynamicSwitchingManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.padic_gradient",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_gradient.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.padic_gradient\n\nAPI endpoints for independent_core.compression_systems.padic.padic_gradient\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/gradient/stats\n\n#### GET /get/gradient/stats\n\nGet gradient compression statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/gradient/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/gradient/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/memory/usage\n\n#### GET /get/memory/usage\n\nGet memory usage from underlying p-adic system\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/memory/usage\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/memory/usage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.padic_gradient\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.padic_gradient\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/gradient/stats\": {\n      \"get\": {\n        \"summary\": \"Get gradient compression statistics\",\n        \"description\": \"Get gradient compression statistics\",\n        \"operationId\": \"get_gradient_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/memory/usage\": {\n      \"get\": {\n        \"summary\": \"Get memory usage from underlying p-adic system\",\n        \"description\": \"Get memory usage from underlying p-adic system\",\n        \"operationId\": \"get_memory_usage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.padic_gradient\n\n## Overview\n\nP-adic gradient compression integration with GAC system.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_gradient.py`\n\n## Dependencies\n\n- numpy\n- padic_compressor\n- typing\n- torch\n- padic_encoder\n- time\n\n## Code Structure\n\n- **Total Lines:** 323\n- **Code Lines:** 218\n- **Comment Lines:** 41\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_performance_tuner",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_tuner.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_performance_tuner\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_performance_tuner\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/overall/score\n\n#### GET /get/overall/score\n\nCalculate overall performance score\n\n**Parameters:**\n\n- **metric_weights** (query) *required*: string - Parameter: metric_weights\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/overall/score?metric_weights=example_metric_weights\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/overall/score\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"metric_weights\": \"example_metric_weights\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/tuning/recommendations\n\n#### GET /get/tuning/recommendations\n\nGet tuning recommendations based on current performance.\n\nReturns:\n    List of tuning recommendations\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/tuning/recommendations\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/tuning/recommendations\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_performance_tuner\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_performance_tuner\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/overall/score\": {\n      \"get\": {\n        \"summary\": \"Calculate overall performance score\",\n        \"description\": \"Calculate overall performance score\",\n        \"operationId\": \"get_overall_score\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"metric_weights\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: metric_weights\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/tuning/recommendations\": {\n      \"get\": {\n        \"summary\": \"Get tuning recommendations based on current performance.\\n\\nReturns:\\n    List of tuning recommendations\",\n        \"description\": \"Get tuning recommendations based on current performance.\\n\\nReturns:\\n    List of tuning recommendations\",\n        \"operationId\": \"get_tuning_recommendations\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_performance_tuner\n\n## Overview\n\nHybrid Performance Tuner - Automatic tuning of hybrid system performance\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_tuner.py`\n\n## Dependencies\n\n- random\n- hybrid_padic_structures\n- dynamic_switching_manager\n- hybrid_performance_monitor\n- logging\n- math\n- hybrid_padic_compressor\n- enum\n- typing\n- hybrid_performance_analyzer\n- uuid\n- torch\n- asyncio\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1114\n- **Code Lines:** 816\n- **Comment Lines:** 81\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.compression_systems.padic.hybrid_performance_tuner\n\nHybrid Performance Tuner - Automatic tuning of hybrid system performance\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_performance_tuner.py\n- **Total Classes:** 8\n- **Total Functions:** 0\n- **Dependencies:** random, hybrid_padic_structures, dynamic_switching_manager, hybrid_performance_monitor, logging, math, hybrid_padic_compressor, enum, typing, hybrid_performance_analyzer, uuid, torch, asyncio, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (8):** TuningStrategy, TuningPhase, OptimizationMetric, TuningParameter, TuningExperiment, TuningResult, HybridTuningConfig, HybridPerformanceTuner\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nGPU_MEMORY_USAGE = \"gpu_memory_usage\"\n\nCPU_USAGE = \"cpu_usage\"\n\nif metric in ['execution_time_ms', 'gpu_memory_usage', 'cpu_usage', 'switching_overhead']:\n# Lower is better for these metrics\n\nmax_cpu_usage_percent: float = 90.0\n\n# Get current GPU memory usage\n\nrecommendations.append(\"Consider optimizing GPU memory usage - current usage is high\")\n\n\n'cpu_usage': current_metrics.get('resource_metrics', {}).get('average_cpu_usage', 50.0),\n\n'cpu_usage': 50.0,\n\nelif self.config.optimization_metric == OptimizationMetric.GPU_MEMORY_USAGE:\n\n'cpu_usage': 0.1,\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_performance_tuner\n\nHybrid Performance Tuner - Automatic tuning of hybrid system performance\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 18\n\n## Class Hierarchy\n\n- **TuningStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **TuningPhase** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **OptimizationMetric** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **TuningParameter**\n  - Methods: 2\n  - Complexity: 24\n- **TuningExperiment**\n  - Methods: 2\n  - Complexity: 22\n- **TuningResult**\n  - Methods: 1\n  - Complexity: 18\n- **HybridTuningConfig**\n  - Methods: 1\n  - Complexity: 25\n- **HybridPerformanceTuner**\n  - Methods: 34\n  - Complexity: 197\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.switching_performance_monitor",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/switching_performance_monitor.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.switching_performance_monitor\n\nAPI endpoints for independent_core.compression_systems.padic.switching_performance_monitor\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/performance/trends\n\n#### GET /get/performance/trends\n\nGet performance trends analysis.\n\nReturns:\n    Dictionary containing performance trends\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/trends\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/trends\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/configuration\n\n#### PUT /update/configuration\n\nUpdate performance monitor configuration\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/configuration?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.switching_performance_monitor\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.switching_performance_monitor\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/performance/trends\": {\n      \"get\": {\n        \"summary\": \"Get performance trends analysis.\\n\\nReturns:\\n    Dictionary containing performance trends\",\n        \"description\": \"Get performance trends analysis.\\n\\nReturns:\\n    Dictionary containing performance trends\",\n        \"operationId\": \"get_performance_trends\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/configuration\": {\n      \"put\": {\n        \"summary\": \"Update performance monitor configuration\",\n        \"description\": \"Update performance monitor configuration\",\n        \"operationId\": \"update_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.switching_performance_monitor\n\n## Overview\n\nSwitching Performance Monitor - Performance monitoring and analytics for switching decisions\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/switching_performance_monitor.py`\n\n## Dependencies\n\n- numpy\n- logging\n- statistics\n- enum\n- typing\n- torch\n- asyncio\n- performance_optimizer\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 899\n- **Code Lines:** 661\n- **Comment Lines:** 69\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.compression_systems.padic.switching_performance_monitor\n\nSwitching Performance Monitor - Performance monitoring and analytics for switching decisions\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/switching_performance_monitor.py\n- **Total Classes:** 6\n- **Total Functions:** 0\n- **Dependencies:** numpy, logging, statistics, enum, typing, torch, asyncio, performance_optimizer, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (6):** PerformanceRegression, PerformanceTrend, SwitchingPerformanceRecord, PerformanceAlert, PerformanceOptimizationSuggestion, SwitchingPerformanceMonitor\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\n'memory_usage_mb': 50.0,\n\n'memory_usage_mb': 48.0 + np.random.normal(0, 2),\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.switching_performance_monitor\n\nSwitching Performance Monitor - Performance monitoring and analytics for switching decisions\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **PerformanceRegression** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **PerformanceTrend** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **SwitchingPerformanceRecord**\n  - Methods: 1\n  - Complexity: 21\n- **PerformanceAlert**\n  - Methods: 1\n  - Complexity: 18\n- **PerformanceOptimizationSuggestion**\n  - Methods: 1\n  - Complexity: 19\n- **SwitchingPerformanceMonitor**\n  - Methods: 35\n  - Complexity: 187\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.integration_example_padic_system",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/integration_example_padic_system.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.integration_example_padic_system",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.integration_example_padic_system\n\n## Overview\n\nP-Adic Integration System Example\nDemonstrates comprehensive integration with GAC, Brain Core, and training systems\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/integration_example_padic_system.py`\n\n## Dependencies\n\n- brain_core\n- numpy\n- typing\n- torch\n- asyncio\n- torch.nn\n- padic_integration\n- gac_system.gac_components\n- time\n\n## Code Structure\n\n- **Total Lines:** 544\n- **Code Lines:** 334\n- **Comment Lines:** 56\n\n## Complexity Indicators\n\n- Async programming\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.integration_example_padic_system\n\nP-Adic Integration System Example\nDemonstrates comprehensive integration with GAC, Brain Core, and training systems\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/integration_example_padic_system.py\n- **Total Classes:** 2\n- **Total Functions:** 7\n- **Dependencies:** brain_core, numpy, typing, torch, asyncio, torch.nn, padic_integration, gac_system.gac_components, time\n\n## Contents\n**Classes (2):** MockGradientCompressionComponent, MockBrainCore\n**Functions (7):** demonstrate_padic_gac_integration, demonstrate_padic_brain_integration, demonstrate_padic_training_integration, demonstrate_orchestrator_services, demonstrate_error_handling, demonstrate_performance_monitoring, run_complete_integration_demo\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: demonstrate_orchestrator_services\n\n## Examples\nP-Adic Integration System Example\n\nDemonstrates comprehensive integration with GAC, Brain Core, and training systems\n\"\"\"\n\n\ndef demonstrate_padic_gac_integration():\n\n\"\"\"Demonstrate P-Adic integration with GAC components\"\"\"\n\n\nprint(\"=== P-Adic GAC Integration Demonstration ===\")\n\n# Initialize P-Adic integration system\n\ndef demonstrate_padic_brain_integration():\n\n\"\"\"Demonstrate P-Adic integration with Brain Core\"\"\"\n\n\nprint(f\"\\n=== P-Adic Brain Core Integration Demonstration ===\")\n\n\ndef demonstrate_padic_training_integration():\n\n\"\"\"Demonstrate P-Adic integration with training systems\"\"\"\n\n\nprint(f\"\\n=== P-Adic Training Integration Demonstration ===\")\n\n\ndef demonstrate_orchestrator_services():\n\n\"\"\"Demonstrate orchestrator service interfaces\"\"\"\n\n\nprint(f\"\\n=== Orchestrator Services Demonstration ===\")\n\n\nprint(f\"✗ Services demonstration failed: {e}\")\n\n\n\ndef demonstrate_error_handling():\n\n\"\"\"Demonstrate hard failure error handling\"\"\"\n\n\nprint(f\"\\n=== Error Handling Demonstration ===\")\n\n\ndef demonstrate_performance_monitoring():\n\n\"\"\"Demonstrate performance monitoring capabilities\"\"\"\n\n\nprint(f\"\\n=== Performance Monitoring Demonstration ===\")\n\n\ndef run_complete_integration_demo():\n\n\"\"\"Run complete P-Adic integration demonstration\"\"\"\n\n\nprint(\"P-Adic Integration System - Complete Demonstration\")\n\n# Individual component demonstrations\n\ndemonstrate_padic_gac_integration()\n\ndemonstrate_padic_brain_integration()\n\ndemonstrate_padic_training_integration()\n\n\n# Service interface demonstrations\n\ndemonstrate_orchestrator_services()\n\n\n# Error handling demonstration\n\ndemonstrate_error_handling()\n\n# Performance monitoring\n\ndemonstrate_performance_monitoring()\n\n\nprint(\"✓ All P-Adic integration demonstrations completed successfully!\")\n\n\nprint(f\"✗ Integration demonstration failed: {e}\")\n\n\nrun_complete_integration_demo()\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.test_hybrid_compressor",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_compressor.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.padic.test_hybrid_compressor",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.test_hybrid_compressor\n\n## Overview\n\nCompatibility tests for hybrid p-adic compressor\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_compressor.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- pytest\n- padic_compressor\n- hybrid_padic_compressor\n- typing\n- torch\n- time\n\n## Code Structure\n\n- **Total Lines:** 472\n- **Code Lines:** 289\n- **Comment Lines:** 76\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.test_hybrid_compressor\n\nCompatibility tests for hybrid p-adic compressor\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 2\n- **Functions:** 2\n- **Dependencies:** 7\n\n## Class Hierarchy\n\n- **TestHybridPadicCompressor**\n  - Methods: 12\n  - Complexity: 45\n- **TestHybridPadicPerformance**\n  - Methods: 3\n  - Complexity: 11\n## Integration Points\n\n- Function: test_integration_manager_basic\n- Function: test_integration_manager\n- Function: test_integration_manager_error_handling\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.test_hybrid_advanced_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_advanced_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.test_hybrid_advanced_integration\n\nAPI endpoints for independent_core.compression_systems.padic.test_hybrid_advanced_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /update/metrics/worker\n\n#### PUT /update/metrics/worker\n\nAPI endpoint: update_metrics_worker\n\n**Parameters:**\n\n- **feature_type** (query) *required*: string - Parameter: feature_type\n- **operation_count** (query) *required*: integer - Parameter: operation_count\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/metrics/worker?feature_type=example_feature_type&operation_count=example_operation_count\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/metrics/worker\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"feature_type\": \"example_feature_type\",\n    \"operation_count\": \"example_operation_count\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.test_hybrid_advanced_integration\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.test_hybrid_advanced_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/metrics/worker\": {\n      \"put\": {\n        \"summary\": \"API endpoint: update_metrics_worker\",\n        \"description\": \"API endpoint: update_metrics_worker\",\n        \"operationId\": \"update_metrics_worker\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"feature_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: feature_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"operation_count\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: operation_count\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.test_hybrid_advanced_integration\n\n## Overview\n\nComprehensive Tests for Hybrid Advanced Features Integration\nTests for HybridAdvancedIntegration, HybridHenselLifting, HybridHierarchicalClustering, and HybridOptimizationManager\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_advanced_integration.py`\n\n## Dependencies\n\n- hybrid_advanced_integration\n- hybrid_hensel_lifting\n- hybrid_padic_structures\n- hybrid_clustering\n- numpy\n- padic_advanced\n- logging\n- typing\n- torch\n- performance_optimizer\n- unittest\n- threading\n- datetime\n- hybrid_optimization\n- unittest.mock\n- time\n\n## Code Structure\n\n- **Total Lines:** 895\n- **Code Lines:** 651\n- **Comment Lines:** 68\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.test_hybrid_advanced_integration\n\nComprehensive Tests for Hybrid Advanced Features Integration\nTests for HybridAdvancedIntegration, HybridHenselLifting, HybridHierarchicalClustering, and HybridOptimizationManager\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_advanced_integration.py\n- **Total Classes:** 7\n- **Total Functions:** 2\n- **Dependencies:** hybrid_advanced_integration, hybrid_hensel_lifting, hybrid_padic_structures, hybrid_clustering, numpy, padic_advanced, logging, typing, torch, performance_optimizer, unittest, threading, datetime, hybrid_optimization, unittest.mock, time\n\n## Contents\n**Classes (7):** TestAdvancedIntegrationConfig, TestHybridAdvancedIntegration, TestHybridHenselLifting, TestHybridHierarchicalClustering, TestHybridOptimizationManager, TestCompleteIntegration, TestErrorHandling\n**Functions (2):** run_hybrid_advanced_integration_tests, update_metrics_worker\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: TestHybridOptimizationManager\nFunction: test_optimization_manager_initialization\n\n## Examples\nNo examples available\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.test_hybrid_advanced_integration\n\nComprehensive Tests for Hybrid Advanced Features Integration\nTests for HybridAdvancedIntegration, HybridHenselLifting, HybridHierarchicalClustering, and HybridOptimizationManager\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 2\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **TestAdvancedIntegrationConfig**\n  - Methods: 3\n  - Complexity: 10\n- **TestHybridAdvancedIntegration**\n  - Methods: 8\n  - Complexity: 26\n- **TestHybridHenselLifting**\n  - Methods: 9\n  - Complexity: 30\n- **TestHybridHierarchicalClustering**\n  - Methods: 8\n  - Complexity: 29\n- **TestHybridOptimizationManager**\n  - Methods: 11\n  - Complexity: 36\n- **TestCompleteIntegration**\n  - Methods: 6\n  - Complexity: 27\n- **TestErrorHandling**\n  - Methods: 3\n  - Complexity: 10\n## Integration Points\n\n- Class: TestHybridOptimizationManager\n- Function: test_optimization_manager_initialization\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.test_dynamic_switching",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_dynamic_switching.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.test_dynamic_switching\n\nAPI endpoints for independent_core.compression_systems.padic.test_dynamic_switching\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /test/analyze/switching/criteria\n\n#### POST /test/analyze/switching/criteria\n\nTest switching criteria analysis\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/analyze/switching/criteria\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/analyze/switching/criteria\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.test_dynamic_switching\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.test_dynamic_switching\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/test/analyze/switching/criteria\": {\n      \"post\": {\n        \"summary\": \"Test switching criteria analysis\",\n        \"description\": \"Test switching criteria analysis\",\n        \"operationId\": \"test_analyze_switching_criteria\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.test_dynamic_switching\n\n## Overview\n\nComprehensive Tests for Dynamic Switching System\nTests for DynamicSwitchingManager, SwitchingDecisionEngine, and SwitchingPerformanceMonitor\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_dynamic_switching.py`\n\n## Dependencies\n\n- gac_system.enhanced_bounder\n- dynamic_switching_manager\n- switching_performance_monitor\n- numpy\n- hybrid_padic_compressor\n- gac_system.direction_state\n- logging\n- typing\n- torch\n- performance_optimizer\n- switching_decision_engine\n- unittest\n- threading\n- datetime\n- unittest.mock\n- time\n\n## Code Structure\n\n- **Total Lines:** 773\n- **Code Lines:** 550\n- **Comment Lines:** 72\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.test_dynamic_switching\n\nComprehensive Tests for Dynamic Switching System\nTests for DynamicSwitchingManager, SwitchingDecisionEngine, and SwitchingPerformanceMonitor\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 9\n- **Functions:** 2\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **TestSwitchingConfig**\n  - Methods: 3\n  - Complexity: 10\n- **TestSwitchingEvent**\n  - Methods: 2\n  - Complexity: 7\n- **TestDecisionWeights**\n  - Methods: 3\n  - Complexity: 10\n- **TestSwitchingDecisionEngine**\n  - Methods: 6\n  - Complexity: 19\n- **TestSwitchingPerformanceMonitor**\n  - Methods: 6\n  - Complexity: 24\n- **TestDynamicSwitchingManager**\n  - Methods: 9\n  - Complexity: 31\n- **TestIntegrationWithHybridCompression**\n  - Methods: 3\n  - Complexity: 12\n- **TestConcurrentSwitching**\n  - Methods: 3\n  - Complexity: 17\n- **TestPerformanceAndStress**\n  - Methods: 4\n  - Complexity: 16\n## Integration Points\n\n- Class: TestDynamicSwitchingManager\n- Function: test_manager_initialization\n- Function: test_switching_manager_integration\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_hensel_lifting",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_hensel_lifting.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_hensel_lifting\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_hensel_lifting\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/hybrid/lifting/stats\n\n#### GET /get/hybrid/lifting/stats\n\nGet comprehensive lifting statistics.\n\nReturns:\n    Dictionary containing lifting statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hybrid/lifting/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hybrid/lifting/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/operation\n\n#### PUT /update/operation\n\nUpdate statistics with operation result\n\n**Parameters:**\n\n- **result** (query) *required*: HybridLiftingResult - Parameter: result\n- **target_precision** (query) *required*: int - Parameter: target_precision\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/operation?result=example_result&target_precision=example_target_precision\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/operation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"result\": \"example_result\",\n    \"target_precision\": \"example_target_precision\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_hensel_lifting\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_hensel_lifting\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/operation\": {\n      \"put\": {\n        \"summary\": \"Update statistics with operation result\",\n        \"description\": \"Update statistics with operation result\",\n        \"operationId\": \"update_operation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"result\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: result\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"HybridLiftingResult\"\n            }\n          },\n          {\n            \"name\": \"target_precision\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target_precision\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/hybrid/lifting/stats\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive lifting statistics.\\n\\nReturns:\\n    Dictionary containing lifting statistics\",\n        \"description\": \"Get comprehensive lifting statistics.\\n\\nReturns:\\n    Dictionary containing lifting statistics\",\n        \"operationId\": \"get_hybrid_lifting_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"overall_stats\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"successful_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"failed_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"success_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_lifting_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_iterations\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"precision_stats\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"base_precision\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"current_precision\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"precision_improvements\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"max_precision_achieved\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"performance_stats\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"gpu_memory_usage_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"cache_hit_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"cache_size\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"operations_history_length\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"prime\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"max_iterations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"convergence_tolerance\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"damping_factor\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"adaptive_damping\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"last_update\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_hensel_lifting\n\n## Overview\n\nHybrid Hensel Lifting - Hybrid-compatible Hensel lifting operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_hensel_lifting.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- numpy\n- padic_advanced\n- logging\n- math\n- typing\n- torch\n- padic_encoder\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 612\n- **Code Lines:** 433\n- **Comment Lines:** 61\n\n## Complexity Indicators\n\n- Decorators used\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_padic_compressor",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_padic_compressor.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_padic_compressor\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_padic_compressor\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/integration/stats\n\n#### GET /get/integration/stats\n\nGet integration statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/memory/usage\n\n#### GET /get/memory/usage\n\nGet memory usage information\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/memory/usage\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/memory/usage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/comparison\n\n#### GET /get/performance/comparison\n\nGet performance comparison between systems\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/comparison\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/comparison\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/stats\n\n#### GET /get/performance/stats\n\nGet performance statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_padic_compressor\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_padic_compressor\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/memory/usage\": {\n      \"get\": {\n        \"summary\": \"Get memory usage information\",\n        \"description\": \"Get memory usage information\",\n        \"operationId\": \"get_memory_usage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/stats\": {\n      \"get\": {\n        \"summary\": \"Get performance statistics\",\n        \"description\": \"Get performance statistics\",\n        \"operationId\": \"get_performance_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/integration/stats\": {\n      \"get\": {\n        \"summary\": \"Get integration statistics\",\n        \"description\": \"Get integration statistics\",\n        \"operationId\": \"get_integration_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/comparison\": {\n      \"get\": {\n        \"summary\": \"Get performance comparison between systems\",\n        \"description\": \"Get performance comparison between systems\",\n        \"operationId\": \"get_performance_comparison\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"integration_stats\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"hybrid_system_stats\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"pure_system_stats\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"hybrid_advantage\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_padic_compressor\n\n## Overview\n\nHybrid P-adic Compression System - GPU-accelerated two-channel compression\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_padic_compressor.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- dynamic_switching_manager\n- gpu_memory.gpu_memory_core\n- numpy\n- padic_compressor\n- logging\n- typing\n- torch\n- gc\n- padic_encoder\n- base.compression_base\n- time\n\n## Code Structure\n\n- **Total Lines:** 782\n- **Code Lines:** 559\n- **Comment Lines:** 82\n\n## Complexity Indicators\n\n- High function count\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_padic_compressor\n\nHybrid P-adic Compression System - GPU-accelerated two-channel compression\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 2\n- **Functions:** 0\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **HybridPadicCompressionSystem** (inherits from CompressionAlgorithm)\n  - Methods: 21\n  - Complexity: 151\n- **HybridPadicIntegrationManager**\n  - Methods: 9\n  - Complexity: 42\n## Integration Points\n\n- Class: HybridPadicIntegrationManager\n- Function: set_dynamic_switching_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_padic_gpu_ops",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_padic_gpu_ops.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_padic_gpu_ops\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_padic_gpu_ops\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/optimizer\n\n#### POST /create/optimizer\n\nCreate a new GPU optimizer\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n- **learning_rate** (query) *required*: float - Parameter: learning_rate\n- **momentum** (query) *required*: float - Parameter: momentum\n- **weight_decay** (query) *required*: float - Parameter: weight_decay\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/optimizer?name=example_name&learning_rate=example_learning_rate&momentum=example_momentum&weight_decay=example_weight_decay\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n    \"learning_rate\": \"example_learning_rate\",\n    \"momentum\": \"example_momentum\",\n    \"weight_decay\": \"example_weight_decay\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/comprehensive/stats\n\n#### GET /get/comprehensive/stats\n\nGet comprehensive statistics from all components\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/comprehensive/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/comprehensive/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/operation/stats\n\n#### GET /get/operation/stats\n\nGet operation statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/operation/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/operation/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/optimization/stats\n\n#### GET /get/optimization/stats\n\nGet optimization statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimization/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimization/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/optimizer\n\n#### GET /get/optimizer\n\nGet existing optimizer by name\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimizer?name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimizer\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_padic_gpu_ops\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_padic_gpu_ops\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/operation/stats\": {\n      \"get\": {\n        \"summary\": \"Get operation statistics\",\n        \"description\": \"Get operation statistics\",\n        \"operationId\": \"get_operation_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/optimization/stats\": {\n      \"get\": {\n        \"summary\": \"Get optimization statistics\",\n        \"description\": \"Get optimization statistics\",\n        \"operationId\": \"get_optimization_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/optimizer\": {\n      \"post\": {\n        \"summary\": \"Create a new GPU optimizer\",\n        \"description\": \"Create a new GPU optimizer\",\n        \"operationId\": \"create_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"learning_rate\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: learning_rate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"momentum\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: momentum\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"weight_decay\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: weight_decay\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/optimizer\": {\n      \"get\": {\n        \"summary\": \"Get existing optimizer by name\",\n        \"description\": \"Get existing optimizer by name\",\n        \"operationId\": \"get_optimizer\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/comprehensive/stats\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive statistics from all components\",\n        \"description\": \"Get comprehensive statistics from all components\",\n        \"operationId\": \"get_comprehensive_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_padic_gpu_ops\n\n## Overview\n\nGPU-accelerated hybrid p-adic operations using CUDA kernels\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_padic_gpu_ops.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- gpu_memory.gpu_memory_core\n- numpy\n- math\n- typing\n- torch\n- gc\n- torch.nn\n- torch.optim\n- padic_encoder\n- dataclasses\n- time\n\n## Code Structure\n\n- **Total Lines:** 962\n- **Code Lines:** 683\n- **Comment Lines:** 95\n\n## Complexity Indicators\n\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_padic_gpu_ops\n\nGPU-accelerated hybrid p-adic operations using CUDA kernels\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 0\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **GPUOperationConfig**\n  - Methods: 1\n  - Complexity: 17\n- **HybridPadicGPUOps**\n  - Methods: 23\n  - Complexity: 125\n- **HybridPadicGPUOptimizer**\n  - Methods: 7\n  - Complexity: 43\n- **HybridPadicGPUManager**\n  - Methods: 9\n  - Complexity: 47\n## Integration Points\n\n- Class: HybridPadicGPUManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.switching_decision_engine",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/switching_decision_engine.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.switching_decision_engine\n\nAPI endpoints for independent_core.compression_systems.padic.switching_decision_engine\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/optimal/switching/threshold\n\n#### GET /get/optimal/switching/threshold\n\nGet optimal switching thresholds based on historical performance.\n\nReturns:\n    Tuple of (hybrid_threshold, pure_threshold)\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/optimal/switching/threshold\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/optimal/switching/threshold\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/configuration\n\n#### PUT /update/configuration\n\nUpdate decision engine configuration\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/configuration?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/configuration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/decision/weights\n\n#### PUT /update/decision/weights\n\nUpdate decision weights based on performance data.\n\nArgs:\n    performance_data: Performance data for weight adjustment\n\n**Parameters:**\n\n- **performance_data** (query) *required*: string - Performance data for weight adjustment\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/decision/weights?performance_data=example_performance_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/decision/weights\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"performance_data\": \"example_performance_data\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.switching_decision_engine\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.switching_decision_engine\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/optimal/switching/threshold\": {\n      \"get\": {\n        \"summary\": \"Get optimal switching thresholds based on historical performance.\\n\\nReturns:\\n    Tuple of (hybrid_threshold, pure_threshold)\",\n        \"description\": \"Get optimal switching thresholds based on historical performance.\\n\\nReturns:\\n    Tuple of (hybrid_threshold, pure_threshold)\",\n        \"operationId\": \"get_optimal_switching_threshold\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/decision/weights\": {\n      \"put\": {\n        \"summary\": \"Update decision weights based on performance data.\\n\\nArgs:\\n    performance_data: Performance data for weight adjustment\",\n        \"description\": \"Update decision weights based on performance data.\\n\\nArgs:\\n    performance_data: Performance data for weight adjustment\",\n        \"operationId\": \"update_decision_weights\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"performance_data\",\n            \"in\": \"query\",\n            \"description\": \"Performance data for weight adjustment\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/configuration\": {\n      \"put\": {\n        \"summary\": \"Update decision engine configuration\",\n        \"description\": \"Update decision engine configuration\",\n        \"operationId\": \"update_configuration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.switching_decision_engine\n\n## Overview\n\nSwitching Decision Engine - Intelligent decision engine for determining when to switch compression modes\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/switching_decision_engine.py`\n\n## Dependencies\n\n- gac_system.enhanced_bounder\n- numpy\n- logging\n- math\n- gac_system.direction_state\n- enum\n- typing\n- torch\n- performance_optimizer\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 877\n- **Code Lines:** 670\n- **Comment Lines:** 60\n\n## Complexity Indicators\n\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.switching_decision_engine\n\nSwitching Decision Engine - Intelligent decision engine for determining when to switch compression modes\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 0\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **DecisionCriterion** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **DecisionWeights**\n  - Methods: 1\n  - Complexity: 15\n- **DecisionAnalysis**\n  - Methods: 1\n  - Complexity: 13\n- **PerformancePrediction**\n  - Methods: 1\n  - Complexity: 15\n- **SwitchingDecisionEngine**\n  - Methods: 24\n  - Complexity: 135\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.padic_service_layer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_service_layer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.padic_service_layer\n\nAPI endpoints for independent_core.compression_systems.padic.padic_service_layer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nInitialize P-Adic service interface.\n\nArgs:\n    padic_system: P-Adic compression system instance\n    config: Service configuration\n\n**Parameters:**\n\n- **padic_system** (query) *required*: PadicCompressionSystem - P-Adic compression system instance\n- **config** (query) *required*: string - Service configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?padic_system=example_padic_system&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"padic_system\": \"example_padic_system\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nInitialize P-Adic service manager.\n\nArgs:\n    service_registry: Service registry instance\n    config: Service configuration\n\n**Parameters:**\n\n- **service_registry** (query) *required*: ServiceRegistry - Service registry instance\n- **config** (query) *required*: string - Service configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?service_registry=example_service_registry&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_registry\": \"example_service_registry\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nInitialize P-Adic service validation.\n\nArgs:\n    config: Optional configuration dictionary\n\n**Parameters:**\n\n- **config** (query) *required*: string - Optional configuration dictionary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //attempt/recovery\n\n#### POST //attempt/recovery\n\nAttempt to recover unhealthy service.\n\n**Parameters:**\n\n- **service_id** (query) *required*: str - Parameter: service_id\n- **service_data** (query) *required*: string - Parameter: service_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//attempt/recovery?service_id=example_service_id&service_data=example_service_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//attempt/recovery\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_id\": \"example_service_id\",\n    \"service_data\": \"example_service_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //cache/result\n\n#### POST //cache/result\n\nCache compression result.\n\n**Parameters:**\n\n- **cache_key** (query) *required*: str - Parameter: cache_key\n- **result** (query) *required*: string - Parameter: result\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//cache/result?cache_key=example_cache_key&result=example_result\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//cache/result\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"cache_key\": \"example_cache_key\",\n    \"result\": \"example_result\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //check/service/health\n\n#### POST //check/service/health\n\nCheck health of a service.\n\n**Parameters:**\n\n- **service_id** (query) *required*: str - Parameter: service_id\n- **service_data** (query) *required*: string - Parameter: service_data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//check/service/health?service_id=example_service_id&service_data=example_service_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//check/service/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_id\": \"example_service_id\",\n    \"service_data\": \"example_service_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/cache/key\n\n#### POST //generate/cache/key\n\nGenerate cache key for request.\n\n**Parameters:**\n\n- **data** (body) *required*: Tensor - Parameter: data\n- **params** (query) *required*: string - Parameter: params\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000//generate/cache/key?params=example_params\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/cache/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nparams = {\n    \"params\": \"example_params\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/validation/cache/key\n\n#### POST //generate/validation/cache/key\n\nGenerate cache key for validation result.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/validation/cache/key?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/validation/cache/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //get/cached/result\n\n#### POST //get/cached/result\n\nGet cached result if available.\n\n**Parameters:**\n\n- **cache_key** (query) *required*: str - Parameter: cache_key\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/cached/result?cache_key=example_cache_key\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/cached/result\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"cache_key\": \"example_cache_key\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/analyze\n\n#### POST //handle/analyze\n\nHandle analysis request for P-Adic compression.\n\nArgs:\n    request: Service request containing analysis parameters\n    \nReturns:\n    Service response with analysis results\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request containing analysis parameters\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/analyze?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/analyze\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/batch/compress\n\n#### POST //handle/batch/compress\n\nHandle batch compression request.\n\nArgs:\n    request: Service request containing batch data\n    \nReturns:\n    Service response with batch compression results\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request containing batch data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/batch/compress?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/batch/compress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/batch/decompress\n\n#### POST //handle/batch/decompress\n\nHandle batch decompression request.\n\nArgs:\n    request: Service request containing batch compressed data\n    \nReturns:\n    Service response with batch decompression results\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request containing batch compressed data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/batch/decompress?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/batch/decompress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/compress\n\n#### POST //handle/compress\n\nHandle compression request.\n\nArgs:\n    request: Service request containing compression parameters\n    \nReturns:\n    Service response with compressed data\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request containing compression parameters\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/compress?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/compress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/configure\n\n#### POST //handle/configure\n\nHandle configuration update request.\n\nArgs:\n    request: Service request with configuration updates\n    \nReturns:\n    Service response with configuration status\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request with configuration updates\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/configure?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/configure\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/decompress\n\n#### POST //handle/decompress\n\nHandle decompression request.\n\nArgs:\n    request: Service request containing compressed data\n    \nReturns:\n    Service response with decompressed data\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request containing compressed data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/decompress?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/decompress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/get/metrics\n\n#### POST //handle/get/metrics\n\nHandle get metrics request.\n\nArgs:\n    request: Service request for metrics\n    \nReturns:\n    Service response with metrics data\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request for metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/get/metrics?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/get/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/health/check\n\n#### POST //handle/health/check\n\nHandle health check request.\n\nArgs:\n    request: Service request for health check\n    \nReturns:\n    Service response with health status\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request for health check\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/health/check?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/health/check\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/optimize\n\n#### POST //handle/optimize\n\nHandle optimization request for P-Adic compression.\n\nArgs:\n    request: Service request containing optimization parameters\n    \nReturns:\n    Service response with optimization results\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request containing optimization parameters\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/optimize?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/optimize\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/validate\n\n#### POST //handle/validate\n\nHandle validation request for P-Adic compression.\n\nArgs:\n    request: Service request containing validation parameters\n    \nReturns:\n    Service response with validation results\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request containing validation parameters\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/validate?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/validate\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //initialize/request/validators\n\n#### POST //initialize/request/validators\n\nInitialize request validators for each method.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/request/validators\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/request/validators\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //initialize/response/validators\n\n#### POST //initialize/response/validators\n\nInitialize response validators.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/response/validators\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/response/validators\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //validate/analyze/request\n\n#### POST //validate/analyze/request\n\nValidate analysis request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/analyze/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/analyze/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/batch/compress/request\n\n#### POST //validate/batch/compress/request\n\nValidate batch compression request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/batch/compress/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/batch/compress/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/batch/decompress/request\n\n#### POST //validate/batch/decompress/request\n\nValidate batch decompression request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/batch/decompress/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/batch/decompress/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/compress/request\n\n#### POST //validate/compress/request\n\nValidate compression request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/compress/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/compress/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/decompress/request\n\n#### POST //validate/decompress/request\n\nValidate decompression request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/decompress/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/decompress/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/optimize/request\n\n#### POST //validate/optimize/request\n\nValidate optimization request.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/optimize/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/optimize/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/parameters\n\n#### POST //validate/parameters\n\nValidate request parameters against rules.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/parameters?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/parameters\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/request/structure\n\n#### POST //validate/request/structure\n\nValidate basic request structure.\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/request/structure?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/request/structure\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/response/data\n\n#### POST //validate/response/data\n\nValidate response data.\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/response/data?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/response/data\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/response/structure\n\n#### POST //validate/response/structure\n\nValidate basic response structure.\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/response/structure?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/response/structure\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/metrics\n\n#### GET /get/metrics\n\nGet metrics for specified time range.\n\nArgs:\n    time_range: Time range for metrics\n    \nReturns:\n    Metrics dictionary\n\n**Parameters:**\n\n- **time_range** (query) *required*: str - Time range for metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/metrics?time_range=example_time_range\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"time_range\": \"example_time_range\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/performance/report\n\n#### GET /get/performance/report\n\nGet performance report for all services.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/report\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/report\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service\n\n#### GET /get/service\n\nGet service interface by ID.\n\nArgs:\n    service_id: Service identifier\n    \nReturns:\n    Service interface or None\n\n**Parameters:**\n\n- **service_id** (query) *required*: str - Service identifier\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service?service_id=example_service_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_id\": \"example_service_id\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/validation/metrics\n\n#### GET /get/validation/metrics\n\nGet validation metrics.\n\nReturns:\n    Validation metrics dictionary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/validation/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/validation/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /invoke/service\n\n#### POST /invoke/service\n\nInvoke a service with request.\n\nArgs:\n    service_id: Service identifier\n    request: Service request\n    \nReturns:\n    Service response\n\n**Parameters:**\n\n- **service_id** (query) *required*: str - Service identifier\n- **request** (query) *required*: ServiceRequest - Service request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/invoke/service?service_id=example_service_id&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/invoke/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_id\": \"example_service_id\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/request\n\n#### POST /validate/request\n\nValidate a P-Adic service request.\n\nArgs:\n    request: Service request to validate\n    \nReturns:\n    Tuple of (is_valid, error_messages)\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request to validate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/response\n\n#### POST /validate/response\n\nValidate a P-Adic service response.\n\nArgs:\n    response: Service response to validate\n    \nReturns:\n    Tuple of (is_valid, error_messages)\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Service response to validate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/response?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.padic_service_layer\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.padic_service_layer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"Initialize P-Adic service validation.\\n\\nArgs:\\n    config: Optional configuration dictionary\",\n        \"description\": \"Initialize P-Adic service validation.\\n\\nArgs:\\n    config: Optional configuration dictionary\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Optional configuration dictionary\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/compress\": {\n      \"post\": {\n        \"summary\": \"Handle compression request.\\n\\nArgs:\\n    request: Service request containing compression parameters\\n    \\nReturns:\\n    Service response with compressed data\",\n        \"description\": \"Handle compression request.\\n\\nArgs:\\n    request: Service request containing compression parameters\\n    \\nReturns:\\n    Service response with compressed data\",\n        \"operationId\": \"_handle_compress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request containing compression parameters\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/decompress\": {\n      \"post\": {\n        \"summary\": \"Handle decompression request.\\n\\nArgs:\\n    request: Service request containing compressed data\\n    \\nReturns:\\n    Service response with decompressed data\",\n        \"description\": \"Handle decompression request.\\n\\nArgs:\\n    request: Service request containing compressed data\\n    \\nReturns:\\n    Service response with decompressed data\",\n        \"operationId\": \"_handle_decompress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request containing compressed data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/optimize\": {\n      \"post\": {\n        \"summary\": \"Handle optimization request for P-Adic compression.\\n\\nArgs:\\n    request: Service request containing optimization parameters\\n    \\nReturns:\\n    Service response with optimization results\",\n        \"description\": \"Handle optimization request for P-Adic compression.\\n\\nArgs:\\n    request: Service request containing optimization parameters\\n    \\nReturns:\\n    Service response with optimization results\",\n        \"operationId\": \"_handle_optimize\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request containing optimization parameters\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/validate\": {\n      \"post\": {\n        \"summary\": \"Handle validation request for P-Adic compression.\\n\\nArgs:\\n    request: Service request containing validation parameters\\n    \\nReturns:\\n    Service response with validation results\",\n        \"description\": \"Handle validation request for P-Adic compression.\\n\\nArgs:\\n    request: Service request containing validation parameters\\n    \\nReturns:\\n    Service response with validation results\",\n        \"operationId\": \"_handle_validate\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request containing validation parameters\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/analyze\": {\n      \"post\": {\n        \"summary\": \"Handle analysis request for P-Adic compression.\\n\\nArgs:\\n    request: Service request containing analysis parameters\\n    \\nReturns:\\n    Service response with analysis results\",\n        \"description\": \"Handle analysis request for P-Adic compression.\\n\\nArgs:\\n    request: Service request containing analysis parameters\\n    \\nReturns:\\n    Service response with analysis results\",\n        \"operationId\": \"_handle_analyze\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request containing analysis parameters\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/batch/compress\": {\n      \"post\": {\n        \"summary\": \"Handle batch compression request.\\n\\nArgs:\\n    request: Service request containing batch data\\n    \\nReturns:\\n    Service response with batch compression results\",\n        \"description\": \"Handle batch compression request.\\n\\nArgs:\\n    request: Service request containing batch data\\n    \\nReturns:\\n    Service response with batch compression results\",\n        \"operationId\": \"_handle_batch_compress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request containing batch data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/batch/decompress\": {\n      \"post\": {\n        \"summary\": \"Handle batch decompression request.\\n\\nArgs:\\n    request: Service request containing batch compressed data\\n    \\nReturns:\\n    Service response with batch decompression results\",\n        \"description\": \"Handle batch decompression request.\\n\\nArgs:\\n    request: Service request containing batch compressed data\\n    \\nReturns:\\n    Service response with batch decompression results\",\n        \"operationId\": \"_handle_batch_decompress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request containing batch compressed data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/get/metrics\": {\n      \"post\": {\n        \"summary\": \"Handle get metrics request.\\n\\nArgs:\\n    request: Service request for metrics\\n    \\nReturns:\\n    Service response with metrics data\",\n        \"description\": \"Handle get metrics request.\\n\\nArgs:\\n    request: Service request for metrics\\n    \\nReturns:\\n    Service response with metrics data\",\n        \"operationId\": \"_handle_get_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request for metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/health/check\": {\n      \"post\": {\n        \"summary\": \"Handle health check request.\\n\\nArgs:\\n    request: Service request for health check\\n    \\nReturns:\\n    Service response with health status\",\n        \"description\": \"Handle health check request.\\n\\nArgs:\\n    request: Service request for health check\\n    \\nReturns:\\n    Service response with health status\",\n        \"operationId\": \"_handle_health_check\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request for health check\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/configure\": {\n      \"post\": {\n        \"summary\": \"Handle configuration update request.\\n\\nArgs:\\n    request: Service request with configuration updates\\n    \\nReturns:\\n    Service response with configuration status\",\n        \"description\": \"Handle configuration update request.\\n\\nArgs:\\n    request: Service request with configuration updates\\n    \\nReturns:\\n    Service response with configuration status\",\n        \"operationId\": \"_handle_configure\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request with configuration updates\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/cache/key\": {\n      \"post\": {\n        \"summary\": \"Generate cache key for request.\",\n        \"description\": \"Generate cache key for request.\",\n        \"operationId\": \"_generate_cache_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"params\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: params\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"data\": {\n                    \"type\": \"Tensor\",\n                    \"description\": \"Parameter: data\"\n                  }\n                },\n                \"required\": [\n                  \"data\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//get/cached/result\": {\n      \"post\": {\n        \"summary\": \"Get cached result if available.\",\n        \"description\": \"Get cached result if available.\",\n        \"operationId\": \"_get_cached_result\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"cache_key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: cache_key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//cache/result\": {\n      \"post\": {\n        \"summary\": \"Cache compression result.\",\n        \"description\": \"Cache compression result.\",\n        \"operationId\": \"_cache_result\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"cache_key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: cache_key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"result\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: result\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/service\": {\n      \"get\": {\n        \"summary\": \"Get service interface by ID.\\n\\nArgs:\\n    service_id: Service identifier\\n    \\nReturns:\\n    Service interface or None\",\n        \"description\": \"Get service interface by ID.\\n\\nArgs:\\n    service_id: Service identifier\\n    \\nReturns:\\n    Service interface or None\",\n        \"operationId\": \"get_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_id\",\n            \"in\": \"query\",\n            \"description\": \"Service identifier\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/invoke/service\": {\n      \"post\": {\n        \"summary\": \"Invoke a service with request.\\n\\nArgs:\\n    service_id: Service identifier\\n    request: Service request\\n    \\nReturns:\\n    Service response\",\n        \"description\": \"Invoke a service with request.\\n\\nArgs:\\n    service_id: Service identifier\\n    request: Service request\\n    \\nReturns:\\n    Service response\",\n        \"operationId\": \"invoke_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_id\",\n            \"in\": \"query\",\n            \"description\": \"Service identifier\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//check/service/health\": {\n      \"post\": {\n        \"summary\": \"Check health of a service.\",\n        \"description\": \"Check health of a service.\",\n        \"operationId\": \"_check_service_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"service_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//attempt/recovery\": {\n      \"post\": {\n        \"summary\": \"Attempt to recover unhealthy service.\",\n        \"description\": \"Attempt to recover unhealthy service.\",\n        \"operationId\": \"_attempt_recovery\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"service_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/performance/report\": {\n      \"get\": {\n        \"summary\": \"Get performance report for all services.\",\n        \"description\": \"Get performance report for all services.\",\n        \"operationId\": \"get_performance_report\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/request\": {\n      \"post\": {\n        \"summary\": \"Validate a P-Adic service request.\\n\\nArgs:\\n    request: Service request to validate\\n    \\nReturns:\\n    Tuple of (is_valid, error_messages)\",\n        \"description\": \"Validate a P-Adic service request.\\n\\nArgs:\\n    request: Service request to validate\\n    \\nReturns:\\n    Tuple of (is_valid, error_messages)\",\n        \"operationId\": \"validate_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request to validate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/response\": {\n      \"post\": {\n        \"summary\": \"Validate a P-Adic service response.\\n\\nArgs:\\n    response: Service response to validate\\n    \\nReturns:\\n    Tuple of (is_valid, error_messages)\",\n        \"description\": \"Validate a P-Adic service response.\\n\\nArgs:\\n    response: Service response to validate\\n    \\nReturns:\\n    Tuple of (is_valid, error_messages)\",\n        \"operationId\": \"validate_response\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Service response to validate\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/validation/metrics\": {\n      \"get\": {\n        \"summary\": \"Get validation metrics.\\n\\nReturns:\\n    Validation metrics dictionary\",\n        \"description\": \"Get validation metrics.\\n\\nReturns:\\n    Validation metrics dictionary\",\n        \"operationId\": \"get_validation_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/request/validators\": {\n      \"post\": {\n        \"summary\": \"Initialize request validators for each method.\",\n        \"description\": \"Initialize request validators for each method.\",\n        \"operationId\": \"_initialize_request_validators\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"compress\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"decompress\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"batch_compress\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"batch_decompress\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimize\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"analyze_compression\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//initialize/response/validators\": {\n      \"post\": {\n        \"summary\": \"Initialize response validators.\",\n        \"description\": \"Initialize response validators.\",\n        \"operationId\": \"_initialize_response_validators\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"compressed_data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"decompressed_data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"optimization_result\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//validate/request/structure\": {\n      \"post\": {\n        \"summary\": \"Validate basic request structure.\",\n        \"description\": \"Validate basic request structure.\",\n        \"operationId\": \"_validate_request_structure\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/compress/request\": {\n      \"post\": {\n        \"summary\": \"Validate compression request.\",\n        \"description\": \"Validate compression request.\",\n        \"operationId\": \"_validate_compress_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/decompress/request\": {\n      \"post\": {\n        \"summary\": \"Validate decompression request.\",\n        \"description\": \"Validate decompression request.\",\n        \"operationId\": \"_validate_decompress_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/batch/compress/request\": {\n      \"post\": {\n        \"summary\": \"Validate batch compression request.\",\n        \"description\": \"Validate batch compression request.\",\n        \"operationId\": \"_validate_batch_compress_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/batch/decompress/request\": {\n      \"post\": {\n        \"summary\": \"Validate batch decompression request.\",\n        \"description\": \"Validate batch decompression request.\",\n        \"operationId\": \"_validate_batch_decompress_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/optimize/request\": {\n      \"post\": {\n        \"summary\": \"Validate optimization request.\",\n        \"description\": \"Validate optimization request.\",\n        \"operationId\": \"_validate_optimize_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/analyze/request\": {\n      \"post\": {\n        \"summary\": \"Validate analysis request.\",\n        \"description\": \"Validate analysis request.\",\n        \"operationId\": \"_validate_analyze_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/response/structure\": {\n      \"post\": {\n        \"summary\": \"Validate basic response structure.\",\n        \"description\": \"Validate basic response structure.\",\n        \"operationId\": \"_validate_response_structure\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/response/data\": {\n      \"post\": {\n        \"summary\": \"Validate response data.\",\n        \"description\": \"Validate response data.\",\n        \"operationId\": \"_validate_response_data\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/parameters\": {\n      \"post\": {\n        \"summary\": \"Validate request parameters against rules.\",\n        \"description\": \"Validate request parameters against rules.\",\n        \"operationId\": \"_validate_parameters\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/validation/cache/key\": {\n      \"post\": {\n        \"summary\": \"Generate cache key for validation result.\",\n        \"description\": \"Generate cache key for validation result.\",\n        \"operationId\": \"_generate_validation_cache_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/metrics\": {\n      \"get\": {\n        \"summary\": \"Get metrics for specified time range.\\n\\nArgs:\\n    time_range: Time range for metrics\\n    \\nReturns:\\n    Metrics dictionary\",\n        \"description\": \"Get metrics for specified time range.\\n\\nArgs:\\n    time_range: Time range for metrics\\n    \\nReturns:\\n    Metrics dictionary\",\n        \"operationId\": \"get_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"time_range\",\n            \"in\": \"query\",\n            \"description\": \"Time range for metrics\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.padic_service_layer\n\n## Overview\n\nP-Adic Service Layer Implementation\n\nThis module provides service interfaces for external modules to interact with \nthe P-Adic compression system, including service lifecycle management, validation,\nand performance tracking.\n\nAuthor: Saraphis Team\nDate: 2024\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_service_layer.py`\n\n## Dependencies\n\n- pathlib\n- gpu_memory.gpu_memory_core\n- padic_encoder\n- threading\n- json\n- datetime\n- service_interfaces.service_interfaces_core\n- time\n- numpy\n- enum\n- uuid\n- torch\n- traceback\n- padic_advanced\n- typing\n- concurrent.futures\n- padic_compressor\n- logging\n- padic_integration\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 2469\n- **Code Lines:** 1913\n- **Comment Lines:** 145\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.padic_service_layer\n\nP-Adic Service Layer Implementation\n\nThis module provides service interfaces for external modules to interact with \nthe P-Adic compression system, including service lifecycle management, validation,\nand performance tracking.\n\nAuthor: Saraphis Team\nDate: 2024\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 0\n- **Dependencies:** 21\n\n## Class Hierarchy\n\n- **PadicServiceMethod** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 11\n- **PadicServiceConfig**\n  - Methods: 0\n  - Complexity: 16\n- **PadicServiceInterface** (inherits from CompressionServiceInterface)\n  - Methods: 24\n  - Complexity: 159\n- **PadicServiceManager**\n  - Methods: 12\n  - Complexity: 67\n- **PadicServiceError** (inherits from Exception)\n  - Methods: 0\n  - Complexity: 2\n- **PadicServiceValidationError** (inherits from PadicServiceError)\n  - Methods: 0\n  - Complexity: 2\n- **PadicServiceValidation**\n  - Methods: 24\n  - Complexity: 134\n- **PadicServiceMetrics**\n  - Methods: 19\n  - Complexity: 82\n## Integration Points\n\n- Class: PadicServiceMethod\n- Class: PadicServiceConfig\n- Class: PadicServiceInterface\n- Class: PadicServiceManager\n- Class: PadicServiceError\n- Class: PadicServiceValidationError\n- Class: PadicServiceValidation\n- Class: PadicServiceMetrics\n- Function: _register_service_methods\n- Function: register_service\n- Function: discover_services\n- Function: get_service\n- Function: invoke_service\n- Function: _check_service_health\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.test_hybrid_service_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_service_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.test_hybrid_service_integration\n\nAPI endpoints for independent_core.compression_systems.padic.test_hybrid_service_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /make/request\n\n#### POST /make/request\n\nAPI endpoint: make_request\n\n**Parameters:**\n\n- **request_id** (query) *required*: integer - Parameter: request_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/make/request?request_id=example_request_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/make/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request_id\": \"example_request_id\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /setUp\n\n#### POST /setUp\n\nSet up test environment\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/setUp\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/setUp\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST /setUp\n\nSet up test environment\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/setUp\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/setUp\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST /setUp\n\nSet up test environment\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/setUp\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/setUp\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST /setUp\n\nSet up test environment\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/setUp\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/setUp\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST /setUp\n\nSet up test environment\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/setUp\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/setUp\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/cache/miss\n\n#### POST /test/cache/miss\n\nTest cache miss behavior\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/cache/miss\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/cache/miss\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/cache/storage\n\n#### POST /test/cache/storage\n\nTest cache storage on response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/cache/storage\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/cache/storage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/concurrent/requests\n\n#### POST /test/concurrent/requests\n\nTest concurrent request processing\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/concurrent/requests\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/concurrent/requests\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/configure/middleware/pipeline\n\n#### POST /test/configure/middleware/pipeline\n\nTest configuring middleware pipeline\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/configure/middleware/pipeline\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/configure/middleware/pipeline\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/gpu/memory/status/request\n\n#### POST /test/gpu/memory/status/request\n\nTest GPU memory status request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/gpu/memory/status/request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/gpu/memory/status/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/handle/failover\n\n#### POST /test/handle/failover\n\nTest failover handling\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/handle/failover\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/handle/failover\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/health/check/request\n\n#### POST /test/health/check/request\n\nTest health check request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/health/check/request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/health/check/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/integration/error/handling\n\n#### POST /test/integration/error/handling\n\nTest integration error handling\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/integration/error/handling\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/integration/error/handling\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/integration/metrics\n\n#### POST /test/integration/metrics\n\nTest integration metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/integration/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/integration/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/invalid/request/handling\n\n#### POST /test/invalid/request/handling\n\nTest invalid request handling\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/invalid/request/handling\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/invalid/request/handling\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/invalid/request/structure\n\n#### POST /test/invalid/request/structure\n\nTest invalid request structure handling\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/invalid/request/structure\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/invalid/request/structure\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/load/balance/requests\n\n#### POST /test/load/balance/requests\n\nTest load balancing multiple requests\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/load/balance/requests\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/load/balance/requests\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/middleware/error/handling\n\n#### POST /test/middleware/error/handling\n\nTest middleware error handling\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/middleware/error/handling\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/middleware/error/handling\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/middleware/metrics\n\n#### POST /test/middleware/metrics\n\nTest middleware metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/middleware/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/middleware/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/performance/metrics/request\n\n#### POST /test/performance/metrics/request\n\nTest performance metrics request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/performance/metrics/request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/performance/metrics/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/rate/limiting/allowed\n\n#### POST /test/rate/limiting/allowed\n\nTest rate limiting allows normal requests\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/rate/limiting/allowed\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/rate/limiting/allowed\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/rate/limiting/blocked\n\n#### POST /test/rate/limiting/blocked\n\nTest rate limiting blocks excessive requests\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/rate/limiting/blocked\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/rate/limiting/blocked\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/request/processing\n\n#### POST /test/request/processing\n\nTest request processing through middleware pipeline\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/request/processing\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/request/processing\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/request/routing\n\n#### POST /test/request/routing\n\nTest request routing\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/request/routing\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/request/routing\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/response/processing\n\n#### POST /test/response/processing\n\nTest response processing through middleware pipeline\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/response/processing\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/response/processing\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/service/layer/error/handling\n\n#### POST /test/service/layer/error/handling\n\nTest service layer error handling\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/service/layer/error/handling\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/service/layer/error/handling\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/service/request/processing\n\n#### POST /test/service/request/processing\n\nTest service request processing\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/service/request/processing\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/service/request/processing\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /test/valid/request\n\n#### POST /test/valid/request\n\nTest valid request processing\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/valid/request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/valid/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.test_hybrid_service_integration\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.test_hybrid_service_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/test/service/request/processing\": {\n      \"post\": {\n        \"summary\": \"Test service request processing\",\n        \"description\": \"Test service request processing\",\n        \"operationId\": \"test_service_request_processing\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/gpu/memory/status/request\": {\n      \"post\": {\n        \"summary\": \"Test GPU memory status request\",\n        \"description\": \"Test GPU memory status request\",\n        \"operationId\": \"test_gpu_memory_status_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/performance/metrics/request\": {\n      \"post\": {\n        \"summary\": \"Test performance metrics request\",\n        \"description\": \"Test performance metrics request\",\n        \"operationId\": \"test_performance_metrics_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/health/check/request\": {\n      \"post\": {\n        \"summary\": \"Test health check request\",\n        \"description\": \"Test health check request\",\n        \"operationId\": \"test_health_check_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/invalid/request/handling\": {\n      \"post\": {\n        \"summary\": \"Test invalid request handling\",\n        \"description\": \"Test invalid request handling\",\n        \"operationId\": \"test_invalid_request_handling\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/setUp\": {\n      \"post\": {\n        \"summary\": \"Set up test environment\",\n        \"description\": \"Set up test environment\",\n        \"operationId\": \"setUp\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/request/routing\": {\n      \"post\": {\n        \"summary\": \"Test request routing\",\n        \"description\": \"Test request routing\",\n        \"operationId\": \"test_request_routing\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/integration/metrics\": {\n      \"post\": {\n        \"summary\": \"Test integration metrics\",\n        \"description\": \"Test integration metrics\",\n        \"operationId\": \"test_integration_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/load/balance/requests\": {\n      \"post\": {\n        \"summary\": \"Test load balancing multiple requests\",\n        \"description\": \"Test load balancing multiple requests\",\n        \"operationId\": \"test_load_balance_requests\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/handle/failover\": {\n      \"post\": {\n        \"summary\": \"Test failover handling\",\n        \"description\": \"Test failover handling\",\n        \"operationId\": \"test_handle_failover\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/request/processing\": {\n      \"post\": {\n        \"summary\": \"Test request processing through middleware pipeline\",\n        \"description\": \"Test request processing through middleware pipeline\",\n        \"operationId\": \"test_request_processing\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/response/processing\": {\n      \"post\": {\n        \"summary\": \"Test response processing through middleware pipeline\",\n        \"description\": \"Test response processing through middleware pipeline\",\n        \"operationId\": \"test_response_processing\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/middleware/metrics\": {\n      \"post\": {\n        \"summary\": \"Test middleware metrics\",\n        \"description\": \"Test middleware metrics\",\n        \"operationId\": \"test_middleware_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/configure/middleware/pipeline\": {\n      \"post\": {\n        \"summary\": \"Test configuring middleware pipeline\",\n        \"description\": \"Test configuring middleware pipeline\",\n        \"operationId\": \"test_configure_middleware_pipeline\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/rate/limiting/allowed\": {\n      \"post\": {\n        \"summary\": \"Test rate limiting allows normal requests\",\n        \"description\": \"Test rate limiting allows normal requests\",\n        \"operationId\": \"test_rate_limiting_allowed\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/rate/limiting/blocked\": {\n      \"post\": {\n        \"summary\": \"Test rate limiting blocks excessive requests\",\n        \"description\": \"Test rate limiting blocks excessive requests\",\n        \"operationId\": \"test_rate_limiting_blocked\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/cache/miss\": {\n      \"post\": {\n        \"summary\": \"Test cache miss behavior\",\n        \"description\": \"Test cache miss behavior\",\n        \"operationId\": \"test_cache_miss\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/cache/storage\": {\n      \"post\": {\n        \"summary\": \"Test cache storage on response\",\n        \"description\": \"Test cache storage on response\",\n        \"operationId\": \"test_cache_storage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/valid/request\": {\n      \"post\": {\n        \"summary\": \"Test valid request processing\",\n        \"description\": \"Test valid request processing\",\n        \"operationId\": \"test_valid_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/invalid/request/structure\": {\n      \"post\": {\n        \"summary\": \"Test invalid request structure handling\",\n        \"description\": \"Test invalid request structure handling\",\n        \"operationId\": \"test_invalid_request_structure\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/concurrent/requests\": {\n      \"post\": {\n        \"summary\": \"Test concurrent request processing\",\n        \"description\": \"Test concurrent request processing\",\n        \"operationId\": \"test_concurrent_requests\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/service/layer/error/handling\": {\n      \"post\": {\n        \"summary\": \"Test service layer error handling\",\n        \"description\": \"Test service layer error handling\",\n        \"operationId\": \"test_service_layer_error_handling\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/integration/error/handling\": {\n      \"post\": {\n        \"summary\": \"Test integration error handling\",\n        \"description\": \"Test integration error handling\",\n        \"operationId\": \"test_integration_error_handling\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/test/middleware/error/handling\": {\n      \"post\": {\n        \"summary\": \"Test middleware error handling\",\n        \"description\": \"Test middleware error handling\",\n        \"operationId\": \"test_middleware_error_handling\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/make/request\": {\n      \"post\": {\n        \"summary\": \"API endpoint: make_request\",\n        \"description\": \"API endpoint: make_request\",\n        \"operationId\": \"make_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.test_hybrid_service_integration\n\n## Overview\n\nComprehensive Tests for Hybrid Service Layer Components\nTests for HybridPadicServiceLayer, HybridServiceIntegration, and HybridServiceMiddleware\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_service_integration.py`\n\n## Dependencies\n\n- hybrid_service_integration_example\n- logging\n- hybrid_service_integration\n- typing\n- hybrid_padic_service_layer\n- hybrid_service_middleware\n- torch\n- padic_service_layer\n- unittest\n- threading\n- datetime\n- service_interfaces.service_interfaces_core\n- time\n\n## Code Structure\n\n- **Total Lines:** 834\n- **Code Lines:** 612\n- **Comment Lines:** 60\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.test_hybrid_service_integration\n\nComprehensive Tests for Hybrid Service Layer Components\nTests for HybridPadicServiceLayer, HybridServiceIntegration, and HybridServiceMiddleware\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_service_integration.py\n- **Total Classes:** 9\n- **Total Functions:** 2\n- **Dependencies:** hybrid_service_integration_example, logging, hybrid_service_integration, typing, hybrid_padic_service_layer, hybrid_service_middleware, torch, padic_service_layer, unittest, threading, datetime, service_interfaces.service_interfaces_core, time\n\n## Contents\n**Classes (9):** TestHybridPadicServiceLayer, TestHybridServiceIntegration, TestHybridServiceMiddleware, TestRateLimitingMiddleware, TestCachingMiddleware, TestValidationMiddleware, TestIntegrationPattern, TestConcurrentOperations, TestErrorHandling\n**Functions (2):** run_all_tests, make_request\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: TestHybridPadicServiceLayer\nClass: TestHybridServiceIntegration\nClass: TestHybridServiceMiddleware\nFunction: test_service_layer_initialization\nFunction: test_service_request_processing\nFunction: test_service_endpoint_registration\nFunction: test_discover_services\nFunction: test_service_health_check\nFunction: test_service_layer_error_handling\n\n## Examples\nfrom .hybrid_service_integration_example import (\n\nHybridServiceIntegrationPattern, create_example_integration\n\nself.integration_pattern = create_example_integration()\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.test_hybrid_service_integration\n\nComprehensive Tests for Hybrid Service Layer Components\nTests for HybridPadicServiceLayer, HybridServiceIntegration, and HybridServiceMiddleware\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 9\n- **Functions:** 2\n- **Dependencies:** 13\n\n## Class Hierarchy\n\n- **TestHybridPadicServiceLayer**\n  - Methods: 9\n  - Complexity: 29\n- **TestHybridServiceIntegration**\n  - Methods: 12\n  - Complexity: 41\n- **TestHybridServiceMiddleware**\n  - Methods: 8\n  - Complexity: 25\n- **TestRateLimitingMiddleware**\n  - Methods: 3\n  - Complexity: 13\n- **TestCachingMiddleware**\n  - Methods: 3\n  - Complexity: 10\n- **TestValidationMiddleware**\n  - Methods: 3\n  - Complexity: 10\n- **TestIntegrationPattern**\n  - Methods: 5\n  - Complexity: 18\n- **TestConcurrentOperations**\n  - Methods: 3\n  - Complexity: 17\n- **TestErrorHandling**\n  - Methods: 3\n  - Complexity: 10\n## Integration Points\n\n- Class: TestHybridPadicServiceLayer\n- Class: TestHybridServiceIntegration\n- Class: TestHybridServiceMiddleware\n- Function: test_service_layer_initialization\n- Function: test_service_request_processing\n- Function: test_service_endpoint_registration\n- Function: test_discover_services\n- Function: test_service_health_check\n- Function: test_service_layer_error_handling\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_service_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_service_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_service_integration\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_service_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nInitialize hybrid service integration\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### ///post/init//\n\n#### POST ///post/init//\n\nValidate service endpoint configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///post/init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///post/init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST ///post/init//\n\nValidate integration configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///post/init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///post/init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //apply/routing/strategy\n\n#### POST //apply/routing/strategy\n\nApply routing strategy to select service\n\n**Parameters:**\n\n- **available_services** (query) *required*: string - Parameter: available_services\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//apply/routing/strategy?available_services=example_available_services&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//apply/routing/strategy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"available_services\": \"example_available_services\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //attempt/fallback/routing\n\n#### POST //attempt/fallback/routing\n\nAttempt fallback routing for failed requests\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **original_error** (query) *required*: str - Parameter: original_error\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//attempt/fallback/routing?request=example_request&original_error=example_original_error\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//attempt/fallback/routing\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"original_error\": \"example_original_error\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //check/service/health\n\n#### POST //check/service/health\n\nCheck health of individual service\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **endpoint** (query) *required*: ServiceEndpoint - Parameter: endpoint\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//check/service/health?service_name=example_service_name&endpoint=example_endpoint\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//check/service/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"endpoint\": \"example_endpoint\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //execute/service/request\n\n#### POST //execute/service/request\n\nExecute service request on target service\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **target_service** (query) *required*: str - Parameter: target_service\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//execute/service/request?request=example_request&target_service=example_target_service\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//execute/service/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"target_service\": \"example_target_service\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //hybrid/optimized/selection\n\n#### POST //hybrid/optimized/selection\n\nHybrid-optimized service selection\n\n**Parameters:**\n\n- **available_services** (query) *required*: string - Parameter: available_services\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//hybrid/optimized/selection?available_services=example_available_services&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//hybrid/optimized/selection\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"available_services\": \"example_available_services\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //invoke/generic/service\n\n#### POST //invoke/generic/service\n\nInvoke generic service instance\n\n**Parameters:**\n\n- **service_instance** (query) *required*: Any - Parameter: service_instance\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//invoke/generic/service?service_instance=example_service_instance&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//invoke/generic/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_instance\": \"example_service_instance\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //least/loaded/selection\n\n#### POST //least/loaded/selection\n\nSelect least loaded service\n\n**Parameters:**\n\n- **available_services** (query) *required*: string - Parameter: available_services\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//least/loaded/selection?available_services=example_available_services\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//least/loaded/selection\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"available_services\": \"example_available_services\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //performance/based/selection\n\n#### POST //performance/based/selection\n\nSelect service based on performance metrics\n\n**Parameters:**\n\n- **available_services** (query) *required*: string - Parameter: available_services\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//performance/based/selection?available_services=example_available_services\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//performance/based/selection\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"available_services\": \"example_available_services\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //register/core/services\n\n#### POST //register/core/services\n\nRegister core services with integration layer\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//register/core/services\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//register/core/services\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //select/target/service\n\n#### POST //select/target/service\n\nSelect target service for request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//select/target/service?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//select/target/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/integration/metrics\n\n#### GET /get/integration/metrics\n\nGet integration performance metrics.\n\nReturns:\n    Dictionary containing performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/integration/status\n\n#### GET /get/integration/status\n\nGet comprehensive integration status.\n\nReturns:\n    Dictionary containing integration status information\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service/health\n\n#### GET /get/service/health\n\nGet health status of services.\n\nArgs:\n    service_name: Optional specific service name\n    \nReturns:\n    Dictionary containing health information\n\n**Parameters:**\n\n- **service_name** (query) *required*: string - Optional specific service name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/health?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /handle/failover\n\n#### POST /handle/failover\n\nHandle service failover for failed requests.\n\nArgs:\n    failed_service: Name of the failed service\n    request: Original service request\n    \nReturns:\n    Service response from failover attempt\n\n**Parameters:**\n\n- **failed_service** (query) *required*: str - Name of the failed service\n- **request** (query) *required*: ServiceRequest - Original service request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/failover?failed_service=example_failed_service&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/failover\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"failed_service\": \"example_failed_service\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /load/balance/requests\n\n#### POST /load/balance/requests\n\nLoad balance multiple requests across available services.\n\nArgs:\n    requests: List of service requests to load balance\n    \nReturns:\n    List of service responses\n\n**Parameters:**\n\n- **requests** (query) *required*: string - List of service requests to load balance\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/balance/requests?requests=example_requests\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/balance/requests\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"requests\": \"example_requests\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /route/request\n\n#### POST /route/request\n\nRoute service request to appropriate service endpoint.\n\nArgs:\n    request: Service request to route\n    \nReturns:\n    Service response\n    \nRaises:\n    ValueError: If request is invalid\n    RuntimeError: If routing fails\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request to route\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/route/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/route/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /shutdown\n\n#### POST /shutdown\n\nShutdown integration service\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/shutdown\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/shutdown\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /update/request/metrics\n\n#### PUT /update/request/metrics\n\nUpdate request metrics\n\n**Parameters:**\n\n- **success** (query) *required*: bool - Parameter: success\n- **response_time** (query) *required*: float - Parameter: response_time\n- **service_type** (query) *required*: str - Parameter: service_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/request/metrics?success=example_success&response_time=example_response_time&service_type=example_service_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/request/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"success\": \"example_success\",\n    \"response_time\": \"example_response_time\",\n    \"service_type\": \"example_service_type\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_service_integration\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_service_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///post/init//\": {\n      \"post\": {\n        \"summary\": \"Validate integration configuration\",\n        \"description\": \"Validate integration configuration\",\n        \"operationId\": \"__post_init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/request/metrics\": {\n      \"put\": {\n        \"summary\": \"Update request metrics\",\n        \"description\": \"Update request metrics\",\n        \"operationId\": \"update_request_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"success\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: success\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"response_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"service_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"Initialize hybrid service integration\",\n        \"description\": \"Initialize hybrid service integration\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//register/core/services\": {\n      \"post\": {\n        \"summary\": \"Register core services with integration layer\",\n        \"description\": \"Register core services with integration layer\",\n        \"operationId\": \"_register_core_services\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/route/request\": {\n      \"post\": {\n        \"summary\": \"Route service request to appropriate service endpoint.\\n\\nArgs:\\n    request: Service request to route\\n    \\nReturns:\\n    Service response\\n    \\nRaises:\\n    ValueError: If request is invalid\\n    RuntimeError: If routing fails\",\n        \"description\": \"Route service request to appropriate service endpoint.\\n\\nArgs:\\n    request: Service request to route\\n    \\nReturns:\\n    Service response\\n    \\nRaises:\\n    ValueError: If request is invalid\\n    RuntimeError: If routing fails\",\n        \"operationId\": \"route_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request to route\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//select/target/service\": {\n      \"post\": {\n        \"summary\": \"Select target service for request\",\n        \"description\": \"Select target service for request\",\n        \"operationId\": \"_select_target_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//apply/routing/strategy\": {\n      \"post\": {\n        \"summary\": \"Apply routing strategy to select service\",\n        \"description\": \"Apply routing strategy to select service\",\n        \"operationId\": \"_apply_routing_strategy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"available_services\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: available_services\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//hybrid/optimized/selection\": {\n      \"post\": {\n        \"summary\": \"Hybrid-optimized service selection\",\n        \"description\": \"Hybrid-optimized service selection\",\n        \"operationId\": \"_hybrid_optimized_selection\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"available_services\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: available_services\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//performance/based/selection\": {\n      \"post\": {\n        \"summary\": \"Select service based on performance metrics\",\n        \"description\": \"Select service based on performance metrics\",\n        \"operationId\": \"_performance_based_selection\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"available_services\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: available_services\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//least/loaded/selection\": {\n      \"post\": {\n        \"summary\": \"Select least loaded service\",\n        \"description\": \"Select least loaded service\",\n        \"operationId\": \"_least_loaded_selection\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"available_services\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: available_services\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//execute/service/request\": {\n      \"post\": {\n        \"summary\": \"Execute service request on target service\",\n        \"description\": \"Execute service request on target service\",\n        \"operationId\": \"_execute_service_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"target_service\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: target_service\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//invoke/generic/service\": {\n      \"post\": {\n        \"summary\": \"Invoke generic service instance\",\n        \"description\": \"Invoke generic service instance\",\n        \"operationId\": \"_invoke_generic_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_instance\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_instance\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//attempt/fallback/routing\": {\n      \"post\": {\n        \"summary\": \"Attempt fallback routing for failed requests\",\n        \"description\": \"Attempt fallback routing for failed requests\",\n        \"operationId\": \"_attempt_fallback_routing\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"original_error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: original_error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/integration/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive integration status.\\n\\nReturns:\\n    Dictionary containing integration status information\",\n        \"description\": \"Get comprehensive integration status.\\n\\nReturns:\\n    Dictionary containing integration status information\",\n        \"operationId\": \"get_integration_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"initialized\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"startup_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"uptime_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"registered_services\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"service_health\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"routing_table_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"circuit_breaker_states\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"routing_method\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"load_balancing\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"health_monitoring\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"fallback_routing\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/integration/metrics\": {\n      \"get\": {\n        \"summary\": \"Get integration performance metrics.\\n\\nReturns:\\n    Dictionary containing performance metrics\",\n        \"description\": \"Get integration performance metrics.\\n\\nReturns:\\n    Dictionary containing performance metrics\",\n        \"operationId\": \"get_integration_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"request_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_requests\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"successful_requests\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"failed_requests\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"success_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_response_time\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"routing_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"routed_to_hybrid\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"routed_to_pure\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"routed_to_fallback\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"circuit_breaker_trips\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"retry_attempts\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"service_utilization\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error_rates\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"recent_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_update\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//check/service/health\": {\n      \"post\": {\n        \"summary\": \"Check health of individual service\",\n        \"description\": \"Check health of individual service\",\n        \"operationId\": \"_check_service_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"endpoint\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: endpoint\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceEndpoint\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/shutdown\": {\n      \"post\": {\n        \"summary\": \"Shutdown integration service\",\n        \"description\": \"Shutdown integration service\",\n        \"operationId\": \"shutdown\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/load/balance/requests\": {\n      \"post\": {\n        \"summary\": \"Load balance multiple requests across available services.\\n\\nArgs:\\n    requests: List of service requests to load balance\\n    \\nReturns:\\n    List of service responses\",\n        \"description\": \"Load balance multiple requests across available services.\\n\\nArgs:\\n    requests: List of service requests to load balance\\n    \\nReturns:\\n    List of service responses\",\n        \"operationId\": \"load_balance_requests\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"requests\",\n            \"in\": \"query\",\n            \"description\": \"List of service requests to load balance\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/service/health\": {\n      \"get\": {\n        \"summary\": \"Get health status of services.\\n\\nArgs:\\n    service_name: Optional specific service name\\n    \\nReturns:\\n    Dictionary containing health information\",\n        \"description\": \"Get health status of services.\\n\\nArgs:\\n    service_name: Optional specific service name\\n    \\nReturns:\\n    Dictionary containing health information\",\n        \"operationId\": \"get_service_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Optional specific service name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/handle/failover\": {\n      \"post\": {\n        \"summary\": \"Handle service failover for failed requests.\\n\\nArgs:\\n    failed_service: Name of the failed service\\n    request: Original service request\\n    \\nReturns:\\n    Service response from failover attempt\",\n        \"description\": \"Handle service failover for failed requests.\\n\\nArgs:\\n    failed_service: Name of the failed service\\n    request: Original service request\\n    \\nReturns:\\n    Service response from failover attempt\",\n        \"operationId\": \"handle_failover\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"failed_service\",\n            \"in\": \"query\",\n            \"description\": \"Name of the failed service\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Original service request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_service_integration\n\n## Overview\n\nHybrid Service Integration - Integration bridge between hybrid and existing services\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_service_integration.py`\n\n## Dependencies\n\n- concurrent.futures\n- logging\n- enum\n- typing\n- hybrid_padic_service_layer\n- uuid\n- torch\n- asyncio\n- padic_service_layer\n- service_interfaces.service_interfaces_core\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1068\n- **Code Lines:** 791\n- **Comment Lines:** 84\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.hybrid_service_integration\n\nHybrid Service Integration - Integration bridge between hybrid and existing services\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_service_integration.py\n- **Total Classes:** 7\n- **Total Functions:** 0\n- **Dependencies:** concurrent.futures, logging, enum, typing, hybrid_padic_service_layer, uuid, torch, asyncio, padic_service_layer, service_interfaces.service_interfaces_core, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (7):** ServiceRoutingMethod, LoadBalancingStrategy, ServiceEndpoint, IntegrationConfig, IntegrationMetrics, CircuitBreaker, HybridServiceIntegration\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: ServiceRoutingMethod\nClass: ServiceEndpoint\nClass: HybridServiceIntegration\nFunction: _register_core_services\nFunction: register_service_endpoint\nFunction: unregister_service_endpoint\nFunction: _select_target_service\nFunction: _service_can_handle_method\nFunction: _execute_service_request\nFunction: _invoke_generic_service\nFunction: _check_service_health\nFunction: discover_services\nFunction: get_service_health\n\n## Examples\ngpu_usage_ratio = torch.cuda.memory_allocated() / torch.cuda.get_device_properties(0).total_memory\n\n\nif gpu_usage_ratio < 0.8:  # GPU not heavily loaded\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_service_integration\n\nHybrid Service Integration - Integration bridge between hybrid and existing services\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 7\n- **Functions:** 0\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **ServiceRoutingMethod** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **LoadBalancingStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **ServiceEndpoint**\n  - Methods: 1\n  - Complexity: 21\n- **IntegrationConfig**\n  - Methods: 1\n  - Complexity: 33\n- **IntegrationMetrics**\n  - Methods: 1\n  - Complexity: 21\n- **CircuitBreaker**\n  - Methods: 5\n  - Complexity: 20\n- **HybridServiceIntegration**\n  - Methods: 28\n  - Complexity: 171\n## Integration Points\n\n- Class: ServiceRoutingMethod\n- Class: ServiceEndpoint\n- Class: HybridServiceIntegration\n- Function: _register_core_services\n- Function: register_service_endpoint\n- Function: unregister_service_endpoint\n- Function: _select_target_service\n- Function: _service_can_handle_method\n- Function: _execute_service_request\n- Function: _invoke_generic_service\n- Function: _check_service_health\n- Function: discover_services\n- Function: get_service_health\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_validation_framework",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_validation_framework.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_validation_framework\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_validation_framework\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /process/rule\n\n#### POST /process/rule\n\nAPI endpoint: process_rule\n\n**Parameters:**\n\n- **rule** (query) *required*: ValidationRule - Parameter: rule\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/process/rule?rule=example_rule\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/rule\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"rule\": \"example_rule\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_validation_framework\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_validation_framework\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/process/rule\": {\n      \"post\": {\n        \"summary\": \"API endpoint: process_rule\",\n        \"description\": \"API endpoint: process_rule\",\n        \"operationId\": \"process_rule\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"rule\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: rule\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ValidationRule\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_validation_framework\n\n## Overview\n\nHybrid Validation Framework - Framework for validating hybrid system correctness\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_validation_framework.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- dynamic_switching_manager\n- concurrent.futures\n- logging\n- math\n- hybrid_padic_compressor\n- enum\n- typing\n- uuid\n- torch\n- padic_encoder\n- gc\n- psutil\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1622\n- **Code Lines:** 1254\n- **Comment Lines:** 91\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_validation_framework\n\nHybrid Validation Framework - Framework for validating hybrid system correctness\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 8\n- **Functions:** 1\n- **Dependencies:** 18\n\n## Class Hierarchy\n\n- **ValidationType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **ValidationSeverity** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **ValidationStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **ValidationRule**\n  - Methods: 1\n  - Complexity: 18\n- **ValidationResult**\n  - Methods: 1\n  - Complexity: 17\n- **ValidationFrameworkConfig**\n  - Methods: 1\n  - Complexity: 24\n- **ValidationReport**\n  - Methods: 1\n  - Complexity: 18\n- **HybridValidationFramework**\n  - Methods: 37\n  - Complexity: 203\n## Integration Points\n\n- Function: validate_switching_manager_consistency\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_clustering",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_clustering.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_clustering\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_clustering\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //calculate/distance/cache/hit/rate\n\n#### POST //calculate/distance/cache/hit/rate\n\nCalculate distance cache hit rate\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//calculate/distance/cache/hit/rate\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//calculate/distance/cache/hit/rate\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /get/all/weights\n\n#### GET /get/all/weights\n\nGet all weights in this cluster and its children\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/all/weights\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/all/weights\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/hybrid/clustering/stats\n\n#### GET /get/hybrid/clustering/stats\n\nGet comprehensive clustering statistics.\n\nReturns:\n    Dictionary containing clustering statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hybrid/clustering/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hybrid/clustering/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/operation\n\n#### PUT /update/operation\n\nUpdate statistics with clustering operation result\n\n**Parameters:**\n\n- **result** (query) *required*: HybridClusteringResult - Parameter: result\n- **weight_count** (query) *required*: int - Parameter: weight_count\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/operation?result=example_result&weight_count=example_weight_count\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/operation\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"result\": \"example_result\",\n    \"weight_count\": \"example_weight_count\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_clustering\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_clustering\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/all/weights\": {\n      \"get\": {\n        \"summary\": \"Get all weights in this cluster and its children\",\n        \"description\": \"Get all weights in this cluster and its children\",\n        \"operationId\": \"get_all_weights\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/operation\": {\n      \"put\": {\n        \"summary\": \"Update statistics with clustering operation result\",\n        \"description\": \"Update statistics with clustering operation result\",\n        \"operationId\": \"update_operation\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"result\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: result\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"HybridClusteringResult\"\n            }\n          },\n          {\n            \"name\": \"weight_count\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: weight_count\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/hybrid/clustering/stats\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive clustering statistics.\\n\\nReturns:\\n    Dictionary containing clustering statistics\",\n        \"description\": \"Get comprehensive clustering statistics.\\n\\nReturns:\\n    Dictionary containing clustering statistics\",\n        \"operationId\": \"get_hybrid_clustering_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"overall_stats\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_clustering_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"successful_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"failed_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"success_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_clustering_time_ms\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_distance_computations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_cluster_quality\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"performance_stats\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"gpu_memory_usage_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"distance_cache_hit_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"distance_cache_size\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"cluster_center_cache_size\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"operations_history_length\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"clustering_patterns\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"weight_count_distribution\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"most_common_weight_count\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"clustering_efficiency\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"prime\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"max_cluster_size\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"min_cluster_size\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"branching_factor\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"distance_threshold\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"last_update\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//calculate/distance/cache/hit/rate\": {\n      \"post\": {\n        \"summary\": \"Calculate distance cache hit rate\",\n        \"description\": \"Calculate distance cache hit rate\",\n        \"operationId\": \"_calculate_distance_cache_hit_rate\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_clustering\n\n## Overview\n\nHybrid Hierarchical Clustering - Hybrid-compatible hierarchical clustering\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_clustering.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- numpy\n- padic_advanced\n- logging\n- math\n- typing\n- torch\n- padic_encoder\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 825\n- **Code Lines:** 588\n- **Comment Lines:** 79\n\n## Complexity Indicators\n\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_clustering\n\nHybrid Hierarchical Clustering - Hybrid-compatible hierarchical clustering\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 2\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **HybridClusterNode**\n  - Methods: 3\n  - Complexity: 24\n- **HybridClusteringResult**\n  - Methods: 1\n  - Complexity: 15\n- **HybridClusteringStats**\n  - Methods: 1\n  - Complexity: 17\n- **HybridHierarchicalClustering**\n  - Methods: 26\n  - Complexity: 160\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_advanced_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_advanced_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_advanced_integration\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_advanced_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/advanced/integration/status\n\n#### GET /get/advanced/integration/status\n\nGet comprehensive integration status.\n\nReturns:\n    Dictionary containing integration status information\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/advanced/integration/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/advanced/integration/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/integration/metrics\n\n#### GET /get/integration/metrics\n\nGet comprehensive integration metrics.\n\nReturns:\n    Dictionary containing integration metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/integration/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/integration/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/operation/metrics\n\n#### PUT /update/operation/metrics\n\nUpdate operation metrics\n\n**Parameters:**\n\n- **operation_type** (query) *required*: str - Parameter: operation_type\n- **performance_score** (query) *required*: float - Parameter: performance_score\n- **feature_type** (query) *required*: AdvancedFeatureType - Parameter: feature_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/operation/metrics?operation_type=example_operation_type&performance_score=example_performance_score&feature_type=example_feature_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/operation/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation_type\": \"example_operation_type\",\n    \"performance_score\": \"example_performance_score\",\n    \"feature_type\": \"example_feature_type\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### PUT /update/operation/metrics\n\nUpdate operation metrics.\n\nArgs:\n    operation_type: Type of operation ('hybrid' or 'pure')\n    performance_score: Performance score (0-1)\n    feature_type: Advanced feature type used\n\n**Parameters:**\n\n- **operation_type** (query) *required*: str - Type of operation ('hybrid' or 'pure')\n- **performance_score** (query) *required*: float - Performance score (0-1)\n- **feature_type** (query) *required*: AdvancedFeatureType - Advanced feature type used\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/operation/metrics?operation_type=example_operation_type&performance_score=example_performance_score&feature_type=example_feature_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/operation/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"operation_type\": \"example_operation_type\",\n    \"performance_score\": \"example_performance_score\",\n    \"feature_type\": \"example_feature_type\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_advanced_integration\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_advanced_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/operation/metrics\": {\n      \"put\": {\n        \"summary\": \"Update operation metrics.\\n\\nArgs:\\n    operation_type: Type of operation ('hybrid' or 'pure')\\n    performance_score: Performance score (0-1)\\n    feature_type: Advanced feature type used\",\n        \"description\": \"Update operation metrics.\\n\\nArgs:\\n    operation_type: Type of operation ('hybrid' or 'pure')\\n    performance_score: Performance score (0-1)\\n    feature_type: Advanced feature type used\",\n        \"operationId\": \"update_operation_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"operation_type\",\n            \"in\": \"query\",\n            \"description\": \"Type of operation ('hybrid' or 'pure')\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"performance_score\",\n            \"in\": \"query\",\n            \"description\": \"Performance score (0-1)\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"feature_type\",\n            \"in\": \"query\",\n            \"description\": \"Advanced feature type used\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"AdvancedFeatureType\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/advanced/integration/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive integration status.\\n\\nReturns:\\n    Dictionary containing integration status information\",\n        \"description\": \"Get comprehensive integration status.\\n\\nReturns:\\n    Dictionary containing integration status information\",\n        \"operationId\": \"get_advanced_integration_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"overall_status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"is_initialized\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"feature_status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"component_availability\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"hensel_lifting_processor\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"clustering_manager\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"optimization_manager\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_hensel_lifting\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_clustering\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_optimization\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"dynamic_switching_manager\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"performance_optimizer\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"enable_hensel_lifting\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"enable_hierarchical_clustering\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"enable_padic_optimization\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"enable_seamless_switching\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"enable_gpu_acceleration\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"pure_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"performance_improvement_ratio\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"integration_health\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"last_update\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/integration/metrics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive integration metrics.\\n\\nReturns:\\n    Dictionary containing integration metrics\",\n        \"description\": \"Get comprehensive integration metrics.\\n\\nReturns:\\n    Dictionary containing integration metrics\",\n        \"operationId\": \"get_integration_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"overall_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"pure_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"hybrid_ratio\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_hybrid_performance\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_pure_performance\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"performance_improvement_ratio\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"feature_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"hensel_lifting_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"clustering_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"optimization_operations\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"feature_usage_counts\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"feature_performance\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"performance_history\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"history_length\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"recent_average\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"integration_health\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_update\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_advanced_integration\n\n## Overview\n\nHybrid Advanced Integration - Main orchestrator for integrating advanced features with hybrid system\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_advanced_integration.py`\n\n## Dependencies\n\n- hybrid_clustering\n- hybrid_padic_compressor\n- performance_optimizer\n- threading\n- datetime\n- hybrid_optimization\n- time\n- hybrid_hensel_lifting\n- dynamic_switching_manager\n- enum\n- uuid\n- torch\n- hybrid_padic_structures\n- padic_advanced\n- typing\n- logging\n- asyncio\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 804\n- **Code Lines:** 612\n- **Comment Lines:** 54\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.hybrid_advanced_integration\n\nHybrid Advanced Integration - Main orchestrator for integrating advanced features with hybrid system\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_advanced_integration.py\n- **Total Classes:** 5\n- **Total Functions:** 0\n- **Dependencies:** hybrid_clustering, hybrid_padic_compressor, performance_optimizer, threading, datetime, hybrid_optimization, time, hybrid_hensel_lifting, dynamic_switching_manager, enum, uuid, torch, hybrid_padic_structures, padic_advanced, typing, logging, asyncio, dataclasses, collections\n\n## Contents\n**Classes (5):** AdvancedFeatureType, IntegrationStatus, AdvancedIntegrationConfig, AdvancedIntegrationMetrics, HybridAdvancedIntegration\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: set_dynamic_switching_manager\n\n## Examples\n# Feature usage statistics\n\nfeature_usage_counts: Dict[AdvancedFeatureType, int] = field(default_factory=lambda: defaultdict(int))\n\nself.feature_usage_counts[feature_type] += 1\n\n'feature_usage_counts': dict(self.integration_metrics.feature_usage_counts),\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_advanced_integration\n\nHybrid Advanced Integration - Main orchestrator for integrating advanced features with hybrid system\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 5\n- **Functions:** 0\n- **Dependencies:** 19\n\n## Class Hierarchy\n\n- **AdvancedFeatureType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **IntegrationStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 8\n- **AdvancedIntegrationConfig**\n  - Methods: 1\n  - Complexity: 27\n- **AdvancedIntegrationMetrics**\n  - Methods: 1\n  - Complexity: 21\n- **HybridAdvancedIntegration**\n  - Methods: 20\n  - Complexity: 110\n## Integration Points\n\n- Function: set_dynamic_switching_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.padic_compressor",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_compressor.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.padic_compressor\n\nAPI endpoints for independent_core.compression_systems.padic.padic_compressor\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/memory/usage\n\n#### GET /get/memory/usage\n\nGet current GPU memory usage\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/memory/usage\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/memory/usage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/performance/stats\n\n#### GET /get/performance/stats\n\nGet comprehensive performance statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/performance/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/performance/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.padic_compressor\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.padic_compressor\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/memory/usage\": {\n      \"get\": {\n        \"summary\": \"Get current GPU memory usage\",\n        \"description\": \"Get current GPU memory usage\",\n        \"operationId\": \"get_memory_usage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"current_usage_bytes\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"limit_bytes\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"usage_percentage\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"peak_usage_bytes\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/performance/stats\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive performance statistics\",\n        \"description\": \"Get comprehensive performance statistics\",\n        \"operationId\": \"get_performance_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.padic_compressor\n\n## Overview\n\nP-adic compression system for neural network weights.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/padic_compressor.py`\n\n## Dependencies\n\n- numpy\n- typing\n- torch\n- gc\n- padic_encoder\n- base.compression_base\n- time\n\n## Code Structure\n\n- **Total Lines:** 401\n- **Code Lines:** 279\n- **Comment Lines:** 44\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_padic_service_layer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_padic_service_layer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_padic_service_layer\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_padic_service_layer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nInitialize hybrid p-adic service layer\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/gpu/memory/status\n\n#### POST //handle/gpu/memory/status\n\nHandle GPU memory status request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/gpu/memory/status?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/gpu/memory/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/hybrid/batch/compress\n\n#### POST //handle/hybrid/batch/compress\n\nHandle batch hybrid compression request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/hybrid/batch/compress?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/hybrid/batch/compress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/hybrid/compress\n\n#### POST //handle/hybrid/compress\n\nHandle hybrid compression request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/hybrid/compress?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/hybrid/compress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/hybrid/decompress\n\n#### POST //handle/hybrid/decompress\n\nHandle hybrid decompression request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/hybrid/decompress?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/hybrid/decompress\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/hybrid/health/check\n\n#### POST //handle/hybrid/health/check\n\nHandle health check request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/hybrid/health/check?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/hybrid/health/check\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/hybrid/performance/metrics\n\n#### POST //handle/hybrid/performance/metrics\n\nHandle performance metrics request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/hybrid/performance/metrics?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/hybrid/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //update/service/health\n\n#### POST //update/service/health\n\nUpdate service health based on performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//update/service/health\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//update/service/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //validate/hybrid/request\n\n#### POST //validate/hybrid/request\n\nValidate hybrid service request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/hybrid/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/hybrid/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/hybrid/service/status\n\n#### GET /get/hybrid/service/status\n\nGet comprehensive hybrid service status.\n\nReturns:\n    Dictionary containing service status information\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hybrid/service/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hybrid/service/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /process/hybrid/request\n\n#### POST /process/hybrid/request\n\nProcess a hybrid p-adic service request.\n\nArgs:\n    request: Service request to process\n    \nReturns:\n    Service response\n    \nRaises:\n    ValueError: If request is invalid\n    RuntimeError: If service not initialized\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request to process\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/process/hybrid/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/hybrid/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /shutdown\n\n#### POST /shutdown\n\nShutdown hybrid service layer\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/shutdown\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/shutdown\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /update/request/metrics\n\n#### PUT /update/request/metrics\n\nUpdate request metrics\n\n**Parameters:**\n\n- **success** (query) *required*: bool - Parameter: success\n- **processing_time** (query) *required*: float - Parameter: processing_time\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/request/metrics?success=example_success&processing_time=example_processing_time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/request/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"success\": \"example_success\",\n    \"processing_time\": \"example_processing_time\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/hybrid/service/config\n\n#### POST /validate/hybrid/service/config\n\nValidate hybrid service configuration.\n\nReturns:\n    Dictionary containing validation results\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/hybrid/service/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/hybrid/service/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_padic_service_layer\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_padic_service_layer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/request/metrics\": {\n      \"put\": {\n        \"summary\": \"Update request metrics\",\n        \"description\": \"Update request metrics\",\n        \"operationId\": \"update_request_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"success\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: success\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          },\n          {\n            \"name\": \"processing_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: processing_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"Initialize hybrid p-adic service layer\",\n        \"description\": \"Initialize hybrid p-adic service layer\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/process/hybrid/request\": {\n      \"post\": {\n        \"summary\": \"Process a hybrid p-adic service request.\\n\\nArgs:\\n    request: Service request to process\\n    \\nReturns:\\n    Service response\\n    \\nRaises:\\n    ValueError: If request is invalid\\n    RuntimeError: If service not initialized\",\n        \"description\": \"Process a hybrid p-adic service request.\\n\\nArgs:\\n    request: Service request to process\\n    \\nReturns:\\n    Service response\\n    \\nRaises:\\n    ValueError: If request is invalid\\n    RuntimeError: If service not initialized\",\n        \"operationId\": \"process_hybrid_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request to process\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/hybrid/request\": {\n      \"post\": {\n        \"summary\": \"Validate hybrid service request\",\n        \"description\": \"Validate hybrid service request\",\n        \"operationId\": \"_validate_hybrid_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/hybrid/compress\": {\n      \"post\": {\n        \"summary\": \"Handle hybrid compression request\",\n        \"description\": \"Handle hybrid compression request\",\n        \"operationId\": \"_handle_hybrid_compress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"compressed_data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compression_type\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"original_shape\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compression_ratio\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compression_time\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//handle/hybrid/decompress\": {\n      \"post\": {\n        \"summary\": \"Handle hybrid decompression request\",\n        \"description\": \"Handle hybrid decompression request\",\n        \"operationId\": \"_handle_hybrid_decompress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"decompressed_data\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"data_shape\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"data_type\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"decompression_time\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//handle/hybrid/batch/compress\": {\n      \"post\": {\n        \"summary\": \"Handle batch hybrid compression request\",\n        \"description\": \"Handle batch hybrid compression request\",\n        \"operationId\": \"_handle_hybrid_batch_compress\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"batch_results\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_items\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"successful_items\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"failed_items\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//handle/gpu/memory/status\": {\n      \"post\": {\n        \"summary\": \"Handle GPU memory status request\",\n        \"description\": \"Handle GPU memory status request\",\n        \"operationId\": \"_handle_gpu_memory_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"cuda_available\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//handle/hybrid/performance/metrics\": {\n      \"post\": {\n        \"summary\": \"Handle performance metrics request\",\n        \"description\": \"Handle performance metrics request\",\n        \"operationId\": \"_handle_hybrid_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"service_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"total_requests\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"successful_requests\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"failed_requests\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"success_rate\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_processing_time\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"fallback_count\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"uptime_seconds\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"gpu_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"peak_usage_mb\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_usage_mb\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"compression_metrics\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"average_compression_ratio\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"average_reconstruction_error\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"recent_performance\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//handle/hybrid/health/check\": {\n      \"post\": {\n        \"summary\": \"Handle health check request\",\n        \"description\": \"Handle health check request\",\n        \"operationId\": \"_handle_hybrid_health_check\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"service_health\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"is_initialized\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"components_status\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_health_check\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"uptime_seconds\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"gpu_available\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/hybrid/service/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive hybrid service status.\\n\\nReturns:\\n    Dictionary containing service status information\",\n        \"description\": \"Get comprehensive hybrid service status.\\n\\nReturns:\\n    Dictionary containing service status information\",\n        \"operationId\": \"get_hybrid_service_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"health\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"initialized\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"components\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"last_check\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"configuration\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"hybrid_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"gpu_enabled\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"fallback_enabled\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/validate/hybrid/service/config\": {\n      \"post\": {\n        \"summary\": \"Validate hybrid service configuration.\\n\\nReturns:\\n    Dictionary containing validation results\",\n        \"description\": \"Validate hybrid service configuration.\\n\\nReturns:\\n    Dictionary containing validation results\",\n        \"operationId\": \"validate_hybrid_service_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//update/service/health\": {\n      \"post\": {\n        \"summary\": \"Update service health based on performance metrics\",\n        \"description\": \"Update service health based on performance metrics\",\n        \"operationId\": \"_update_service_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/shutdown\": {\n      \"post\": {\n        \"summary\": \"Shutdown hybrid service layer\",\n        \"description\": \"Shutdown hybrid service layer\",\n        \"operationId\": \"shutdown\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_padic_service_layer\n\n## Overview\n\nHybrid P-adic Service Layer Implementation\nService layer for hybrid p-adic compression operations with GPU acceleration.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_padic_service_layer.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- concurrent.futures\n- logging\n- hybrid_padic_compressor\n- enum\n- typing\n- uuid\n- torch\n- asyncio\n- padic_service_layer\n- service_interfaces.service_interfaces_core\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 729\n- **Code Lines:** 556\n- **Comment Lines:** 51\n\n## Complexity Indicators\n\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_padic_service_layer\n\nHybrid P-adic Service Layer Implementation\nService layer for hybrid p-adic compression operations with GPU acceleration.\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 0\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **HybridServiceMethod** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 13\n- **HybridServiceConfig**\n  - Methods: 1\n  - Complexity: 32\n- **HybridServiceMetrics**\n  - Methods: 1\n  - Complexity: 18\n- **HybridPadicServiceLayer**\n  - Methods: 18\n  - Complexity: 108\n## Integration Points\n\n- Class: HybridServiceMethod\n- Class: HybridServiceConfig\n- Class: HybridServiceMetrics\n- Class: HybridPadicServiceLayer\n- Function: initialize_hybrid_services\n- Function: _register_hybrid_services\n- Function: register_hybrid_service\n- Function: get_hybrid_service_status\n- Function: validate_hybrid_service_config\n- Function: _update_service_health\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.direction_manager",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/direction_manager.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.direction_manager\n\nAPI endpoints for independent_core.compression_systems.padic.direction_manager\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/direction/analytics\n\n#### GET /get/direction/analytics\n\nGet comprehensive direction analytics.\n\nReturns:\n    Direction analytics data\n    \nRaises:\n    RuntimeError: If analytics generation fails\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/direction/analytics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/direction/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /update/direction/strategy\n\n#### PUT /update/direction/strategy\n\nUpdate direction strategy based on current state.\n\nArgs:\n    direction_state: Current direction state\n    \nRaises:\n    RuntimeError: If strategy update fails\n    ValueError: If direction state is invalid\n\n**Parameters:**\n\n- **direction_state** (query) *required*: DirectionState - Current direction state\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/direction/strategy?direction_state=example_direction_state\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/direction/strategy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"direction_state\": \"example_direction_state\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.direction_manager\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.direction_manager\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/direction/strategy\": {\n      \"put\": {\n        \"summary\": \"Update direction strategy based on current state.\\n\\nArgs:\\n    direction_state: Current direction state\\n    \\nRaises:\\n    RuntimeError: If strategy update fails\\n    ValueError: If direction state is invalid\",\n        \"description\": \"Update direction strategy based on current state.\\n\\nArgs:\\n    direction_state: Current direction state\\n    \\nRaises:\\n    RuntimeError: If strategy update fails\\n    ValueError: If direction state is invalid\",\n        \"operationId\": \"update_direction_strategy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"direction_state\",\n            \"in\": \"query\",\n            \"description\": \"Current direction state\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DirectionState\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/direction/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive direction analytics.\\n\\nReturns:\\n    Direction analytics data\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"description\": \"Get comprehensive direction analytics.\\n\\nReturns:\\n    Direction analytics data\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"operationId\": \"get_direction_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.direction_manager\n\n## Overview\n\nDirection Manager - Main orchestrator for direction-based hybrid switching decisions\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/direction_manager.py`\n\n## Dependencies\n\n- dynamic_switching_manager\n- direction_coordinator\n- gac_system.gac_types\n- logging\n- math\n- gac_system.direction_state\n- enum\n- typing\n- torch\n- direction_analyzer\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 981\n- **Code Lines:** 725\n- **Comment Lines:** 71\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.direction_manager\n\nDirection Manager - Main orchestrator for direction-based hybrid switching decisions\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/direction_manager.py\n- **Total Classes:** 6\n- **Total Functions:** 0\n- **Dependencies:** dynamic_switching_manager, direction_coordinator, gac_system.gac_types, logging, math, gac_system.direction_state, enum, typing, torch, direction_analyzer, threading, dataclasses, datetime, collections, time\n\n## Contents\n**Classes (6):** DirectionSwitchingStrategy, DirectionDecisionType, DirectionSwitchingDecision, DirectionAnalytics, DirectionManagerConfig, DirectionManager\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: DirectionManagerConfig\nClass: DirectionManager\nFunction: _update_switching_manager_strategy\n\n## Examples\nif len(performances) >= 10:  # Minimum sample size\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.direction_manager\n\nDirection Manager - Main orchestrator for direction-based hybrid switching decisions\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 15\n\n## Class Hierarchy\n\n- **DirectionSwitchingStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **DirectionDecisionType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **DirectionSwitchingDecision**\n  - Methods: 1\n  - Complexity: 13\n- **DirectionAnalytics**\n  - Methods: 0\n  - Complexity: 13\n- **DirectionManagerConfig**\n  - Methods: 1\n  - Complexity: 29\n- **DirectionManager**\n  - Methods: 25\n  - Complexity: 178\n## Integration Points\n\n- Class: DirectionManagerConfig\n- Class: DirectionManager\n- Function: _update_switching_manager_strategy\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_padic_structures",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_padic_structures.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_padic_structures\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_padic_structures\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/hybrid/weight\n\n#### POST /create/hybrid/weight\n\nCreate hybrid weight from pure p-adic weight\n\n**Parameters:**\n\n- **padic_weight** (query) *required*: PadicWeight - Parameter: padic_weight\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/hybrid/weight?padic_weight=example_padic_weight\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/hybrid/weight\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"padic_weight\": \"example_padic_weight\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/conversion/metrics\n\n#### GET /get/conversion/metrics\n\nGet conversion performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/conversion/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/conversion/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/conversion/stats\n\n#### GET /get/conversion/stats\n\nGet conversion statistics from converter\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/conversion/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/conversion/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/memory/usage\n\n#### GET /get/memory/usage\n\nGet GPU memory usage for hybrid operations\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/memory/usage\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/memory/usage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/operation/stats\n\n#### GET /get/operation/stats\n\nGet operation statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/operation/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/operation/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_padic_structures\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_padic_structures\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/conversion/metrics\": {\n      \"get\": {\n        \"summary\": \"Get conversion performance metrics\",\n        \"description\": \"Get conversion performance metrics\",\n        \"operationId\": \"get_conversion_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/create/hybrid/weight\": {\n      \"post\": {\n        \"summary\": \"Create hybrid weight from pure p-adic weight\",\n        \"description\": \"Create hybrid weight from pure p-adic weight\",\n        \"operationId\": \"create_hybrid_weight\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"padic_weight\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: padic_weight\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"PadicWeight\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/operation/stats\": {\n      \"get\": {\n        \"summary\": \"Get operation statistics\",\n        \"description\": \"Get operation statistics\",\n        \"operationId\": \"get_operation_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/conversion/stats\": {\n      \"get\": {\n        \"summary\": \"Get conversion statistics from converter\",\n        \"description\": \"Get conversion statistics from converter\",\n        \"operationId\": \"get_conversion_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/memory/usage\": {\n      \"get\": {\n        \"summary\": \"Get GPU memory usage for hybrid operations\",\n        \"description\": \"Get GPU memory usage for hybrid operations\",\n        \"operationId\": \"get_memory_usage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_padic_structures\n\n## Overview\n\nHybrid P-adic Data Structures - GPU-friendly two-channel representation\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_padic_structures.py`\n\n## Dependencies\n\n- numpy\n- typing\n- torch\n- padic_encoder\n- fractions\n- dataclasses\n- json\n- time\n\n## Code Structure\n\n- **Total Lines:** 521\n- **Code Lines:** 353\n- **Comment Lines:** 63\n\n## Complexity Indicators\n\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_padic_structures\n\nHybrid P-adic Data Structures - GPU-friendly two-channel representation\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 0\n- **Dependencies:** 8\n\n## Class Hierarchy\n\n- **HybridPadicWeight**\n  - Methods: 1\n  - Complexity: 28\n- **HybridPadicValidator**\n  - Methods: 3\n  - Complexity: 37\n- **HybridPadicConverter**\n  - Methods: 8\n  - Complexity: 30\n- **HybridPadicManager**\n  - Methods: 11\n  - Complexity: 52\n## Integration Points\n\n- Class: HybridPadicManager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_service_integration_example",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_service_integration_example.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_service_integration_example\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_service_integration_example\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //initialize/compression/service/interface\n\n#### POST //initialize/compression/service/interface\n\nInitialize core compression service interface\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/compression/service/interface\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/compression/service/interface\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //initialize/service/middleware\n\n#### POST //initialize/service/middleware\n\nInitialize service middleware\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//initialize/service/middleware\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//initialize/service/middleware\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //setup/service/routing\n\n#### POST //setup/service/routing\n\nSet up service routing and registration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//setup/service/routing\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//setup/service/routing\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /compress/data/hybrid/optimized\n\n#### POST /compress/data/hybrid/optimized\n\nCompress data using hybrid-optimized pipeline.\n\nArgs:\n    data: Tensor data to compress\n    compression_options: Optional compression parameters\n    \nReturns:\n    Service response with compression results\n\n**Parameters:**\n\n- **data** (body) *required*: Tensor - Tensor data to compress\n- **compression_options** (query) *required*: string - Optional compression parameters\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000/compress/data/hybrid/optimized?compression_options=example_compression_options\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/compress/data/hybrid/optimized\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nparams = {\n    \"compression_options\": \"example_compression_options\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /create/example/integration\n\n#### POST /create/example/integration\n\nCreate example integration with optimized configuration.\n\nReturns:\n    Configured integration pattern instance\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/example/integration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/example/integration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /decompress/data/hybrid/optimized\n\n#### POST /decompress/data/hybrid/optimized\n\nDecompress data using hybrid-optimized pipeline.\n\nArgs:\n    compressed_data: Compressed data dictionary\n    \nReturns:\n    Service response with decompression results\n\n**Parameters:**\n\n- **compressed_data** (query) *required*: string - Compressed data dictionary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/decompress/data/hybrid/optimized?compressed_data=example_compressed_data\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/decompress/data/hybrid/optimized\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"compressed_data\": \"example_compressed_data\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/complete/metrics\n\n#### GET /get/complete/metrics\n\nGet comprehensive metrics from all components.\n\nReturns:\n    Dictionary containing metrics from all components\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/complete/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/complete/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/complete/status\n\n#### GET /get/complete/status\n\nGet comprehensive status of complete integration.\n\nReturns:\n    Dictionary containing status of all components\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/complete/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/complete/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /process/service/request/complete\n\n#### POST /process/service/request/complete\n\nProcess service request through complete integration pipeline.\n\nArgs:\n    request: Service request to process\n    \nReturns:\n    Service response\n    \nRaises:\n    RuntimeError: If integration not initialized\n    ValueError: If request is invalid\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Service request to process\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/process/service/request/complete?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/process/service/request/complete\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /run/integration/test\n\n#### POST /run/integration/test\n\nRun comprehensive integration test.\n\nReturns:\n    Test results dictionary\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/run/integration/test\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/run/integration/test\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_service_integration_example\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_service_integration_example\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/example/integration\": {\n      \"post\": {\n        \"summary\": \"Create example integration with optimized configuration.\\n\\nReturns:\\n    Configured integration pattern instance\",\n        \"description\": \"Create example integration with optimized configuration.\\n\\nReturns:\\n    Configured integration pattern instance\",\n        \"operationId\": \"create_example_integration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/compression/service/interface\": {\n      \"post\": {\n        \"summary\": \"Initialize core compression service interface\",\n        \"description\": \"Initialize core compression service interface\",\n        \"operationId\": \"_initialize_compression_service_interface\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//initialize/service/middleware\": {\n      \"post\": {\n        \"summary\": \"Initialize service middleware\",\n        \"description\": \"Initialize service middleware\",\n        \"operationId\": \"_initialize_service_middleware\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//setup/service/routing\": {\n      \"post\": {\n        \"summary\": \"Set up service routing and registration\",\n        \"description\": \"Set up service routing and registration\",\n        \"operationId\": \"_setup_service_routing\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/process/service/request/complete\": {\n      \"post\": {\n        \"summary\": \"Process service request through complete integration pipeline.\\n\\nArgs:\\n    request: Service request to process\\n    \\nReturns:\\n    Service response\\n    \\nRaises:\\n    RuntimeError: If integration not initialized\\n    ValueError: If request is invalid\",\n        \"description\": \"Process service request through complete integration pipeline.\\n\\nArgs:\\n    request: Service request to process\\n    \\nReturns:\\n    Service response\\n    \\nRaises:\\n    RuntimeError: If integration not initialized\\n    ValueError: If request is invalid\",\n        \"operationId\": \"process_service_request_complete\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Service request to process\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/compress/data/hybrid/optimized\": {\n      \"post\": {\n        \"summary\": \"Compress data using hybrid-optimized pipeline.\\n\\nArgs:\\n    data: Tensor data to compress\\n    compression_options: Optional compression parameters\\n    \\nReturns:\\n    Service response with compression results\",\n        \"description\": \"Compress data using hybrid-optimized pipeline.\\n\\nArgs:\\n    data: Tensor data to compress\\n    compression_options: Optional compression parameters\\n    \\nReturns:\\n    Service response with compression results\",\n        \"operationId\": \"compress_data_hybrid_optimized\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"compression_options\",\n            \"in\": \"query\",\n            \"description\": \"Optional compression parameters\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"data\": {\n                    \"type\": \"Tensor\",\n                    \"description\": \"Tensor data to compress\"\n                  }\n                },\n                \"required\": [\n                  \"data\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/decompress/data/hybrid/optimized\": {\n      \"post\": {\n        \"summary\": \"Decompress data using hybrid-optimized pipeline.\\n\\nArgs:\\n    compressed_data: Compressed data dictionary\\n    \\nReturns:\\n    Service response with decompression results\",\n        \"description\": \"Decompress data using hybrid-optimized pipeline.\\n\\nArgs:\\n    compressed_data: Compressed data dictionary\\n    \\nReturns:\\n    Service response with decompression results\",\n        \"operationId\": \"decompress_data_hybrid_optimized\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"compressed_data\",\n            \"in\": \"query\",\n            \"description\": \"Compressed data dictionary\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/complete/status\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive status of complete integration.\\n\\nReturns:\\n    Dictionary containing status of all components\",\n        \"description\": \"Get comprehensive status of complete integration.\\n\\nReturns:\\n    Dictionary containing status of all components\",\n        \"operationId\": \"get_complete_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"initialized\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"error\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/complete/metrics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive metrics from all components.\\n\\nReturns:\\n    Dictionary containing metrics from all components\",\n        \"description\": \"Get comprehensive metrics from all components.\\n\\nReturns:\\n    Dictionary containing metrics from all components\",\n        \"operationId\": \"get_complete_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/run/integration/test\": {\n      \"post\": {\n        \"summary\": \"Run comprehensive integration test.\\n\\nReturns:\\n    Test results dictionary\",\n        \"description\": \"Run comprehensive integration test.\\n\\nReturns:\\n    Test results dictionary\",\n        \"operationId\": \"run_integration_test\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_service_integration_example\n\n## Overview\n\nHybrid Service Integration Example - Complete integration patterns with CompressionServiceInterface\nDemonstrates how to use HybridPadicServiceLayer, HybridServiceIntegration, and HybridServiceMiddleware together\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_service_integration_example.py`\n\n## Dependencies\n\n- logging\n- hybrid_service_integration\n- typing\n- hybrid_padic_service_layer\n- torch\n- padic_service_layer\n- hybrid_service_middleware\n- service_interfaces.service_interfaces_core\n- time\n\n## Code Structure\n\n- **Total Lines:** 647\n- **Code Lines:** 472\n- **Comment Lines:** 48\n\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.hybrid_service_integration_example\n\nHybrid Service Integration Example - Complete integration patterns with CompressionServiceInterface\nDemonstrates how to use HybridPadicServiceLayer, HybridServiceIntegration, and HybridServiceMiddleware together\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_service_integration_example.py\n- **Total Classes:** 1\n- **Total Functions:** 2\n- **Dependencies:** logging, hybrid_service_integration, typing, hybrid_padic_service_layer, torch, padic_service_layer, hybrid_service_middleware, service_interfaces.service_interfaces_core, time\n\n## Contents\n**Classes (1):** HybridServiceIntegrationPattern\n**Functions (2):** create_example_integration, run_complete_example\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: HybridServiceIntegrationPattern\nFunction: _initialize_compression_service_interface\nFunction: _initialize_hybrid_service_layer\nFunction: _initialize_service_middleware\nFunction: _initialize_service_integration\nFunction: _setup_service_routing\nFunction: process_service_request_complete\n\n## Examples\nHybrid Service Integration Example - Complete integration patterns with CompressionServiceInterface\n\nDemonstrates how to use HybridPadicServiceLayer, HybridServiceIntegration, and HybridServiceMiddleware together\n\nDemonstrates proper setup and usage of all hybrid service components.\n\"\"\"\n\n\n# Example: Add custom hybrid-specific middleware\n# custom_middleware = CustomHybridMiddleware(self.middleware_config)\n# self.service_middleware.add_middleware(custom_middleware)\n\n\ndef create_example_integration() -> HybridServiceIntegrationPattern:\n\"\"\"\n\nCreate example integration with optimized configuration.\n\n\ndef run_complete_example():\n\n\"\"\"Run complete integration example\"\"\"\n\nlogger = logging.getLogger('HybridIntegrationExample')\n\n\nintegration = create_example_integration()\n\nlogger.info(\"Integration Example Results:\")\n\nlogger.error(f\"Integration example failed: {e}\")\n\nsuccess = run_complete_example()\n\nprint(f\"Integration example {'PASSED' if success else 'FAILED'}\")\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.test_service_config_integration",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_service_config_integration.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.test_service_config_integration\n\nAPI endpoints for independent_core.compression_systems.padic.test_service_config_integration\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /test/configuration/persistence\n\n#### POST /test/configuration/persistence\n\nTest configuration save/load functionality\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/test/configuration/persistence\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/test/configuration/persistence\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.test_service_config_integration\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.test_service_config_integration\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/test/configuration/persistence\": {\n      \"post\": {\n        \"summary\": \"Test configuration save/load functionality\",\n        \"description\": \"Test configuration save/load functionality\",\n        \"operationId\": \"test_configuration_persistence\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.test_service_config_integration\n\n## Overview\n\nTest P-Adic Service Configuration Integration\n\nTests the integration of the new PadicServiceConfiguration with existing P-adic components.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_service_config_integration.py`\n\n## Dependencies\n\n- pathlib\n- logging\n- tempfile\n- padic_integration\n- json\n- padic_service_config\n\n## Code Structure\n\n- **Total Lines:** 228\n- **Code Lines:** 145\n- **Comment Lines:** 26\n\n",
        "configuration_guide": "\n# independent_core.compression_systems.padic.test_service_config_integration\n\nTest P-Adic Service Configuration Integration\n\nTests the integration of the new PadicServiceConfiguration with existing P-adic components.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_service_config_integration.py\n- **Total Classes:** 0\n- **Total Functions:** 8\n- **Dependencies:** pathlib, logging, tempfile, padic_integration, json, padic_service_config\n\n## Contents\n**Functions (8):** test_basic_configuration, test_integration_with_existing_components, test_configuration_persistence, test_configuration_validation, test_configuration_callbacks, test_orchestrator_integration, main, config_callback\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nNo examples available\n",
        "integration_guide": "\n# independent_core.compression_systems.padic.test_service_config_integration\n\nTest P-Adic Service Configuration Integration\n\nTests the integration of the new PadicServiceConfiguration with existing P-adic components.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_service_config_integration.py\n- **Total Classes:** 0\n- **Total Functions:** 8\n- **Dependencies:** pathlib, logging, tempfile, padic_integration, json, padic_service_config\n\n## Contents\n**Functions (8):** test_basic_configuration, test_integration_with_existing_components, test_configuration_persistence, test_configuration_validation, test_configuration_callbacks, test_orchestrator_integration, main, config_callback\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\nNo examples available\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "configuration_guide missing required section: Overview",
        "configuration_guide missing required section: Details",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.hybrid_bounding_engine",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_bounding_engine.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.hybrid_bounding_engine\n\nAPI endpoints for independent_core.compression_systems.padic.hybrid_bounding_engine\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /get/hybrid/bounding/analytics\n\n#### GET /get/hybrid/bounding/analytics\n\nGet comprehensive hybrid bounding analytics.\n\nReturns:\n    Hybrid bounding analytics\n    \nRaises:\n    RuntimeError: If analytics generation fails\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/hybrid/bounding/analytics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/hybrid/bounding/analytics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.hybrid_bounding_engine\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.hybrid_bounding_engine\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/hybrid/bounding/analytics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive hybrid bounding analytics.\\n\\nReturns:\\n    Hybrid bounding analytics\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"description\": \"Get comprehensive hybrid bounding analytics.\\n\\nReturns:\\n    Hybrid bounding analytics\\n    \\nRaises:\\n    RuntimeError: If analytics generation fails\",\n        \"operationId\": \"get_hybrid_bounding_analytics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.hybrid_bounding_engine\n\n## Overview\n\nHybrid Bounding Engine - Main hybrid bounding engine for p-adic gradient operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/hybrid_bounding_engine.py`\n\n## Dependencies\n\n- gac_system.enhanced_bounder\n- dynamic_switching_manager\n- numpy\n- gac_system.gac_types\n- logging\n- math\n- gac_system.direction_state\n- enum\n- typing\n- torch\n- direction_manager\n- threading\n- dataclasses\n- datetime\n- collections\n- time\n\n## Code Structure\n\n- **Total Lines:** 1194\n- **Code Lines:** 892\n- **Comment Lines:** 86\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.hybrid_bounding_engine\n\nHybrid Bounding Engine - Main hybrid bounding engine for p-adic gradient operations\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 0\n- **Dependencies:** 16\n\n## Class Hierarchy\n\n- **HybridBoundingStrategy** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **BoundingOperationType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 5\n- **HybridBoundingResult**\n  - Methods: 1\n  - Complexity: 20\n- **HybridBoundingAnalytics**\n  - Methods: 0\n  - Complexity: 14\n- **HybridBoundingConfig**\n  - Methods: 1\n  - Complexity: 33\n- **HybridBoundingEngine**\n  - Methods: 38\n  - Complexity: 223\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.padic.test_hybrid_performance_optimization",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_performance_optimization.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.padic.test_hybrid_performance_optimization\n\nAPI endpoints for independent_core.compression_systems.padic.test_hybrid_performance_optimization\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### torch.cuda.is_available\n\n#### PATCH torch.cuda.is_available\n\nTest hybrid operation profiling\n\n**Parameters:**\n\n- **mock_memory** (query) *required*: string - Parameter: mock_memory\n- **mock_cuda** (query) *required*: string - Parameter: mock_cuda\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PATCH -H \"Content-Type: application/json\" \"http://localhost:8000torch.cuda.is_available?mock_memory=example_mock_memory&mock_cuda=example_mock_cuda\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000torch.cuda.is_available\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"mock_memory\": \"example_mock_memory\",\n    \"mock_cuda\": \"example_mock_cuda\",\n}\n\nresponse = requests.patch(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### PATCH torch.cuda.is_available\n\nTest performance trends analysis\n\n**Parameters:**\n\n- **mock_cuda** (query) *required*: string - Parameter: mock_cuda\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PATCH -H \"Content-Type: application/json\" \"http://localhost:8000torch.cuda.is_available?mock_cuda=example_mock_cuda\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000torch.cuda.is_available\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"mock_cuda\": \"example_mock_cuda\",\n}\n\nresponse = requests.patch(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.padic.test_hybrid_performance_optimization\",\n    \"description\": \"API endpoints for independent_core.compression_systems.padic.test_hybrid_performance_optimization\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"torch.cuda.is_available\": {\n      \"patch\": {\n        \"summary\": \"Test performance trends analysis\",\n        \"description\": \"Test performance trends analysis\",\n        \"operationId\": \"test_performance_trends_analysis\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"mock_cuda\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: mock_cuda\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.padic.test_hybrid_performance_optimization\n\n## Overview\n\nComprehensive Tests for Hybrid Performance Optimization\nTests for HybridPerformanceOptimizer, HybridPerformanceMonitor, HybridPerformanceAnalyzer, and HybridPerformanceTuner\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_performance_optimization.py`\n\n## Dependencies\n\n- hybrid_padic_structures\n- dynamic_switching_manager\n- numpy\n- hybrid_performance_monitor\n- hybrid_padic_compressor\n- hybrid_performance_tuner\n- logging\n- typing\n- hybrid_performance_optimizer\n- hybrid_performance_analyzer\n- torch\n- performance_optimizer\n- unittest\n- threading\n- datetime\n- unittest.mock\n- time\n\n## Code Structure\n\n- **Total Lines:** 936\n- **Code Lines:** 691\n- **Comment Lines:** 66\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "performance_guide": "\n# independent_core.compression_systems.padic.test_hybrid_performance_optimization\n\nComprehensive Tests for Hybrid Performance Optimization\nTests for HybridPerformanceOptimizer, HybridPerformanceMonitor, HybridPerformanceAnalyzer, and HybridPerformanceTuner\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/padic/test_hybrid_performance_optimization.py\n- **Total Classes:** 6\n- **Total Functions:** 3\n- **Dependencies:** hybrid_padic_structures, dynamic_switching_manager, numpy, hybrid_performance_monitor, hybrid_padic_compressor, hybrid_performance_tuner, logging, typing, hybrid_performance_optimizer, hybrid_performance_analyzer, torch, performance_optimizer, unittest, threading, datetime, unittest.mock, time\n\n## Contents\n**Classes (6):** TestHybridOptimizationConfig, TestHybridPerformanceOptimizer, TestHybridPerformanceMonitor, TestHybridPerformanceAnalyzer, TestHybridPerformanceTuner, TestIntegratedPerformanceOptimization\n**Functions (3):** run_hybrid_performance_optimization_tests, test_operation, monitor_operations\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nNone\n\n## Examples\ncpu_usage_percent=50.0,\n\nmemory_usage_mb=1024.0,\n\ncpu_usage_percent=50.0,\n\nmemory_usage_mb=1024.0,\n\ncpu_usage_percent=50.0,\n\nmemory_usage_mb=1024.0,\n\nself.monitor.monitoring_metrics.peak_gpu_memory_usage_mb = 1500.0   # Above threshold\n\n\ncpu_usage_percent=50.0 + i % 30,\n\nmemory_usage_mb=1024.0 + i % 200,\n\n\"\"\"Test resource usage analysis\"\"\"\n\nresource_analysis = self.analyzer.analyze_gpu_memory_usage()\n\n\nself.assertIn('cpu_usage_analysis', resource_analysis.__dict__)\n\nself.assertIn('memory_usage_analysis', resource_analysis.__dict__)\n\n'resource_metrics': {'average_gpu_memory_mb': 512.0, 'average_cpu_usage': 50.0},\n",
        "architecture": "# Architecture: independent_core.compression_systems.padic.test_hybrid_performance_optimization\n\nComprehensive Tests for Hybrid Performance Optimization\nTests for HybridPerformanceOptimizer, HybridPerformanceMonitor, HybridPerformanceAnalyzer, and HybridPerformanceTuner\nNO FALLBACKS - HARD FAILURES ONLY\n\n## Components Overview\n\n- **Classes:** 6\n- **Functions:** 3\n- **Dependencies:** 17\n\n## Class Hierarchy\n\n- **TestHybridOptimizationConfig**\n  - Methods: 3\n  - Complexity: 10\n- **TestHybridPerformanceOptimizer**\n  - Methods: 8\n  - Complexity: 30\n- **TestHybridPerformanceMonitor**\n  - Methods: 8\n  - Complexity: 37\n- **TestHybridPerformanceAnalyzer**\n  - Methods: 8\n  - Complexity: 32\n- **TestHybridPerformanceTuner**\n  - Methods: 8\n  - Complexity: 29\n- **TestIntegratedPerformanceOptimization**\n  - Methods: 5\n  - Complexity: 22\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "performance_guide missing required section: Overview",
        "performance_guide missing required section: Details",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.tensor_decomposition.tensor_advanced",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/tensor_decomposition/tensor_advanced.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.tensor_decomposition.tensor_advanced\n\nAPI endpoints for independent_core.compression_systems.tensor_decomposition.tensor_advanced\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /update/core\n\n#### PUT /update/core\n\nAPI endpoint: update_core\n\n**Parameters:**\n\n- **core_idx** (query) *required*: string - Parameter: core_idx\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/core?core_idx=example_core_idx\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/core\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"core_idx\": \"example_core_idx\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.tensor_decomposition.tensor_advanced\",\n    \"description\": \"API endpoints for independent_core.compression_systems.tensor_decomposition.tensor_advanced\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/update/core\": {\n      \"put\": {\n        \"summary\": \"API endpoint: update_core\",\n        \"description\": \"API endpoint: update_core\",\n        \"operationId\": \"update_core\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"core_idx\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: core_idx\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.tensor_decomposition.tensor_advanced\n\n## Overview\n\nAdvanced Tensor Decomposition Module for Saraphis Compression System\n\nImplements HOSVD, Tensor-Ring decomposition, advanced rank optimization,\nand GPU acceleration for tensor operations.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/tensor_decomposition/tensor_advanced.py`\n\n## Dependencies\n\n- gpu_memory.gpu_memory_core\n- optuna\n- torch.cuda\n- gpytorch.kernels\n- torch.nn\n- scipy.optimize\n- threading\n- datetime\n- time\n- numpy\n- gpytorch\n- gpytorch.means\n- math\n- enum\n- torch\n- gac_system.gac_components\n- training_manager\n- gpytorch.models\n- scipy.linalg\n- gpytorch.distributions\n- typing\n- warnings\n- abc\n- tensor_core\n- sklearn.ensemble\n- concurrent.futures\n- logging\n- sklearn.decomposition\n- dataclasses\n\n## Code Structure\n\n- **Total Lines:** 1542\n- **Code Lines:** 990\n- **Comment Lines:** 202\n\n## Complexity Indicators\n\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.tensor_decomposition.tensor_advanced\n\nAdvanced Tensor Decomposition Module for Saraphis Compression System\n\nImplements HOSVD, Tensor-Ring decomposition, advanced rank optimization,\nand GPU acceleration for tensor operations.\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 4\n- **Dependencies:** 29\n\n## Class Hierarchy\n\n- **HOSVDDecomposer** (inherits from DecompositionMethod)\n  - Methods: 8\n  - Complexity: 45\n- **TensorRingDecomposer** (inherits from DecompositionMethod)\n  - Methods: 10\n  - Complexity: 61\n- **AdvancedTensorRankOptimizer** (inherits from TensorRankOptimizer)\n  - Methods: 14\n  - Complexity: 95\n- **TensorGPUAccelerator**\n  - Methods: 14\n  - Complexity: 94\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.base.compression_base",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/base/compression_base.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.base.compression_base",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.base.compression_base\n\n## Overview\n\nBase compression algorithm interfaces and abstract classes.\nAll methods must be implemented - no default implementations.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/base/compression_base.py`\n\n## Dependencies\n\n- abc\n- torch\n- typing\n- time\n\n## Code Structure\n\n- **Total Lines:** 179\n- **Code Lines:** 138\n- **Comment Lines:** 1\n\n## Complexity Indicators\n\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.base.compression_base\n\nBase compression algorithm interfaces and abstract classes.\nAll methods must be implemented - no default implementations.\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 0\n- **Dependencies:** 4\n\n## Class Hierarchy\n\n- **CompressionAlgorithm** (inherits from ABC)\n  - Methods: 6\n  - Complexity: 24\n- **AdaptiveCompressor** (inherits from CompressionAlgorithm)\n  - Methods: 3\n  - Complexity: 15\n- **CompressionValidator**\n  - Methods: 3\n  - Complexity: 18\n- **CompressionMetrics**\n  - Methods: 2\n  - Complexity: 12\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.services.compression_config",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/services/compression_config.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.services.compression_config\n\nAPI endpoints for independent_core.compression_systems.services.compression_config\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### //validate/service/config\n\n#### POST //validate/service/config\n\nValidate service configuration.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/service/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/service/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /export/config\n\n#### POST /export/config\n\nExport module configuration to file.\n\n**Parameters:**\n\n- **module_name** (query) *required*: str - Parameter: module_name\n- **filepath** (query) *required*: Path - Parameter: filepath\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/export/config?module_name=example_module_name&filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/export/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"module_name\": \"example_module_name\",\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/config/for/module\n\n#### GET /get/config/for/module\n\nGet configuration with module-specific overrides applied.\n\n**Parameters:**\n\n- **module_name** (query) *required*: str - Parameter: module_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/config/for/module?module_name=example_module_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/config/for/module\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"module_name\": \"example_module_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/config/for/service\n\n#### GET /get/config/for/service\n\nGet configuration for specific service.\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/config/for/service?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/config/for/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/configuration/summary\n\n#### GET /get/configuration/summary\n\nGet summary of all configurations.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/configuration/summary\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/configuration/summary\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /load/config/from/file\n\n#### POST /load/config/from/file\n\nLoad configuration from JSON file.\n\n**Parameters:**\n\n- **filepath** (query) *required*: Path - Parameter: filepath\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/config/from/file?filepath=example_filepath\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/config/from/file\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"filepath\": \"example_filepath\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/system/compatibility\n\n#### POST /validate/system/compatibility\n\nValidate multiple configurations are compatible.\n\n**Parameters:**\n\n- **configs** (query) *required*: string - Parameter: configs\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/system/compatibility?configs=example_configs\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/system/compatibility\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"configs\": \"example_configs\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.services.compression_config\",\n    \"description\": \"API endpoints for independent_core.compression_systems.services.compression_config\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"//validate/service/config\": {\n      \"post\": {\n        \"summary\": \"Validate service configuration.\",\n        \"description\": \"Validate service configuration.\",\n        \"operationId\": \"_validate_service_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/config/for/module\": {\n      \"get\": {\n        \"summary\": \"Get configuration with module-specific overrides applied.\",\n        \"description\": \"Get configuration with module-specific overrides applied.\",\n        \"operationId\": \"get_config_for_module\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"module_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: module_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/config/for/service\": {\n      \"get\": {\n        \"summary\": \"Get configuration for specific service.\",\n        \"description\": \"Get configuration for specific service.\",\n        \"operationId\": \"get_config_for_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/export/config\": {\n      \"post\": {\n        \"summary\": \"Export module configuration to file.\",\n        \"description\": \"Export module configuration to file.\",\n        \"operationId\": \"export_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"module_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: module_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: filepath\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/load/config/from/file\": {\n      \"post\": {\n        \"summary\": \"Load configuration from JSON file.\",\n        \"description\": \"Load configuration from JSON file.\",\n        \"operationId\": \"load_config_from_file\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"filepath\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: filepath\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Path\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/configuration/summary\": {\n      \"get\": {\n        \"summary\": \"Get summary of all configurations.\",\n        \"description\": \"Get summary of all configurations.\",\n        \"operationId\": \"get_configuration_summary\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"base_config\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"module_overrides\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"service_configs\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_modules\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_services\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/validate/system/compatibility\": {\n      \"post\": {\n        \"summary\": \"Validate multiple configurations are compatible.\",\n        \"description\": \"Validate multiple configurations are compatible.\",\n        \"operationId\": \"validate_system_compatibility\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"configs\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: configs\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.services.compression_config\n\n## Overview\n\nConfiguration management for compression systems.\nStrict validation - no default values for critical parameters.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/services/compression_config.py`\n\n## Dependencies\n\n- pathlib\n- dataclasses\n- json\n- typing\n\n## Code Structure\n\n- **Total Lines:** 292\n- **Code Lines:** 210\n- **Comment Lines:** 18\n\n## Complexity Indicators\n\n- Decorators used\n\n",
        "configuration_guide": "\n# independent_core.compression_systems.services.compression_config\n\nConfiguration management for compression systems.\nStrict validation - no default values for critical parameters.\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/services/compression_config.py\n- **Total Classes:** 3\n- **Total Functions:** 0\n- **Dependencies:** pathlib, dataclasses, json, typing\n\n## Contents\n**Classes (3):** CompressionConfig, ConfigurationManager, ConfigurationValidator\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nClass: ConfigurationManager\nFunction: _validate_service_config\nFunction: get_config_for_service\nFunction: register_service_config\n\n## Examples\nNo examples available\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "configuration_guide missing required section: Overview",
        "configuration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.services.compression_api",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/services/compression_api.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.services.compression_api\n\nAPI endpoints for independent_core.compression_systems.services.compression_api\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n⏱️ Rate limited\n\n**Parameters:**\n\n- **registry** (query) *required*: CompressionServiceRegistry - Parameter: registry\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?registry=example_registry&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"registry\": \"example_registry\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //enforce/rate/limit\n\n#### POST //enforce/rate/limit\n\nEnforce rate limiting per module.\n\n⏱️ Rate limited\n\n**Parameters:**\n\n- **module_name** (query) *required*: str - Parameter: module_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//enforce/rate/limit?module_name=example_module_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//enforce/rate/limit\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"module_name\": \"example_module_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/api/statistics\n\n#### GET /get/api/statistics\n\nGet API usage statistics.\n\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/api/statistics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/api/statistics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/services/for/data/type\n\n#### GET /get/services/for/data/type\n\nGet compatible services for data type.\n\n**Parameters:**\n\n- **data_type** (query) *required*: str - Parameter: data_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/services/for/data/type?data_type=example_data_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/services/for/data/type\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"data_type\": \"example_data_type\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.services.compression_api\",\n    \"description\": \"API endpoints for independent_core.compression_systems.services.compression_api\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"registry\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: registry\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"CompressionServiceRegistry\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/services/for/data/type\": {\n      \"get\": {\n        \"summary\": \"Get compatible services for data type.\",\n        \"description\": \"Get compatible services for data type.\",\n        \"operationId\": \"get_services_for_data_type\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"data_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: data_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/api/statistics\": {\n      \"get\": {\n        \"summary\": \"Get API usage statistics.\",\n        \"description\": \"Get API usage statistics.\",\n        \"operationId\": \"get_api_statistics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"active_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"max_concurrent_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"rate_limits\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//enforce/rate/limit\": {\n      \"post\": {\n        \"summary\": \"Enforce rate limiting per module.\",\n        \"description\": \"Enforce rate limiting per module.\",\n        \"operationId\": \"_enforce_rate_limit\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"module_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: module_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.services.compression_api\n\n## Overview\n\nExternal API for compression services.\nZero-tolerance error handling - everything throws immediately.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/services/compression_api.py`\n\n## Dependencies\n\n- compression_service\n- typing\n- torch\n- asyncio\n- time\n\n## Code Structure\n\n- **Total Lines:** 236\n- **Code Lines:** 178\n- **Comment Lines:** 9\n\n## Complexity Indicators\n\n- Async programming\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing"
      ]
    },
    {
      "module": "independent_core.compression_systems.services.compression_service",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/services/compression_service.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.services.compression_service\n\nAPI endpoints for independent_core.compression_systems.services.compression_service\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **module_name** (query) *required*: str - Parameter: module_name\n- **data_type** (query) *required*: str - Parameter: data_type\n- **compression_type** (query) *required*: str - Parameter: compression_type\n- **data** (body) *required*: Tensor - Parameter: data\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"data\": \"example_data\"}' \"http://localhost:8000///init//?module_name=example_module_name&data_type=example_data_type&compression_type=example_compression_type&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"data\": \"example_data\",\n}\n\nparams = {\n    \"module_name\": \"example_module_name\",\n    \"data_type\": \"example_data_type\",\n    \"compression_type\": \"example_compression_type\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **request_id** (query) *required*: str - Parameter: request_id\n- **compressed_data** (query) *required*: string - Parameter: compressed_data\n- **service_name** (query) *required*: str - Parameter: service_name\n- **processing_time** (query) *required*: float - Parameter: processing_time\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?request_id=example_request_id&compressed_data=example_compressed_data&service_name=example_service_name&processing_time=example_processing_time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request_id\": \"example_request_id\",\n    \"compressed_data\": \"example_compressed_data\",\n    \"service_name\": \"example_service_name\",\n    \"processing_time\": \"example_processing_time\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/registry/stats\n\n#### GET /get/registry/stats\n\nGet registry statistics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/registry/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/registry/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service\n\n#### GET /get/service\n\nGet service by name. Throws if not found.\n\n**Parameters:**\n\n- **name** (query) *required*: str - Parameter: name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service?name=example_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"name\": \"example_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/service/metrics\n\n#### GET /get/service/metrics\n\nReturn current service performance metrics.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/services/for/data/type\n\n#### GET /get/services/for/data/type\n\nGet services that support specific data type.\n\n**Parameters:**\n\n- **data_type** (query) *required*: str - Parameter: data_type\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/services/for/data/type?data_type=example_data_type\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/services/for/data/type\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"data_type\": \"example_data_type\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /to/dict\n\n#### POST /to/dict\n\nConvert request to dictionary.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/to/dict\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/to/dict\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST /to/dict\n\nConvert response to dictionary.\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/to/dict\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/to/dict\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.services.compression_service\",\n    \"description\": \"API endpoints for independent_core.compression_systems.services.compression_service\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/get/service/metrics\": {\n      \"get\": {\n        \"summary\": \"Return current service performance metrics.\",\n        \"description\": \"Return current service performance metrics.\",\n        \"operationId\": \"get_service_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"compressed_data\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: compressed_data\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"processing_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: processing_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/service\": {\n      \"get\": {\n        \"summary\": \"Get service by name. Throws if not found.\",\n        \"description\": \"Get service by name. Throws if not found.\",\n        \"operationId\": \"get_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/services/for/data/type\": {\n      \"get\": {\n        \"summary\": \"Get services that support specific data type.\",\n        \"description\": \"Get services that support specific data type.\",\n        \"operationId\": \"get_services_for_data_type\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"data_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: data_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/registry/stats\": {\n      \"get\": {\n        \"summary\": \"Get registry statistics.\",\n        \"description\": \"Get registry statistics.\",\n        \"operationId\": \"get_registry_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_services\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"successful_requests\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"success_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"registered_services\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/to/dict\": {\n      \"post\": {\n        \"summary\": \"Convert response to dictionary.\",\n        \"description\": \"Convert response to dictionary.\",\n        \"operationId\": \"to_dict\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"request_id\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"service_name\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"processing_time\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"timestamp\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compressed_data\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.services.compression_service\n\n## Overview\n\nCompression service interfaces for external module access.\nStrict interface contracts - no lenient behavior.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/services/compression_service.py`\n\n## Dependencies\n\n- typing\n- abc\n- uuid\n- torch\n- asyncio\n- datetime\n\n## Code Structure\n\n- **Total Lines:** 235\n- **Code Lines:** 186\n- **Comment Lines:** 2\n\n## Complexity Indicators\n\n- Async programming\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.services.compression_service\n\nCompression service interfaces for external module access.\nStrict interface contracts - no lenient behavior.\n\n## Components Overview\n\n- **Classes:** 4\n- **Functions:** 0\n- **Dependencies:** 6\n\n## Class Hierarchy\n\n- **CompressionService** (inherits from ABC)\n  - Methods: 4\n  - Complexity: 17\n- **CompressionServiceRegistry**\n  - Methods: 7\n  - Complexity: 36\n- **CompressionRequest**\n  - Methods: 2\n  - Complexity: 11\n- **CompressionResponse**\n  - Methods: 2\n  - Complexity: 11\n## Integration Points\n\n- Class: CompressionService\n- Class: CompressionServiceRegistry\n- Function: _validate_service_config\n- Function: get_service_metrics\n- Function: register_service\n- Function: unregister_service\n- Function: get_service\n- Function: list_services\n- Function: get_services_for_data_type\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.tensor.tensor_core",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/tensor/tensor_core.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.tensor.tensor_core\n\nAPI endpoints for independent_core.compression_systems.tensor.tensor_core\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### /create/decomposition/method\n\n#### POST /create/decomposition/method\n\nFactory function to create decomposition methods\n\n**Parameters:**\n\n- **method_type** (query) *required*: DecompositionType - Parameter: method_type\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/create/decomposition/method?method_type=example_method_type&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/create/decomposition/method\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"method_type\": \"example_method_type\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/compression/stats\n\n#### GET /get/compression/stats\n\nGet comprehensive compression statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/compression/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/compression/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/memory/usage\n\n#### GET /get/memory/usage\n\nCalculate total memory usage of decomposition\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/memory/usage\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/memory/usage\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/supported/methods\n\n#### GET /get/supported/methods\n\nGet list of supported decomposition methods\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/supported/methods\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/supported/methods\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.tensor.tensor_core\",\n    \"description\": \"API endpoints for independent_core.compression_systems.tensor.tensor_core\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"/create/decomposition/method\": {\n      \"post\": {\n        \"summary\": \"Factory function to create decomposition methods\",\n        \"description\": \"Factory function to create decomposition methods\",\n        \"operationId\": \"create_decomposition_method\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"method_type\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: method_type\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"DecompositionType\"\n            }\n          },\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/memory/usage\": {\n      \"get\": {\n        \"summary\": \"Calculate total memory usage of decomposition\",\n        \"description\": \"Calculate total memory usage of decomposition\",\n        \"operationId\": \"get_memory_usage\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/supported/methods\": {\n      \"get\": {\n        \"summary\": \"Get list of supported decomposition methods\",\n        \"description\": \"Get list of supported decomposition methods\",\n        \"operationId\": \"get_supported_methods\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/compression/stats\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive compression statistics\",\n        \"description\": \"Get comprehensive compression statistics\",\n        \"operationId\": \"get_compression_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"supported_methods\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"current_method\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"target_compression_ratio\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.tensor.tensor_core\n\n## Overview\n\nTensor Decomposition Core Classes for Independent Core\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module implements the core tensor decomposition compression system\nwith support for CP, Tucker, and HOSVD decompositions.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/tensor/tensor_core.py`\n\n## Dependencies\n\n- numpy\n- math\n- logging\n- enum\n- typing\n- warnings\n- abc\n- torch\n- base.compression_base\n- torch.nn\n- dataclasses\n- datetime\n\n## Code Structure\n\n- **Total Lines:** 799\n- **Code Lines:** 551\n- **Comment Lines:** 77\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.tensor.tensor_core\n\nTensor Decomposition Core Classes for Independent Core\nNO FALLBACKS - HARD FAILURES ONLY\n\nThis module implements the core tensor decomposition compression system\nwith support for CP, Tucker, and HOSVD decompositions.\n\n## Components Overview\n\n- **Classes:** 10\n- **Functions:** 1\n- **Dependencies:** 12\n\n## Class Hierarchy\n\n- **DecompositionType** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 6\n- **TensorDecomposition**\n  - Methods: 2\n  - Complexity: 18\n- **TensorValidator**\n  - Methods: 3\n  - Complexity: 23\n- **DecompositionMethod** (inherits from ABC)\n  - Methods: 4\n  - Complexity: 14\n- **CPDecomposer** (inherits from DecompositionMethod)\n  - Methods: 5\n  - Complexity: 35\n- **TuckerDecomposer** (inherits from DecompositionMethod)\n  - Methods: 4\n  - Complexity: 21\n- **TensorTrainDecomposer** (inherits from DecompositionMethod)\n  - Methods: 2\n  - Complexity: 14\n- **TensorRankOptimizer**\n  - Methods: 5\n  - Complexity: 36\n- **TensorCompressionSystem** (inherits from CompressionBase)\n  - Methods: 13\n  - Complexity: 61\n- **TensorDecompositionIntegration**\n  - Methods: 3\n  - Complexity: 10\n## Integration Points\n\n- Function: integrate_with_training_manager\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    },
    {
      "module": "independent_core.compression_systems.tensor.integration_example",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/tensor/integration_example.py",
      "success": true,
      "content": {
        "api": "No API endpoints found in independent_core.compression_systems.tensor.integration_example",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.tensor.integration_example\n\n## Overview\n\nTensor Decomposition Compression System Integration Example\nDemonstrates integration with BrainCore, TrainingManager, and GradientCompressionComponent\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/tensor/integration_example.py`\n\n## Dependencies\n\n- numpy\n- independent_core.compression_systems.tensor\n- typing\n- torch\n- independent_core.brain_core\n\n## Code Structure\n\n- **Total Lines:** 313\n- **Code Lines:** 207\n- **Comment Lines:** 37\n\n",
        "integration_guide": "\n# independent_core.compression_systems.tensor.integration_example\n\nTensor Decomposition Compression System Integration Example\nDemonstrates integration with BrainCore, TrainingManager, and GradientCompressionComponent\n\n## Module Information\n- **File Path:** /home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/tensor/integration_example.py\n- **Total Classes:** 2\n- **Total Functions:** 3\n- **Dependencies:** numpy, independent_core.compression_systems.tensor, typing, torch, independent_core.brain_core\n\n## Contents\n**Classes (2):** MockTrainingManager, MockGradientComponent\n**Functions (3):** integrate_tensor_with_brain_core, demonstrate_training_manager_integration, demonstrate_gradient_compression_integration\n\n## Configuration\nNo configuration options available.\n\n## Integration Points\nFunction: demonstrate_training_manager_integration\nClass: MockTrainingManager\n\n## Examples\nTensor Decomposition Compression System Integration Example\n\nDemonstrates integration with BrainCore, TrainingManager, and GradientCompressionComponent\n\"\"\"\n\n\n\"\"\"Demonstrate integration of Tensor compression with BrainCore\"\"\"\n\n# Initialize BrainCore\n\nprint(\"=== Tensor Decomposition Integration Example ===\")\n\n\n# Example 1: Compress 3D tensor (typical neural network layer)\n\n# Example 2: CP decomposition of 4D tensor\n\n# Example 3: Tensor-Train decomposition\n\n# Example 4: Batch compression\n\n# Example 5: GPU memory management demonstration\n\n# Example 6: Rank optimization demonstration\n\n# Example 7: Error handling demonstration (NO FALLBACKS)\n\n# Example 8: Compression statistics\n\n# Example 9: Advanced decomposition features\n\n# Example 10: Memory usage analysis\n\nprint(f\"\\nMemory Usage Analysis:\")\n\ncompressed_memory = comp.get_memory_usage()\n\ndef demonstrate_training_manager_integration():\n\n\"\"\"Demonstrate integration with TrainingManager\"\"\"\n\n# Mock TrainingManager for demonstration\n\ndef demonstrate_gradient_compression_integration():\n\n\"\"\"Demonstrate integration with GradientCompressionComponent\"\"\"\n\n# Run integration demonstrations\n\ndemonstrate_training_manager_integration()\n\n# Run gradient compression integration\n\ndemonstrate_gradient_compression_integration()\n\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "api missing required section: Examples",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "integration_guide missing required section: Overview",
        "integration_guide missing required section: Details"
      ]
    },
    {
      "module": "independent_core.compression_systems.tensor.tensor_service_layer",
      "file_path": "/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/tensor/tensor_service_layer.py",
      "success": true,
      "content": {
        "api": "# API Documentation: independent_core.compression_systems.tensor.tensor_service_layer\n\nAPI endpoints for independent_core.compression_systems.tensor.tensor_service_layer\n\n**Version:** 1.0.0\n**Base URL:** http://localhost:8000\n\n## Endpoints\n\n### ///init//\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **registry** (query) *required*: TensorServiceRegistry - Parameter: registry\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?registry=example_registry&config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"registry\": \"example_registry\",\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n🔒 Authentication required\n⏱️ Rate limited\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000///init//?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **service_name** (query) *required*: string - Parameter: service_name\n- **method_name** (query) *required*: string - Parameter: method_name\n- **version** (query) *required*: string - Parameter: version\n- **payload** (body) *required*: string - Parameter: payload\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"payload\": \"example_payload\"}' \"http://localhost:8000///init//?service_name=example_service_name&method_name=example_method_name&version=example_version\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ndata = {\n    \"payload\": \"example_payload\",\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"method_name\": \"example_method_name\",\n    \"version\": \"example_version\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n#### POST ///init//\n\nAPI endpoint: __init__\n\n**Parameters:**\n\n- **request_id** (query) *required*: integer - Parameter: request_id\n- **status** (query) *required*: string - Parameter: status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000///init//?request_id=example_request_id&status=example_status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000///init//\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request_id\": \"example_request_id\",\n    \"status\": \"example_status\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //cache/response\n\n#### POST //cache/response\n\nCache response with size limit\n\n**Parameters:**\n\n- **key** (query) *required*: str - Parameter: key\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//cache/response?key=example_key&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//cache/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key\": \"example_key\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //check/alerts\n\n#### POST //check/alerts\n\nCheck if alerts should be triggered\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **health** (query) *required*: ServiceHealth - Parameter: health\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//check/alerts?service_name=example_service_name&health=example_health\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//check/alerts\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"health\": \"example_health\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //clean/old/requests\n\n#### POST //clean/old/requests\n\nRemove old requests from tracking\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **current_time** (query) *required*: float - Parameter: current_time\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//clean/old/requests?service_name=example_service_name&current_time=example_current_time\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//clean/old/requests\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"current_time\": \"example_current_time\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //estimate/request/load\n\n#### POST //estimate/request/load\n\nEstimate load for request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//estimate/request/load?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//estimate/request/load\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //execute/request\n\n#### POST //execute/request\n\nExecute the actual request (mock implementation)\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//execute/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//execute/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/cache/key\n\n#### POST //generate/cache/key\n\nGenerate cache key for request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/cache/key?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/cache/key\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //generate/request/id\n\n#### POST //generate/request/id\n\nGenerate unique request ID\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//generate/request/id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//generate/request/id\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //get/error/status\n\n#### POST //get/error/status\n\nGet error response status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/error/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/error/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST //get/error/status\n\nGet error response status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/error/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/error/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST //get/error/status\n\nGet error response status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/error/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/error/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST //get/error/status\n\nGet error response status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/error/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/error/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //get/initial/status\n\n#### POST //get/initial/status\n\nGet initial response status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/initial/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/initial/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //get/success/status\n\n#### POST //get/success/status\n\nGet success response status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/success/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/success/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST //get/success/status\n\nGet success response status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/success/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/success/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n#### POST //get/success/status\n\nGet success response status\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//get/success/status\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//get/success/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### //handle/generic/error\n\n#### POST //handle/generic/error\n\nHandle generic errors\n\n**Parameters:**\n\n- **error** (query) *required*: Exception - Parameter: error\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/generic/error?error=example_error&request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/generic/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/runtime/error\n\n#### POST //handle/runtime/error\n\nHandle RuntimeError\n\n**Parameters:**\n\n- **error** (query) *required*: RuntimeError - Parameter: error\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/runtime/error?error=example_error&request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/runtime/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/type/error\n\n#### POST //handle/type/error\n\nHandle TypeError\n\n**Parameters:**\n\n- **error** (query) *required*: TypeError - Parameter: error\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/type/error?error=example_error&request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/type/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //handle/value/error\n\n#### POST //handle/value/error\n\nHandle ValueError\n\n**Parameters:**\n\n- **error** (query) *required*: ValueError - Parameter: error\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//handle/value/error?error=example_error&request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//handle/value/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //is/retryable/error\n\n#### POST //is/retryable/error\n\nCheck if error is retryable\n\n**Parameters:**\n\n- **error** (query) *required*: str - Parameter: error\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//is/retryable/error?error=example_error\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//is/retryable/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //perform/health/checks\n\n#### POST //perform/health/checks\n\nPerform actual health checks\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//perform/health/checks?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//perform/health/checks\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //record/failure\n\n#### POST //record/failure\n\nRecord failed request\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//record/failure?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//record/failure\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //record/success\n\n#### POST //record/success\n\nRecord successful request\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//record/success?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//record/success\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //route/to/compression\n\n#### POST //route/to/compression\n\nRoute to compression service\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//route/to/compression?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//route/to/compression\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //route/to/decomposition\n\n#### POST //route/to/decomposition\n\nRoute to decomposition service\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//route/to/decomposition?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//route/to/decomposition\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //route/to/decompression\n\n#### POST //route/to/decompression\n\nRoute to decompression service\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//route/to/decompression?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//route/to/decompression\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //update/performance/metrics\n\n#### POST //update/performance/metrics\n\nUpdate overall performance metrics\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//update/performance/metrics?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//update/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //update/service/metrics\n\n#### POST //update/service/metrics\n\nUpdate service performance metrics\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **processing_time** (query) *required*: float - Parameter: processing_time\n- **success** (query) *required*: bool - Parameter: success\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//update/service/metrics?service_name=example_service_name&processing_time=example_processing_time&success=example_success\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//update/service/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"processing_time\": \"example_processing_time\",\n    \"success\": \"example_success\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/compression/parameters\n\n#### POST //validate/compression/parameters\n\nValidate compression parameters\n\n**Parameters:**\n\n- **tensor** (query) *required*: Any - Parameter: tensor\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/compression/parameters?tensor=example_tensor&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/compression/parameters\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"tensor\": \"example_tensor\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/decomposition/factors\n\n#### POST //validate/decomposition/factors\n\nValidate decomposition factors\n\n**Parameters:**\n\n- **decomposition** (query) *required*: Any - Parameter: decomposition\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/decomposition/factors?decomposition=example_decomposition&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/decomposition/factors\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"decomposition\": \"example_decomposition\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/decomposition/metadata\n\n#### POST //validate/decomposition/metadata\n\nValidate decomposition metadata\n\n**Parameters:**\n\n- **decomposition** (query) *required*: Any - Parameter: decomposition\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/decomposition/metadata?decomposition=example_decomposition&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/decomposition/metadata\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"decomposition\": \"example_decomposition\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/decomposition/method\n\n#### POST //validate/decomposition/method\n\nValidate decomposition method\n\n**Parameters:**\n\n- **tensor** (query) *required*: Any - Parameter: tensor\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/decomposition/method?tensor=example_tensor&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/decomposition/method\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"tensor\": \"example_tensor\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/decomposition/ranks\n\n#### POST //validate/decomposition/ranks\n\nValidate decomposition ranks\n\n**Parameters:**\n\n- **tensor** (query) *required*: Any - Parameter: tensor\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/decomposition/ranks?tensor=example_tensor&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/decomposition/ranks\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"tensor\": \"example_tensor\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/decomposition/structure\n\n#### POST //validate/decomposition/structure\n\nValidate decomposition structure\n\n**Parameters:**\n\n- **decomposition** (query) *required*: Any - Parameter: decomposition\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/decomposition/structure?decomposition=example_decomposition&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/decomposition/structure\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"decomposition\": \"example_decomposition\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/tensor/device\n\n#### POST //validate/tensor/device\n\nValidate tensor device\n\n**Parameters:**\n\n- **tensor** (query) *required*: Any - Parameter: tensor\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/tensor/device?tensor=example_tensor&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/tensor/device\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"tensor\": \"example_tensor\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/tensor/dtype\n\n#### POST //validate/tensor/dtype\n\nValidate tensor data type\n\n**Parameters:**\n\n- **tensor** (query) *required*: Any - Parameter: tensor\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/tensor/dtype?tensor=example_tensor&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/tensor/dtype\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"tensor\": \"example_tensor\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### //validate/tensor/shape\n\n#### POST //validate/tensor/shape\n\nValidate tensor shape\n\n**Parameters:**\n\n- **tensor** (query) *required*: Any - Parameter: tensor\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000//validate/tensor/shape?tensor=example_tensor&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000//validate/tensor/shape\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"tensor\": \"example_tensor\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /authorize/service/access\n\n#### POST /authorize/service/access\n\nAuthorize service access\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/authorize/service/access?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/authorize/service/access\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /balance/compression/load\n\n#### POST /balance/compression/load\n\nBalance compression load across services\n\n**Parameters:**\n\n- **requests** (query) *required*: string - Parameter: requests\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/balance/compression/load?requests=example_requests\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/balance/compression/load\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"requests\": \"example_requests\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /balance/decomposition/load\n\n#### POST /balance/decomposition/load\n\nBalance decomposition load across services\n\n**Parameters:**\n\n- **requests** (query) *required*: string - Parameter: requests\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/balance/decomposition/load?requests=example_requests\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/balance/decomposition/load\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"requests\": \"example_requests\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /balance/decompression/load\n\n#### POST /balance/decompression/load\n\nBalance decompression load across services\n\n**Parameters:**\n\n- **requests** (query) *required*: string - Parameter: requests\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/balance/decompression/load?requests=example_requests\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/balance/decompression/load\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"requests\": \"example_requests\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /check/rate/limit\n\n#### POST /check/rate/limit\n\nCheck if request is within rate limits\n\n🔒 Authentication required\n⏱️ Rate limited\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **request_id** (query) *required*: str - Parameter: request_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000/check/rate/limit?service_name=example_service_name&request_id=example_request_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/check/rate/limit\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"request_id\": \"example_request_id\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /get/cache/stats\n\n#### GET /get/cache/stats\n\nGet cache statistics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/cache/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/cache/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/cached/compression\n\n#### GET /get/cached/compression\n\nGet cached compression result\n\n**Parameters:**\n\n- **key** (query) *required*: str - Parameter: key\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/cached/compression?key=example_key\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/cached/compression\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key\": \"example_key\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/cached/decomposition\n\n#### GET /get/cached/decomposition\n\nGet cached decomposition result\n\n**Parameters:**\n\n- **key** (query) *required*: str - Parameter: key\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/cached/decomposition?key=example_key\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/cached/decomposition\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key\": \"example_key\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/cached/decompression\n\n#### GET /get/cached/decompression\n\nGet cached decompression result\n\n**Parameters:**\n\n- **key** (query) *required*: str - Parameter: key\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/cached/decompression?key=example_key\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/cached/decompression\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"key\": \"example_key\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/compression/metrics\n\n#### GET /get/compression/metrics\n\nGet compression metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/compression/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/compression/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/compression/stats\n\n#### GET /get/compression/stats\n\nAPI endpoint: get_compression_stats\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/compression/stats\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/compression/stats\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/decomposition/metrics\n\n#### GET /get/decomposition/metrics\n\nGet decomposition metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/decomposition/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/decomposition/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/decompression/metrics\n\n#### GET /get/decompression/metrics\n\nGet decompression metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/decompression/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/decompression/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/orchestration/metrics\n\n#### GET /get/orchestration/metrics\n\nGet orchestration metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/orchestration/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/orchestration/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/rate/limit/status\n\n#### GET /get/rate/limit/status\n\nGet rate limit status for service\n\n🔒 Authentication required\n⏱️ Rate limited\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000/get/rate/limit/status?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/rate/limit/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/retry/policy\n\n#### GET /get/retry/policy\n\nGet retry policy for service\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/retry/policy?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/retry/policy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/service/config\n\n#### GET /get/service/config\n\nGet current service configuration\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service/load\n\n#### GET /get/service/load\n\nGet current load for service\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/load?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/load\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/service/logs\n\n#### GET /get/service/logs\n\nGet service logs\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **limit** (query) *required*: int - Parameter: limit\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/logs?service_name=example_service_name&limit=example_limit\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/logs\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"limit\": \"example_limit\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/service/performance/metrics\n\n#### GET /get/service/performance/metrics\n\nGet overall service performance metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/performance/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/performance/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/service/status\n\n#### GET /get/service/status\n\nGet service status\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/service/status?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/service/status\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /get/tensor/metrics\n\n#### GET /get/tensor/metrics\n\nGet comprehensive tensor service metrics\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/tensor/metrics\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/tensor/metrics\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n```\n\n\n### /get/tensor/service\n\n#### GET /get/tensor/service\n\nGet tensor service by name\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X GET -H \"Content-Type: application/json\" \"http://localhost:8000/get/tensor/service?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/get/tensor/service\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())\n```\n\n\n### /handle/service/error\n\n#### POST /handle/service/error\n\nHandle service error\n\n**Parameters:**\n\n- **error** (query) *required*: Exception - Parameter: error\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/handle/service/error?error=example_error&request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/handle/service/error\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"error\": \"example_error\",\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /invoke/tensor/compression\n\n#### POST /invoke/tensor/compression\n\nInvoke tensor compression service\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/invoke/tensor/compression?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/invoke/tensor/compression\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /invoke/tensor/decomposition\n\n#### POST /invoke/tensor/decomposition\n\nInvoke tensor decomposition service\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/invoke/tensor/decomposition?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/invoke/tensor/decomposition\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /invoke/tensor/decompression\n\n#### POST /invoke/tensor/decompression\n\nInvoke tensor decompression service\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/invoke/tensor/decompression?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/invoke/tensor/decompression\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /load/service/config\n\n#### POST /load/service/config\n\nLoad service configuration from file\n\n**Parameters:**\n\n- **config_path** (query) *required*: str - Parameter: config_path\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/load/service/config?config_path=example_config_path\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/load/service/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config_path\": \"example_config_path\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /log/service/request\n\n#### POST /log/service/request\n\nLog service request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/log/service/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/log/service/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /log/service/response\n\n#### POST /log/service/response\n\nLog service response\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/log/service/response?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/log/service/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /monitor/service/health\n\n#### POST /monitor/service/health\n\nMonitor service health\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/monitor/service/health?service_name=example_service_name\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/monitor/service/health\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /optimize/service/distribution\n\n#### POST /optimize/service/distribution\n\nOptimize service distribution based on historical data\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/optimize/service/distribution\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/optimize/service/distribution\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /orchestrate/compression/request\n\n#### POST /orchestrate/compression/request\n\nOrchestrate compression request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/orchestrate/compression/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/orchestrate/compression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /orchestrate/decomposition/request\n\n#### POST /orchestrate/decomposition/request\n\nOrchestrate decomposition request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/orchestrate/decomposition/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/orchestrate/decomposition/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /orchestrate/decompression/request\n\n#### POST /orchestrate/decompression/request\n\nOrchestrate decompression request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/orchestrate/decompression/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/orchestrate/decompression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /post/process/response\n\n#### POST /post/process/response\n\nPost-process service response\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/post/process/response?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/post/process/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /pre/process/request\n\n#### POST /pre/process/request\n\nPre-process service request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/pre/process/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/pre/process/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /record/compression/request\n\n#### POST /record/compression/request\n\nRecord compression request metrics\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/record/compression/request?request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/record/compression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /record/decomposition/request\n\n#### POST /record/decomposition/request\n\nRecord decomposition request metrics\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/record/decomposition/request?request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/record/decomposition/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /record/decompression/request\n\n#### POST /record/decompression/request\n\nRecord decompression request metrics\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/record/decompression/request?request=example_request&response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/record/decompression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /reset/rate/limits\n\n#### POST /reset/rate/limits\n\nReset all rate limits\n\n🔒 Authentication required\n⏱️ Rate limited\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000/reset/rate/limits\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/reset/rate/limits\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /retry/request\n\n#### POST /retry/request\n\nRetry request with exponential backoff\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **max_attempts** (query) *required*: int - Parameter: max_attempts\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/retry/request?request=example_request&max_attempts=example_max_attempts\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/retry/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"max_attempts\": \"example_max_attempts\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /route/tensor/request\n\n#### POST /route/tensor/request\n\nRoute tensor request to appropriate service\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/route/tensor/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/route/tensor/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /should/retry/request\n\n#### POST /should/retry/request\n\nDetermine if request should be retried\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n- **attempt** (query) *required*: int - Parameter: attempt\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/should/retry/request?request=example_request&attempt=example_attempt\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/should/retry/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n    \"attempt\": \"example_attempt\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/rate/limit\n\n#### PUT /update/rate/limit\n\nUpdate rate limit tracking\n\n🔒 Authentication required\n⏱️ Rate limited\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **request_id** (query) *required*: str - Parameter: request_id\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000/update/rate/limit?service_name=example_service_name&request_id=example_request_id\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/rate/limit\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"request_id\": \"example_request_id\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/retry/policy\n\n#### PUT /update/retry/policy\n\nUpdate retry policy for service\n\n**Parameters:**\n\n- **service_name** (query) *required*: str - Parameter: service_name\n- **policy** (query) *required*: string - Parameter: policy\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/retry/policy?service_name=example_service_name&policy=example_policy\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/retry/policy\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"service_name\": \"example_service_name\",\n    \"policy\": \"example_policy\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /update/service/config\n\n#### PUT /update/service/config\n\nUpdate service configuration\n\n**Parameters:**\n\n- **config** (query) *required*: string - Parameter: config\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" \"http://localhost:8000/update/service/config?config=example_config\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/update/service/config\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"config\": \"example_config\",\n}\n\nresponse = requests.put(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/compression/request\n\n#### POST /validate/compression/request\n\nValidate compression request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/compression/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/compression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/decomposition/request\n\n#### POST /validate/decomposition/request\n\nValidate decomposition request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/decomposition/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/decomposition/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/decompression/request\n\n#### POST /validate/decompression/request\n\nValidate decompression request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/decompression/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/decompression/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/integration\n\n#### POST /validate/integration\n\nValidate all integrations are working\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/integration\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/integration\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n\n### /validate/service/authentication\n\n#### POST /validate/service/authentication\n\nValidate service authentication\n\n🔒 Authentication required\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Authorization: Bearer YOUR_TOKEN\" -H \"Content-Type: application/json\" \"http://localhost:8000/validate/service/authentication?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/service/authentication\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n    \"Authorization\": \"Bearer YOUR_TOKEN\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/service/response\n\n#### POST /validate/service/response\n\nValidate service response\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/service/response?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/service/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/tensor/request\n\n#### POST /validate/tensor/request\n\nValidate tensor service request\n\n**Parameters:**\n\n- **request** (query) *required*: ServiceRequest - Parameter: request\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/tensor/request?request=example_request\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/tensor/request\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"request\": \"example_request\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n### /validate/tensor/response\n\n#### POST /validate/tensor/response\n\nValidate tensor service response\n\n**Parameters:**\n\n- **response** (query) *required*: ServiceResponse - Parameter: response\n\n**Responses:**\n\n- **200**: Successful response\n\n**Examples:**\n\n##### cURL Example\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \"http://localhost:8000/validate/tensor/response?response=example_response\"\n```\n\n##### Python Example\n\n```python\nimport requests\n\nurl = \"http://localhost:8000/validate/tensor/response\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nparams = {\n    \"response\": \"example_response\",\n}\n\nresponse = requests.post(url, headers=headers, json=data, params=params)\nprint(response.json())\n```\n\n\n## OpenAPI Specification\n\n```json\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API Documentation: independent_core.compression_systems.tensor.tensor_service_layer\",\n    \"description\": \"API endpoints for independent_core.compression_systems.tensor.tensor_service_layer\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8000\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"paths\": {\n    \"///init//\": {\n      \"post\": {\n        \"summary\": \"API endpoint: __init__\",\n        \"description\": \"API endpoint: __init__\",\n        \"operationId\": \"__init__\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          },\n          {\n            \"name\": \"status\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: status\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/invoke/tensor/compression\": {\n      \"post\": {\n        \"summary\": \"Invoke tensor compression service\",\n        \"description\": \"Invoke tensor compression service\",\n        \"operationId\": \"invoke_tensor_compression\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/invoke/tensor/decompression\": {\n      \"post\": {\n        \"summary\": \"Invoke tensor decompression service\",\n        \"description\": \"Invoke tensor decompression service\",\n        \"operationId\": \"invoke_tensor_decompression\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/invoke/tensor/decomposition\": {\n      \"post\": {\n        \"summary\": \"Invoke tensor decomposition service\",\n        \"description\": \"Invoke tensor decomposition service\",\n        \"operationId\": \"invoke_tensor_decomposition\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/tensor/metrics\": {\n      \"get\": {\n        \"summary\": \"Get comprehensive tensor service metrics\",\n        \"description\": \"Get comprehensive tensor service metrics\",\n        \"operationId\": \"get_tensor_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/tensor/request\": {\n      \"post\": {\n        \"summary\": \"Validate tensor service request\",\n        \"description\": \"Validate tensor service request\",\n        \"operationId\": \"validate_tensor_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//update/service/metrics\": {\n      \"post\": {\n        \"summary\": \"Update service performance metrics\",\n        \"description\": \"Update service performance metrics\",\n        \"operationId\": \"_update_service_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"processing_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: processing_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          },\n          {\n            \"name\": \"success\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: success\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"bool\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//get/initial/status\": {\n      \"post\": {\n        \"summary\": \"Get initial response status\",\n        \"description\": \"Get initial response status\",\n        \"operationId\": \"_get_initial_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//get/success/status\": {\n      \"post\": {\n        \"summary\": \"Get success response status\",\n        \"description\": \"Get success response status\",\n        \"operationId\": \"_get_success_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//get/error/status\": {\n      \"post\": {\n        \"summary\": \"Get error response status\",\n        \"description\": \"Get error response status\",\n        \"operationId\": \"_get_error_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/tensor/service\": {\n      \"get\": {\n        \"summary\": \"Get tensor service by name\",\n        \"description\": \"Get tensor service by name\",\n        \"operationId\": \"get_tensor_service\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/orchestrate/compression/request\": {\n      \"post\": {\n        \"summary\": \"Orchestrate compression request\",\n        \"description\": \"Orchestrate compression request\",\n        \"operationId\": \"orchestrate_compression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/orchestrate/decompression/request\": {\n      \"post\": {\n        \"summary\": \"Orchestrate decompression request\",\n        \"description\": \"Orchestrate decompression request\",\n        \"operationId\": \"orchestrate_decompression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/orchestrate/decomposition/request\": {\n      \"post\": {\n        \"summary\": \"Orchestrate decomposition request\",\n        \"description\": \"Orchestrate decomposition request\",\n        \"operationId\": \"orchestrate_decomposition_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/route/tensor/request\": {\n      \"post\": {\n        \"summary\": \"Route tensor request to appropriate service\",\n        \"description\": \"Route tensor request to appropriate service\",\n        \"operationId\": \"route_tensor_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/tensor/response\": {\n      \"post\": {\n        \"summary\": \"Validate tensor service response\",\n        \"description\": \"Validate tensor service response\",\n        \"operationId\": \"validate_tensor_response\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/orchestration/metrics\": {\n      \"get\": {\n        \"summary\": \"Get orchestration metrics\",\n        \"description\": \"Get orchestration metrics\",\n        \"operationId\": \"get_orchestration_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"metrics\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"cache_limit\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"queue_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"active_workers\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//route/to/compression\": {\n      \"post\": {\n        \"summary\": \"Route to compression service\",\n        \"description\": \"Route to compression service\",\n        \"operationId\": \"_route_to_compression\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//route/to/decompression\": {\n      \"post\": {\n        \"summary\": \"Route to decompression service\",\n        \"description\": \"Route to decompression service\",\n        \"operationId\": \"_route_to_decompression\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//route/to/decomposition\": {\n      \"post\": {\n        \"summary\": \"Route to decomposition service\",\n        \"description\": \"Route to decomposition service\",\n        \"operationId\": \"_route_to_decomposition\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/cache/key\": {\n      \"post\": {\n        \"summary\": \"Generate cache key for request\",\n        \"description\": \"Generate cache key for request\",\n        \"operationId\": \"_generate_cache_key\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//cache/response\": {\n      \"post\": {\n        \"summary\": \"Cache response with size limit\",\n        \"description\": \"Cache response with size limit\",\n        \"operationId\": \"_cache_response\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/integration\": {\n      \"post\": {\n        \"summary\": \"Validate all integrations are working\",\n        \"description\": \"Validate all integrations are working\",\n        \"operationId\": \"validate_integration\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/compression/request\": {\n      \"post\": {\n        \"summary\": \"Validate compression request\",\n        \"description\": \"Validate compression request\",\n        \"operationId\": \"validate_compression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/decompression/request\": {\n      \"post\": {\n        \"summary\": \"Validate decompression request\",\n        \"description\": \"Validate decompression request\",\n        \"operationId\": \"validate_decompression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/decomposition/request\": {\n      \"post\": {\n        \"summary\": \"Validate decomposition request\",\n        \"description\": \"Validate decomposition request\",\n        \"operationId\": \"validate_decomposition_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/validate/service/response\": {\n      \"post\": {\n        \"summary\": \"Validate service response\",\n        \"description\": \"Validate service response\",\n        \"operationId\": \"validate_service_response\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/tensor/shape\": {\n      \"post\": {\n        \"summary\": \"Validate tensor shape\",\n        \"description\": \"Validate tensor shape\",\n        \"operationId\": \"_validate_tensor_shape\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"tensor\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: tensor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/tensor/dtype\": {\n      \"post\": {\n        \"summary\": \"Validate tensor data type\",\n        \"description\": \"Validate tensor data type\",\n        \"operationId\": \"_validate_tensor_dtype\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"tensor\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: tensor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/tensor/device\": {\n      \"post\": {\n        \"summary\": \"Validate tensor device\",\n        \"description\": \"Validate tensor device\",\n        \"operationId\": \"_validate_tensor_device\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"tensor\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: tensor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/compression/parameters\": {\n      \"post\": {\n        \"summary\": \"Validate compression parameters\",\n        \"description\": \"Validate compression parameters\",\n        \"operationId\": \"_validate_compression_parameters\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"tensor\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: tensor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/decomposition/structure\": {\n      \"post\": {\n        \"summary\": \"Validate decomposition structure\",\n        \"description\": \"Validate decomposition structure\",\n        \"operationId\": \"_validate_decomposition_structure\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"decomposition\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: decomposition\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/decomposition/factors\": {\n      \"post\": {\n        \"summary\": \"Validate decomposition factors\",\n        \"description\": \"Validate decomposition factors\",\n        \"operationId\": \"_validate_decomposition_factors\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"decomposition\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: decomposition\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/decomposition/metadata\": {\n      \"post\": {\n        \"summary\": \"Validate decomposition metadata\",\n        \"description\": \"Validate decomposition metadata\",\n        \"operationId\": \"_validate_decomposition_metadata\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"decomposition\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: decomposition\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/decomposition/method\": {\n      \"post\": {\n        \"summary\": \"Validate decomposition method\",\n        \"description\": \"Validate decomposition method\",\n        \"operationId\": \"_validate_decomposition_method\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"tensor\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: tensor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//validate/decomposition/ranks\": {\n      \"post\": {\n        \"summary\": \"Validate decomposition ranks\",\n        \"description\": \"Validate decomposition ranks\",\n        \"operationId\": \"_validate_decomposition_ranks\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"tensor\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: tensor\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Any\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/record/compression/request\": {\n      \"post\": {\n        \"summary\": \"Record compression request metrics\",\n        \"description\": \"Record compression request metrics\",\n        \"operationId\": \"record_compression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/record/decompression/request\": {\n      \"post\": {\n        \"summary\": \"Record decompression request metrics\",\n        \"description\": \"Record decompression request metrics\",\n        \"operationId\": \"record_decompression_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/record/decomposition/request\": {\n      \"post\": {\n        \"summary\": \"Record decomposition request metrics\",\n        \"description\": \"Record decomposition request metrics\",\n        \"operationId\": \"record_decomposition_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/compression/metrics\": {\n      \"get\": {\n        \"summary\": \"Get compression metrics\",\n        \"description\": \"Get compression metrics\",\n        \"operationId\": \"get_compression_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/decompression/metrics\": {\n      \"get\": {\n        \"summary\": \"Get decompression metrics\",\n        \"description\": \"Get decompression metrics\",\n        \"operationId\": \"get_decompression_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/decomposition/metrics\": {\n      \"get\": {\n        \"summary\": \"Get decomposition metrics\",\n        \"description\": \"Get decomposition metrics\",\n        \"operationId\": \"get_decomposition_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/service/performance/metrics\": {\n      \"get\": {\n        \"summary\": \"Get overall service performance metrics\",\n        \"description\": \"Get overall service performance metrics\",\n        \"operationId\": \"get_service_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//update/performance/metrics\": {\n      \"post\": {\n        \"summary\": \"Update overall performance metrics\",\n        \"description\": \"Update overall performance metrics\",\n        \"operationId\": \"_update_performance_metrics\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/pre/process/request\": {\n      \"post\": {\n        \"summary\": \"Pre-process service request\",\n        \"description\": \"Pre-process service request\",\n        \"operationId\": \"pre_process_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/post/process/response\": {\n      \"post\": {\n        \"summary\": \"Post-process service response\",\n        \"description\": \"Post-process service response\",\n        \"operationId\": \"post_process_response\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/handle/service/error\": {\n      \"post\": {\n        \"summary\": \"Handle service error\",\n        \"description\": \"Handle service error\",\n        \"operationId\": \"handle_service_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//generate/request/id\": {\n      \"post\": {\n        \"summary\": \"Generate unique request ID\",\n        \"description\": \"Generate unique request ID\",\n        \"operationId\": \"_generate_request_id\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/value/error\": {\n      \"post\": {\n        \"summary\": \"Handle ValueError\",\n        \"description\": \"Handle ValueError\",\n        \"operationId\": \"_handle_value_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ValueError\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/type/error\": {\n      \"post\": {\n        \"summary\": \"Handle TypeError\",\n        \"description\": \"Handle TypeError\",\n        \"operationId\": \"_handle_type_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"TypeError\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/runtime/error\": {\n      \"post\": {\n        \"summary\": \"Handle RuntimeError\",\n        \"description\": \"Handle RuntimeError\",\n        \"operationId\": \"_handle_runtime_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"RuntimeError\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//handle/generic/error\": {\n      \"post\": {\n        \"summary\": \"Handle generic errors\",\n        \"description\": \"Handle generic errors\",\n        \"operationId\": \"_handle_generic_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"Exception\"\n            }\n          },\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/load/service/config\": {\n      \"post\": {\n        \"summary\": \"Load service configuration from file\",\n        \"description\": \"Load service configuration from file\",\n        \"operationId\": \"load_service_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config_path\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config_path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/update/service/config\": {\n      \"put\": {\n        \"summary\": \"Update service configuration\",\n        \"description\": \"Update service configuration\",\n        \"operationId\": \"update_service_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"config\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: config\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/service/config\": {\n      \"get\": {\n        \"summary\": \"Get current service configuration\",\n        \"description\": \"Get current service configuration\",\n        \"operationId\": \"get_service_config\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/monitor/service/health\": {\n      \"post\": {\n        \"summary\": \"Monitor service health\",\n        \"description\": \"Monitor service health\",\n        \"operationId\": \"monitor_service_health\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"service\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"health\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"history_size\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/service/status\": {\n      \"get\": {\n        \"summary\": \"Get service status\",\n        \"description\": \"Get service status\",\n        \"operationId\": \"get_service_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//perform/health/checks\": {\n      \"post\": {\n        \"summary\": \"Perform actual health checks\",\n        \"description\": \"Perform actual health checks\",\n        \"operationId\": \"_perform_health_checks\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//check/alerts\": {\n      \"post\": {\n        \"summary\": \"Check if alerts should be triggered\",\n        \"description\": \"Check if alerts should be triggered\",\n        \"operationId\": \"_check_alerts\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"health\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: health\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceHealth\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/cached/compression\": {\n      \"get\": {\n        \"summary\": \"Get cached compression result\",\n        \"description\": \"Get cached compression result\",\n        \"operationId\": \"get_cached_compression\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/cached/decompression\": {\n      \"get\": {\n        \"summary\": \"Get cached decompression result\",\n        \"description\": \"Get cached decompression result\",\n        \"operationId\": \"get_cached_decompression\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/cached/decomposition\": {\n      \"get\": {\n        \"summary\": \"Get cached decomposition result\",\n        \"description\": \"Get cached decomposition result\",\n        \"operationId\": \"get_cached_decomposition\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: key\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/cache/stats\": {\n      \"get\": {\n        \"summary\": \"Get cache statistics\",\n        \"description\": \"Get cache statistics\",\n        \"operationId\": \"get_cache_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"total_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"compression_cache_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"decompression_cache_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"decomposition_cache_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"hit_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"miss_count\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"hit_rate\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"max_size\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"ttl_seconds\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/validate/service/authentication\": {\n      \"post\": {\n        \"summary\": \"Validate service authentication\",\n        \"description\": \"Validate service authentication\",\n        \"operationId\": \"validate_service_authentication\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"/authorize/service/access\": {\n      \"post\": {\n        \"summary\": \"Authorize service access\",\n        \"description\": \"Authorize service access\",\n        \"operationId\": \"authorize_service_access\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/balance/compression/load\": {\n      \"post\": {\n        \"summary\": \"Balance compression load across services\",\n        \"description\": \"Balance compression load across services\",\n        \"operationId\": \"balance_compression_load\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"requests\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: requests\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/balance/decompression/load\": {\n      \"post\": {\n        \"summary\": \"Balance decompression load across services\",\n        \"description\": \"Balance decompression load across services\",\n        \"operationId\": \"balance_decompression_load\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"requests\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: requests\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/balance/decomposition/load\": {\n      \"post\": {\n        \"summary\": \"Balance decomposition load across services\",\n        \"description\": \"Balance decomposition load across services\",\n        \"operationId\": \"balance_decomposition_load\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"requests\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: requests\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get/service/load\": {\n      \"get\": {\n        \"summary\": \"Get current load for service\",\n        \"description\": \"Get current load for service\",\n        \"operationId\": \"get_service_load\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/optimize/service/distribution\": {\n      \"post\": {\n        \"summary\": \"Optimize service distribution based on historical data\",\n        \"description\": \"Optimize service distribution based on historical data\",\n        \"operationId\": \"optimize_service_distribution\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"service_counts\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"service_types\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"updated_weights\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"total_requests_analyzed\": {\n                      \"type\": \"unknown\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"//estimate/request/load\": {\n      \"post\": {\n        \"summary\": \"Estimate load for request\",\n        \"description\": \"Estimate load for request\",\n        \"operationId\": \"_estimate_request_load\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/log/service/request\": {\n      \"post\": {\n        \"summary\": \"Log service request\",\n        \"description\": \"Log service request\",\n        \"operationId\": \"log_service_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/log/service/response\": {\n      \"post\": {\n        \"summary\": \"Log service response\",\n        \"description\": \"Log service response\",\n        \"operationId\": \"log_service_response\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"response\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: response\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceResponse\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/service/logs\": {\n      \"get\": {\n        \"summary\": \"Get service logs\",\n        \"description\": \"Get service logs\",\n        \"operationId\": \"get_service_logs\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: limit\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/check/rate/limit\": {\n      \"post\": {\n        \"summary\": \"Check if request is within rate limits\",\n        \"description\": \"Check if request is within rate limits\",\n        \"operationId\": \"check_rate_limit\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"request_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"/update/rate/limit\": {\n      \"put\": {\n        \"summary\": \"Update rate limit tracking\",\n        \"description\": \"Update rate limit tracking\",\n        \"operationId\": \"update_rate_limit\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"request_id\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"/get/rate/limit/status\": {\n      \"get\": {\n        \"summary\": \"Get rate limit status for service\",\n        \"description\": \"Get rate limit status for service\",\n        \"operationId\": \"get_rate_limit_status\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"service\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"limits\": {\n                      \"type\": \"unknown\"\n                    },\n                    \"current_usage\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"requests_per_minute\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"requests_per_hour\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"burst_tokens\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    },\n                    \"available\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"requests_per_minute\": {\n                          \"type\": \"unknown\"\n                        },\n                        \"requests_per_hour\": {\n                          \"type\": \"unknown\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"/reset/rate/limits\": {\n      \"post\": {\n        \"summary\": \"Reset all rate limits\",\n        \"description\": \"Reset all rate limits\",\n        \"operationId\": \"reset_rate_limits\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        },\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ]\n      }\n    },\n    \"//clean/old/requests\": {\n      \"post\": {\n        \"summary\": \"Remove old requests from tracking\",\n        \"description\": \"Remove old requests from tracking\",\n        \"operationId\": \"_clean_old_requests\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"current_time\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: current_time\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"float\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/should/retry/request\": {\n      \"post\": {\n        \"summary\": \"Determine if request should be retried\",\n        \"description\": \"Determine if request should be retried\",\n        \"operationId\": \"should_retry_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"attempt\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: attempt\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/retry/request\": {\n      \"post\": {\n        \"summary\": \"Retry request with exponential backoff\",\n        \"description\": \"Retry request with exponential backoff\",\n        \"operationId\": \"retry_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          },\n          {\n            \"name\": \"max_attempts\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: max_attempts\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"int\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/retry/policy\": {\n      \"get\": {\n        \"summary\": \"Get retry policy for service\",\n        \"description\": \"Get retry policy for service\",\n        \"operationId\": \"get_retry_policy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update/retry/policy\": {\n      \"put\": {\n        \"summary\": \"Update retry policy for service\",\n        \"description\": \"Update retry policy for service\",\n        \"operationId\": \"update_retry_policy\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          },\n          {\n            \"name\": \"policy\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: policy\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//is/retryable/error\": {\n      \"post\": {\n        \"summary\": \"Check if error is retryable\",\n        \"description\": \"Check if error is retryable\",\n        \"operationId\": \"_is_retryable_error\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"error\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: error\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//execute/request\": {\n      \"post\": {\n        \"summary\": \"Execute the actual request (mock implementation)\",\n        \"description\": \"Execute the actual request (mock implementation)\",\n        \"operationId\": \"_execute_request\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"request\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: request\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"ServiceRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//record/success\": {\n      \"post\": {\n        \"summary\": \"Record successful request\",\n        \"description\": \"Record successful request\",\n        \"operationId\": \"_record_success\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"//record/failure\": {\n      \"post\": {\n        \"summary\": \"Record failed request\",\n        \"description\": \"Record failed request\",\n        \"operationId\": \"_record_failure\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"service_name\",\n            \"in\": \"query\",\n            \"description\": \"Parameter: service_name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"str\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\"\n          }\n        }\n      }\n    },\n    \"/get/compression/stats\": {\n      \"get\": {\n        \"summary\": \"API endpoint: get_compression_stats\",\n        \"description\": \"API endpoint: get_compression_stats\",\n        \"operationId\": \"get_compression_stats\",\n        \"tags\": [\n          \"default\"\n        ],\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    }\n  }\n}\n```",
        "developer_guide": "# Developer Guide: independent_core.compression_systems.tensor.tensor_service_layer\n\n## Overview\n\nTensor Service Layer Implementation\n\nThis module provides comprehensive service interfaces for external modules to interact\nwith the Tensor compression system. It includes service orchestration, validation,\nmetrics, caching, security, load balancing, and more.\n\n## Development Setup\n\nFile location: `/home/will-casterlin/Desktop/Saraphis/independent_core/compression_systems/tensor/tensor_service_layer.py`\n\n## Dependencies\n\n- pathlib\n- tensor_integration\n- threading\n- datetime\n- json\n- service_interfaces.service_interfaces_core\n- time\n- numpy\n- enum\n- traceback\n- torch\n- typing\n- pickle\n- hashlib\n- tensor_core\n- concurrent.futures\n- logging\n- asyncio\n- dataclasses\n- collections\n\n## Code Structure\n\n- **Total Lines:** 3263\n- **Code Lines:** 2440\n- **Comment Lines:** 235\n\n## Complexity Indicators\n\n- High class count\n- High function count\n- Concurrency\n- Decorators used\n\n",
        "architecture": "# Architecture: independent_core.compression_systems.tensor.tensor_service_layer\n\nTensor Service Layer Implementation\n\nThis module provides comprehensive service interfaces for external modules to interact\nwith the Tensor compression system. It includes service orchestration, validation,\nmetrics, caching, security, load balancing, and more.\n\n## Components Overview\n\n- **Classes:** 29\n- **Functions:** 0\n- **Dependencies:** 20\n\n## Class Hierarchy\n\n- **ServiceStatus** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 7\n- **CircuitBreakerState** (inherits from Enum)\n  - Methods: 0\n  - Complexity: 4\n- **ServiceEndpoint**\n  - Methods: 0\n  - Complexity: 8\n- **ServiceContract**\n  - Methods: 0\n  - Complexity: 7\n- **ServiceHealth**\n  - Methods: 0\n  - Complexity: 12\n- **TensorServiceInterface** (inherits from CompressionServiceInterface)\n  - Methods: 12\n  - Complexity: 74\n- **TensorServiceRegistry**\n  - Methods: 7\n  - Complexity: 43\n- **TensorServiceOrchestrator**\n  - Methods: 15\n  - Complexity: 76\n- **TensorServiceIntegration**\n  - Methods: 6\n  - Complexity: 29\n- **TensorServiceValidation**\n  - Methods: 16\n  - Complexity: 110\n- **TensorServiceMetrics**\n  - Methods: 9\n  - Complexity: 46\n- **TensorServiceMiddleware**\n  - Methods: 12\n  - Complexity: 51\n- **TensorServiceConfiguration**\n  - Methods: 8\n  - Complexity: 52\n- **TensorServiceHealthMonitor**\n  - Methods: 7\n  - Complexity: 43\n- **TensorServiceCache**\n  - Methods: 9\n  - Complexity: 46\n- **TensorServiceSecurity**\n  - Methods: 10\n  - Complexity: 62\n- **TensorServiceLoadBalancer**\n  - Methods: 12\n  - Complexity: 76\n- **TensorServiceLogger**\n  - Methods: 7\n  - Complexity: 33\n- **TensorServiceRateLimiter**\n  - Methods: 8\n  - Complexity: 41\n- **TensorServiceRetryManager**\n  - Methods: 13\n  - Complexity: 58\n- **CompressionServiceInterface**\n  - Methods: 1\n  - Complexity: 3\n- **ServiceRequest**\n  - Methods: 1\n  - Complexity: 3\n- **ServiceResponse**\n  - Methods: 3\n  - Complexity: 9\n- **ServiceRegistry**\n  - Methods: 2\n  - Complexity: 6\n- **ServiceMetrics**\n  - Methods: 1\n  - Complexity: 3\n- **ServiceValidation**\n  - Methods: 1\n  - Complexity: 3\n- **TensorCompressionSystem**\n  - Methods: 4\n  - Complexity: 12\n- **TensorDecomposition**\n  - Methods: 1\n  - Complexity: 3\n- **TensorIntegrator**\n  - Methods: 1\n  - Complexity: 3\n## Integration Points\n\n- Class: ServiceStatus\n- Class: ServiceEndpoint\n- Class: ServiceContract\n- Class: ServiceHealth\n- Class: TensorServiceInterface\n- Class: TensorServiceRegistry\n- Class: TensorServiceOrchestrator\n- Class: TensorServiceIntegration\n- Class: TensorServiceValidation\n- Class: TensorServiceMetrics\n- Class: TensorServiceMiddleware\n- Class: TensorServiceConfiguration\n- Class: TensorServiceHealthMonitor\n- Class: TensorServiceCache\n- Class: TensorServiceSecurity\n- Class: TensorServiceLoadBalancer\n- Class: TensorServiceLogger\n- Class: TensorServiceRateLimiter\n- Class: TensorServiceRetryManager\n- Function: _initialize_tensor_services\n- Function: register_tensor_service\n- Function: _update_service_metrics\n- Function: register_tensor_compression_service\n- Function: register_tensor_decompression_service\n- Function: register_tensor_decomposition_service\n- Function: get_tensor_service\n- Function: list_tensor_services\n- Function: validate_tensor_service\n- Function: integrate_with_training_manager\n- Function: register_service_endpoints\n- Function: validate_service_response\n- Function: get_service_performance_metrics\n- Function: handle_service_error\n- Function: validate_service_health\n- Function: load_service_config\n- Function: validate_service_config\n- Function: update_service_config\n- Function: get_service_config\n- Function: monitor_service_health\n- Function: check_service_availability\n- Function: get_service_status\n- Function: report_service_issues\n- Function: validate_service_authentication\n- Function: authorize_service_access\n- Function: encrypt_service_data\n- Function: decrypt_service_data\n- Function: get_service_load\n- Function: optimize_service_distribution\n- Function: _get_available_services\n- Function: log_service_request\n- Function: log_service_response\n- Function: log_service_error\n- Function: get_service_logs\n- Class: CompressionServiceInterface\n- Class: ServiceRequest\n- Class: ServiceResponse\n- Class: ServiceRegistry\n- Class: ServiceMetrics\n- Class: ServiceValidation\n- Function: register_service\n"
      },
      "errors": [],
      "warnings": [
        "api missing required section: Overview",
        "api missing required section: Classes",
        "api missing required section: Functions",
        "developer_guide missing required section: Architecture",
        "developer_guide missing required section: Contributing",
        "developer_guide missing required section: Testing",
        "architecture missing required section: Relationships",
        "architecture missing required section: Design Patterns"
      ]
    }
  ]
}